parameter (or (or (or (pair %addExistingPair (pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address))) (pair (pair (nat %token1Id) (bool %token1Type)) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) (address %callUpdateExchageAddress)) (or (address %changeAdminAddress) (address %changeLpDeployer))) (or (or (address %changeRouterAddress) (pair %deployPair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type)))) (pair (pair (address %token2Address) (nat %token2Amount)) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress)))))) (or (nat %modifyFee) (address %removeExchangePair))));
storage   (pair (pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%addExistingPair
                # == addExistingPair ==
                # sp.verify((sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)) # @storage : @parameter%addExistingPair
                DUP;        # @storage : @storage : @parameter%addExistingPair
                DUG 2;      # @storage : @parameter%addExistingPair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%addExistingPair : @storage
                GET 3;      # address : @parameter%addExistingPair : @storage
                SENDER;     # @sender : address : @parameter%addExistingPair : @storage
                COMPARE;    # int : @parameter%addExistingPair : @storage
                EQ;         # bool : @parameter%addExistingPair : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%addExistingPair : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%addExistingPair
                    DUP;        # @storage : @storage : @parameter%addExistingPair
                    DUG 2;      # @storage : @parameter%addExistingPair : @storage
                    CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%addExistingPair : @storage
                    GET 4;      # address : @parameter%addExistingPair : @storage
                    SENDER;     # @sender : address : @parameter%addExistingPair : @storage
                    COMPARE;    # int : @parameter%addExistingPair : @storage
                    EQ;         # bool : @parameter%addExistingPair : @storage
                  }; # bool : @parameter%addExistingPair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)"; # string : @parameter%addExistingPair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%addExistingPair : @storage
                SWAP;       # @storage : @parameter%addExistingPair
                # self.data.Registry[params.exchangeAddress] = sp.record(lpTokenAddress = params.lpTokenAddress, token1Address = params.token1Address, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Id = params.token2Id, token2Type = params.token2Type) # @storage : @parameter%addExistingPair
                UNPAIR;     # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                UNPAIR;     # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DIG 3;      # @parameter%addExistingPair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 8;      # bool : @parameter%addExistingPair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # @parameter%addExistingPair : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUG 5;      # @parameter%addExistingPair : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 7;      # nat : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DIG 4;      # @parameter%addExistingPair : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 5;      # address : @parameter%addExistingPair : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # @parameter%addExistingPair : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUG 6;      # @parameter%addExistingPair : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 3;      # pair (nat %token1Id) (bool %token1Type) : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CDR;        # bool : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair bool address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DIG 4;      # @parameter%addExistingPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 3;      # pair (nat %token1Id) (bool %token1Type) : @parameter%addExistingPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                CAR;        # nat : @parameter%addExistingPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # @parameter%addExistingPair : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUG 6;      # @parameter%addExistingPair : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 4;      # address : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DUP 6;      # @parameter%addExistingPair : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CDR;        # address : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair address (pair address nat) : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                SOME;       # option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DUP 5;      # @parameter%addExistingPair : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # address : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                UPDATE;     # big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : @parameter%addExistingPair
                SWAP;       # @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # if params.routerCall: # @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # bool : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF
                  {
                    # sp.transfer(sp.record(exchangeAddress = params.exchangeAddress, stablePair = False, token1Address = params.token1Address, token1Amount = 0, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Amount = 0, token2Id = params.token2Id, token2Type = params.token2Type, userAddress = sp.self_address), sp.tez(0), sp.contract(sp.TRecord(exchangeAddress = sp.TAddress, stablePair = sp.TBool, token1Address = sp.TAddress, token1Amount = sp.TNat, token1Id = sp.TNat, token1Type = sp.TBool, token2Address = sp.TAddress, token2Amount = sp.TNat, token2Id = sp.TNat, token2Type = sp.TBool, userAddress = sp.TAddress).layout(((("exchangeAddress", "stablePair"), ("token1Address", ("token1Amount", "token1Id"))), (("token1Type", ("token2Address", "token2Amount")), ("token2Id", ("token2Type", "userAddress"))))), self.data.routerAddress, entry_point='AddExchange').open_some()) # @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    NIL operation; # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 3;      # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 6;      # address : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CONTRACT %AddExchange (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress))))); # option (contract (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress)))))) : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    IF_NONE
                      {
                        PUSH int 222; # int : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    SELF_ADDRESS; # @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 5;      # @parameter%addExistingPair : @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 8;      # bool : @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair bool @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 5;      # @parameter%addExistingPair : pair bool @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 7;      # nat : pair bool @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH nat 0; # nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 6;      # @parameter%addExistingPair : nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 5;      # address : nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 6;      # @parameter%addExistingPair : pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 3;      # pair (nat %token1Id) (bool %token1Type) : pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CDR;        # bool : pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair bool (pair address nat) : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 5;      # @parameter%addExistingPair : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 3;      # pair (nat %token1Id) (bool %token1Type) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH nat 0; # nat : nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 6;      # @parameter%addExistingPair : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 4;      # address : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH bool False; # bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 7;      # @parameter%addExistingPair : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair address bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair (pair address bool) (pair address (pair nat nat)) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair (pair (pair address bool) (pair address (pair nat nat))) (pair (pair bool (pair address nat)) (pair nat (pair bool @self))) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    TRANSFER_TOKENS; # operation : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CONS;       # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                  }
                  {
                    NIL operation; # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                  }; # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # self.data.lpMapping[params.lpTokenAddress] = params.exchangeAddress # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 2;      # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                DUP;        # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                GET 5;      # big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                DUP 4;      # @parameter%addExistingPair : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                CAR;        # address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                SOME;       # option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                DIG 4;      # @parameter%addExistingPair : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (address %token1Address)) : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CDR;        # address : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE;     # big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE 5;   # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                SWAP;       # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }
              {
                SWAP;       # @storage : @parameter%callUpdateExchageAddress
                # == callUpdateExchageAddress ==
                # sp.verify(self.data.lpMapping.contains(params)) # @storage : @parameter%callUpdateExchageAddress
                DUP;        # @storage : @storage : @parameter%callUpdateExchageAddress
                DUG 2;      # @storage : @parameter%callUpdateExchageAddress : @storage
                GET 5;      # big_map address address : @parameter%callUpdateExchageAddress : @storage
                SWAP;       # @parameter%callUpdateExchageAddress : big_map address address : @storage
                DUP;        # @parameter%callUpdateExchageAddress : @parameter%callUpdateExchageAddress : big_map address address : @storage
                DUG 2;      # @parameter%callUpdateExchageAddress : big_map address address : @parameter%callUpdateExchageAddress : @storage
                MEM;        # bool : @parameter%callUpdateExchageAddress : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.lpMapping.contains(params)"; # string : @parameter%callUpdateExchageAddress : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%callUpdateExchageAddress : @storage
                # sp.transfer(self.data.lpMapping[params], sp.tez(0), sp.contract(sp.TAddress, params, entry_point='updateExchangeAddress').open_some()) # @parameter%callUpdateExchageAddress : @storage
                DUP;        # @parameter%callUpdateExchageAddress : @parameter%callUpdateExchageAddress : @storage
                CONTRACT %updateExchangeAddress address; # option (contract address) : @parameter%callUpdateExchageAddress : @storage
                IF_NONE
                  {
                    PUSH int 183; # int : @parameter%callUpdateExchageAddress : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%callUpdateExchageAddress : @storage
                NIL operation; # list operation : @some : @parameter%callUpdateExchageAddress : @storage
                SWAP;       # @some : list operation : @parameter%callUpdateExchageAddress : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%callUpdateExchageAddress : @storage
                DUP 5;      # @storage : mutez : @some : list operation : @parameter%callUpdateExchageAddress : @storage
                GET 5;      # big_map address address : mutez : @some : list operation : @parameter%callUpdateExchageAddress : @storage
                DIG 4;      # @parameter%callUpdateExchageAddress : big_map address address : mutez : @some : list operation : @storage
                GET;        # option address : mutez : @some : list operation : @storage
                IF_NONE
                  {
                    PUSH int 189; # int : mutez : @some : list operation : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }; # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%changeAdminAddress
                # == changeAdminAddress ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%changeAdminAddress
                DUP;        # @storage : @storage : @parameter%changeAdminAddress
                DUG 2;      # @storage : @parameter%changeAdminAddress : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%changeAdminAddress : @storage
                GET 3;      # address : @parameter%changeAdminAddress : @storage
                SENDER;     # @sender : address : @parameter%changeAdminAddress : @storage
                COMPARE;    # int : @parameter%changeAdminAddress : @storage
                EQ;         # bool : @parameter%changeAdminAddress : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%changeAdminAddress : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%changeAdminAddress : @storage
                SWAP;       # @storage : @parameter%changeAdminAddress
                # self.data.adminAddress = params # @storage : @parameter%changeAdminAddress
                UNPAIR;     # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                UNPAIR;     # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                SWAP;       # pair (address %adminAddress) (address %lpDeployer) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                CDR;        # address : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                DIG 3;      # @parameter%changeAdminAddress : address : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair @parameter%changeAdminAddress address : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair @parameter%changeAdminAddress address : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair @parameter%changeAdminAddress address) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (pair (big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair @parameter%changeAdminAddress address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }
              {
                SWAP;       # @storage : @parameter%changeLpDeployer
                # == changeLpDeployer ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%changeLpDeployer
                DUP;        # @storage : @storage : @parameter%changeLpDeployer
                DUG 2;      # @storage : @parameter%changeLpDeployer : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%changeLpDeployer : @storage
                GET 3;      # address : @parameter%changeLpDeployer : @storage
                SENDER;     # @sender : address : @parameter%changeLpDeployer : @storage
                COMPARE;    # int : @parameter%changeLpDeployer : @storage
                EQ;         # bool : @parameter%changeLpDeployer : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%changeLpDeployer : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%changeLpDeployer : @storage
                SWAP;       # @storage : @parameter%changeLpDeployer
                # self.data.lpDeployer = params # @storage : @parameter%changeLpDeployer
                UNPAIR;     # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                UNPAIR;     # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                SWAP;       # pair (address %adminAddress) (address %lpDeployer) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                CAR;        # address : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                DIG 3;      # @parameter%changeLpDeployer : address : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # address : @parameter%changeLpDeployer : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair address @parameter%changeLpDeployer : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair address @parameter%changeLpDeployer : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair address @parameter%changeLpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (pair (big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair address @parameter%changeLpDeployer)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }; # pair (pair (big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
            NIL operation; # list operation : pair (pair (big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }; # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%changeRouterAddress
                # == changeRouterAddress ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%changeRouterAddress
                DUP;        # @storage : @storage : @parameter%changeRouterAddress
                DUG 2;      # @storage : @parameter%changeRouterAddress : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%changeRouterAddress : @storage
                GET 3;      # address : @parameter%changeRouterAddress : @storage
                SENDER;     # @sender : address : @parameter%changeRouterAddress : @storage
                COMPARE;    # int : @parameter%changeRouterAddress : @storage
                EQ;         # bool : @parameter%changeRouterAddress : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%changeRouterAddress : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%changeRouterAddress : @storage
                # self.data.routerAddress = params # @parameter%changeRouterAddress : @storage
                UPDATE 6;   # @storage
                NIL operation; # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%deployPair
                # == deployPair ==
                # sp.verify(sp.sender == self.data.lpDeployer) # @storage : @parameter%deployPair
                DUP;        # @storage : @storage : @parameter%deployPair
                DUG 2;      # @storage : @parameter%deployPair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%deployPair : @storage
                GET 4;      # address : @parameter%deployPair : @storage
                SENDER;     # @sender : address : @parameter%deployPair : @storage
                COMPARE;    # int : @parameter%deployPair : @storage
                EQ;         # bool : @parameter%deployPair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.lpDeployer"; # string : @parameter%deployPair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%deployPair : @storage
                # def f_x0(_x0):
                #   sp.verify(_x0 >= 0, 'Negative_Value')
                #   y = sp.local("y", _x0)
                #   sp.while (y.value * y.value) > _x0:
                #     y.value = ((_x0 // y.value) + y.value) // 2
                #   sp.verify(((y.value * y.value) <= _x0) & (_x0 < ((y.value + 1) * (y.value + 1))))
                #   sp.result(y.value)
                # create_contract_volatileDeployer_42 = sp.local("create_contract_volatileDeployer_42", create contract ...) # @parameter%deployPair : @storage
                NIL operation; # list operation : @parameter%deployPair : @storage
                PUSH (pair nat (pair nat (option address))) (Pair 0 (Pair 0 None)); # pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                PUSH nat 0; # nat : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                DUP 4;      # @parameter%deployPair : nat : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                GET 5;      # nat : nat : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair nat nat : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                DIG 2;      # @parameter%deployPair : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                GET 7;      # bool : @parameter%deployPair : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                SWAP;       # @parameter%deployPair : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                DUG 4;      # @parameter%deployPair : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                GET 3;      # pair (address %token2Address) (nat %token2Amount) : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                CAR;        # address : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PUSH (pair nat nat) (Pair 0 0); # pair nat nat : pair address bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair nat nat) (pair address bool) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DIG 2;      # @parameter%deployPair : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : @parameter%deployPair : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @storage
                GET 5;      # nat : @parameter%deployPair : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @storage
                SWAP;       # @parameter%deployPair : nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @storage
                DUG 4;      # @parameter%deployPair : nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                GET 6;      # bool : nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair bool nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DUP 4;      # @parameter%deployPair : pair bool nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : pair bool nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : pair bool nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CDR;        # address : pair bool nat : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address (pair bool nat) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PUSH (pair bool bool) (Pair False False); # pair bool bool : pair address (pair bool nat) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PUSH nat 40; # nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DUP 5;      # @parameter%deployPair : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # address : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DIG 5;      # @storage : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                DUP;        # @storage : @storage : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                GET 3;      # nat : @storage : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                SWAP;       # @storage : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                DUP;        # @storage : @storage : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                DUG 7;      # @storage : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                GET 3;      # address : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair address nat) (pair address nat) : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat))) : pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address))))) : list operation : @parameter%deployPair : @storage
                PUSH mutez 0; # mutez : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address))))) : list operation : @parameter%deployPair : @storage
                NONE key_hash; # option key_hash : mutez : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair address bool)) (pair (pair nat nat) (pair nat (pair nat (option address))))) : list operation : @parameter%deployPair : @storage
                CREATE_CONTRACT
                 { parameter (or (or (or (pair %AddLiquidity (address %recipient) (pair (nat %token1_max) (nat %token2_max))) (address %ChangeAdmin)) (or (unit %ChangeState) (address %ChangeSystem))) (or (or (nat %ModifyFee) (nat %ModifyMaxSwapAmount)) (or (pair %RemoveLiquidity (pair (nat %lpAmount) (address %recipient)) (pair (nat %token1_min) (nat %token2_min))) (or (pair %Swap (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))) (pair %forwardFee (nat %epoch) (address %feeDistributor))))));
                   storage   (pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))));
                   code
                     {
                       # Private variable: square_root # pair @parameter @storage
                       LAMBDA
                         nat
                         nat
                         {
                           # sp.verify(_x0 >= 0, 'Negative_Value') # nat
                           DUP;        # nat : nat
                           PUSH nat 0; # nat : nat : nat
                           SWAP;       # nat : nat : nat
                           COMPARE;    # int : nat
                           GE;         # bool : nat
                           IF
                             {}
                             {
                               PUSH string "Negative_Value"; # string : nat
                               FAILWITH;   # FAILED
                             }; # nat
                           # y = sp.local("y", _x0) # nat
                           DUP;        # nat : nat
                           # while (y.value * y.value) > _x0 : ... # nat : nat
                           DUP;        # nat : nat : nat
                           DUG 2;      # nat : nat : nat
                           SWAP;       # nat : nat : nat
                           DUP;        # nat : nat : nat : nat
                           DUP;        # nat : nat : nat : nat : nat
                           DUG 3;      # nat : nat : nat : nat : nat
                           MUL;        # nat : nat : nat : nat
                           COMPARE;    # int : nat : nat
                           GT;         # bool : nat : nat
                           LOOP
                             {
                               # y.value = ((_x0 // y.value) + y.value) // 2 # nat : nat
                               PUSH nat 2; # nat : nat : nat
                               SWAP;       # nat : nat : nat
                               DUP;        # nat : nat : nat : nat
                               DUP 4;      # nat : nat : nat : nat : nat
                               EDIV;       # option (pair nat nat) : nat : nat : nat
                               IF_NONE
                                 {
                                   PUSH int 104; # int : nat : nat : nat
                                   FAILWITH;   # FAILED
                                 }
                                 {
                                   CAR;        # nat : nat : nat : nat
                                 }; # nat : nat : nat : nat
                               ADD;        # nat : nat : nat
                               EDIV;       # option (pair nat nat) : nat
                               IF_NONE
                                 {
                                   PUSH int 104; # int : nat
                                   FAILWITH;   # FAILED
                                 }
                                 {
                                   CAR;        # nat : nat
                                 }; # nat : nat
                               SWAP;       # nat : nat
                               # check for next loop: (y.value * y.value) > _x0 # nat : nat
                               DUP;        # nat : nat : nat
                               DUG 2;      # nat : nat : nat
                               SWAP;       # nat : nat : nat
                               DUP;        # nat : nat : nat : nat
                               DUP;        # nat : nat : nat : nat : nat
                               DUG 3;      # nat : nat : nat : nat : nat
                               MUL;        # nat : nat : nat : nat
                               COMPARE;    # int : nat : nat
                               GT;         # bool : nat : nat
                             }; # nat : nat
                           SWAP;       # nat : nat
                           # sp.verify(((y.value * y.value) <= _x0) & (_x0 < ((y.value + 1) * (y.value + 1)))) # nat : nat
                           DUP;        # nat : nat : nat
                           DUG 2;      # nat : nat : nat
                           SWAP;       # nat : nat : nat
                           DUP;        # nat : nat : nat : nat
                           DUP;        # nat : nat : nat : nat : nat
                           DUG 3;      # nat : nat : nat : nat : nat
                           MUL;        # nat : nat : nat : nat
                           COMPARE;    # int : nat : nat
                           LE;         # bool : nat : nat
                           IF
                             {
                               DUP;        # nat : nat : nat
                               PUSH nat 1; # nat : nat : nat : nat
                               ADD;        # nat : nat : nat
                               PUSH nat 1; # nat : nat : nat : nat
                               DUP 3;      # nat : nat : nat : nat : nat
                               ADD;        # nat : nat : nat : nat
                               MUL;        # nat : nat : nat
                               DIG 2;      # nat : nat : nat
                               COMPARE;    # int : nat
                               LT;         # bool : nat
                             }
                             {
                               SWAP;       # nat : nat
                               DROP;       # nat
                               PUSH bool False; # bool : nat
                             }; # bool : nat
                           IF
                             {}
                             {
                               PUSH string "WrongCondition: ((y.value * y.value) <= _x0) & (_x0 < ((y.value + 1) * (y.value + 1)))"; # string : nat
                               FAILWITH;   # FAILED
                             }; # nat
                           # sp.result(y.value) # nat
                         }; # lambda nat nat : pair @parameter @storage
                       SWAP;       # pair @parameter @storage : lambda nat nat
                       UNPAIR;     # @parameter : @storage : lambda nat nat
                       IF_LEFT
                         {
                           IF_LEFT
                             {
                               IF_LEFT
                                 {
                                   # == AddLiquidity ==
                                   # token1Amount = sp.local("token1Amount", 0) # @parameter%AddLiquidity : @storage : lambda nat nat
                                   PUSH nat 0; # nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   # token2Amount = sp.local("token2Amount", 0) # nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   PUSH nat 0; # nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   # liquidity = sp.local("liquidity", 0)
                                   # if self.data.totalSupply != 0: # nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   PUSH nat 0; # nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   DUP 5;      # @storage : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   GET 9;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   COMPARE;    # int : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   NEQ;        # bool : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                   IF
                                     {
                                       # if ((params.token1_max * self.data.token2_pool) // self.data.token1_pool) <= params.token2_max: # nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       DUP 3;      # @parameter%AddLiquidity : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       GET 4;      # nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       DIG 4;      # @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       CDR;        # nat : @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       SWAP;       # @storage : nat : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       DUG 6;      # @storage : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       GET 7;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       DUP 6;      # @parameter%AddLiquidity : nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 269; # int : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                         }; # nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       LE;         # bool : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       IF
                                         {
                                           DROP 2;     # @parameter%AddLiquidity : @storage : lambda nat nat
                                           # token1Amount.value = params.token1_max # @parameter%AddLiquidity : @storage : lambda nat nat
                                           DUP;        # @parameter%AddLiquidity : @parameter%AddLiquidity : @storage : lambda nat nat
                                           GET 3;      # nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           # token2Amount.value = (params.token1_max * self.data.token2_pool) // self.data.token1_pool # nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           DIG 2;      # @storage : nat : @parameter%AddLiquidity : lambda nat nat
                                           DUP;        # @storage : @storage : nat : @parameter%AddLiquidity : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @storage : nat : @parameter%AddLiquidity : lambda nat nat
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : @storage : nat : @parameter%AddLiquidity : lambda nat nat
                                           CDR;        # nat : @storage : nat : @parameter%AddLiquidity : lambda nat nat
                                           SWAP;       # @storage : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                           DUP;        # @storage : @storage : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                           DUG 4;      # @storage : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           GET 7;      # nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           DUP 4;      # @parameter%AddLiquidity : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           EDIV;       # option (pair nat nat) : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           IF_NONE
                                             {
                                               PUSH int 273; # int : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                             }; # nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                         }
                                         {}; # nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       # if ((params.token2_max * self.data.token1_pool) // self.data.token2_pool) <= params.token1_max: # nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       DUP 3;      # @parameter%AddLiquidity : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       DIG 4;      # @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       GET 7;      # nat : @storage : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       SWAP;       # @storage : nat : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : nat : @parameter%AddLiquidity : lambda nat nat
                                       DUG 6;      # @storage : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       CDR;        # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       DUP 6;      # @parameter%AddLiquidity : nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       GET 4;      # nat : nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 276; # int : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                         }; # nat : nat : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       LE;         # bool : nat : nat : @parameter%AddLiquidity : @storage : lambda nat nat
                                       IF
                                         {
                                           DROP 2;     # @parameter%AddLiquidity : @storage : lambda nat nat
                                           DIG 2;      # lambda nat nat : @parameter%AddLiquidity : @storage
                                           DROP;       # @parameter%AddLiquidity : @storage
                                           # token2Amount.value = params.token2_max # @parameter%AddLiquidity : @storage
                                           DUP;        # @parameter%AddLiquidity : @parameter%AddLiquidity : @storage
                                           GET 4;      # nat : @parameter%AddLiquidity : @storage
                                           # token1Amount.value = (params.token2_max * self.data.token1_pool) // self.data.token2_pool # nat : @parameter%AddLiquidity : @storage
                                           DIG 2;      # @storage : nat : @parameter%AddLiquidity
                                           DUP;        # @storage : @storage : nat : @parameter%AddLiquidity
                                           GET 7;      # nat : @storage : nat : @parameter%AddLiquidity
                                           SWAP;       # @storage : nat : nat : @parameter%AddLiquidity
                                           DUP;        # @storage : @storage : nat : nat : @parameter%AddLiquidity
                                           DUG 4;      # @storage : nat : nat : @parameter%AddLiquidity : @storage
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : nat : @parameter%AddLiquidity : @storage
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : nat : @parameter%AddLiquidity : @storage
                                           CDR;        # nat : nat : nat : @parameter%AddLiquidity : @storage
                                           DUP 4;      # @parameter%AddLiquidity : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           GET 4;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           MUL;        # nat : nat : nat : @parameter%AddLiquidity : @storage
                                           EDIV;       # option (pair nat nat) : nat : @parameter%AddLiquidity : @storage
                                           IF_NONE
                                             {
                                               PUSH int 280; # int : nat : @parameter%AddLiquidity : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : @parameter%AddLiquidity : @storage
                                             }; # nat : nat : @parameter%AddLiquidity : @storage
                                           SWAP;       # nat : nat : @parameter%AddLiquidity : @storage
                                         }
                                         {
                                           DIG 4;      # lambda nat nat : nat : nat : @parameter%AddLiquidity : @storage
                                           DROP;       # nat : nat : @parameter%AddLiquidity : @storage
                                         }; # nat : nat : @parameter%AddLiquidity : @storage
                                       # sp.verify(token1Amount.value > 0, 'Plenty_Network_Invalid_LP_Ratio') # nat : nat : @parameter%AddLiquidity : @storage
                                       PUSH nat 0; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 3;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       COMPARE;    # int : nat : nat : @parameter%AddLiquidity : @storage
                                       GT;         # bool : nat : nat : @parameter%AddLiquidity : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Invalid_LP_Ratio"; # string : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%AddLiquidity : @storage
                                       # sp.verify(token2Amount.value > 0, 'Plenty_Network_Invalid_LP_Ratio') # nat : nat : @parameter%AddLiquidity : @storage
                                       DUP;        # nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PUSH nat 0; # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       COMPARE;    # int : nat : nat : @parameter%AddLiquidity : @storage
                                       LT;         # bool : nat : nat : @parameter%AddLiquidity : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Invalid_LP_Ratio"; # string : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%AddLiquidity : @storage
                                       # if ((token1Amount.value * self.data.totalSupply) // self.data.token1_pool) < ((token2Amount.value * self.data.totalSupply) // self.data.token2_pool): # nat : nat : @parameter%AddLiquidity : @storage
                                       DIG 3;      # @storage : nat : nat : @parameter%AddLiquidity
                                       DUP;        # @storage : @storage : nat : nat : @parameter%AddLiquidity
                                       GET 7;      # nat : @storage : nat : nat : @parameter%AddLiquidity
                                       SWAP;       # @storage : nat : nat : nat : @parameter%AddLiquidity
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%AddLiquidity
                                       DUG 5;      # @storage : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 9;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 3;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       MUL;        # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : @parameter%AddLiquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 286; # int : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : @parameter%AddLiquidity : @storage
                                         }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DIG 4;      # @storage : nat : nat : nat : @parameter%AddLiquidity
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%AddLiquidity
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @storage : nat : nat : nat : @parameter%AddLiquidity
                                       CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : @storage : nat : nat : nat : @parameter%AddLiquidity
                                       CDR;        # nat : @storage : nat : nat : nat : @parameter%AddLiquidity
                                       SWAP;       # @storage : nat : nat : nat : nat : @parameter%AddLiquidity
                                       DUP;        # @storage : @storage : nat : nat : nat : nat : @parameter%AddLiquidity
                                       DUG 6;      # @storage : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 9;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       MUL;        # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 286; # int : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                         }; # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       COMPARE;    # int : nat : nat : @parameter%AddLiquidity : @storage
                                       LT;         # bool : nat : nat : @parameter%AddLiquidity : @storage
                                       IF
                                         {
                                           # liquidity.value = (token1Amount.value * self.data.totalSupply) // self.data.token1_pool # nat : nat : @parameter%AddLiquidity : @storage
                                           DIG 3;      # @storage : nat : nat : @parameter%AddLiquidity
                                           DUP;        # @storage : @storage : nat : nat : @parameter%AddLiquidity
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @storage : nat : nat : @parameter%AddLiquidity
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : @storage : nat : nat : @parameter%AddLiquidity
                                           CDR;        # nat : @storage : nat : nat : @parameter%AddLiquidity
                                           SWAP;       # @storage : nat : nat : nat : @parameter%AddLiquidity
                                           DUP;        # @storage : @storage : nat : nat : nat : @parameter%AddLiquidity
                                           DUG 5;      # @storage : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           GET 9;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           DUP 4;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           MUL;        # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           EDIV;       # option (pair nat nat) : nat : nat : @parameter%AddLiquidity : @storage
                                           IF_NONE
                                             {
                                               PUSH int 288; # int : nat : nat : @parameter%AddLiquidity : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : nat : @parameter%AddLiquidity : @storage
                                             }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                         }
                                         {
                                           # liquidity.value = (token2Amount.value * self.data.totalSupply) // self.data.token2_pool # nat : nat : @parameter%AddLiquidity : @storage
                                           DIG 3;      # @storage : nat : nat : @parameter%AddLiquidity
                                           DUP;        # @storage : @storage : nat : nat : @parameter%AddLiquidity
                                           GET 7;      # nat : @storage : nat : nat : @parameter%AddLiquidity
                                           SWAP;       # @storage : nat : nat : nat : @parameter%AddLiquidity
                                           DUP;        # @storage : @storage : nat : nat : nat : @parameter%AddLiquidity
                                           DUG 5;      # @storage : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           GET 9;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           DUP 3;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           MUL;        # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           EDIV;       # option (pair nat nat) : nat : nat : @parameter%AddLiquidity : @storage
                                           IF_NONE
                                             {
                                               PUSH int 292; # int : nat : nat : @parameter%AddLiquidity : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : nat : @parameter%AddLiquidity : @storage
                                             }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                         }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                     }
                                     {
                                       DROP 2;     # @parameter%AddLiquidity : @storage : lambda nat nat
                                       # compute_volatileSwap_298i = sp.local("compute_volatileSwap_298i", self.square_root(params.token1_max * params.token2_max)) # @parameter%AddLiquidity : @storage : lambda nat nat
                                       DIG 2;      # lambda nat nat : @parameter%AddLiquidity : @storage
                                       SWAP;       # @parameter%AddLiquidity : lambda nat nat : @storage
                                       DUP;        # @parameter%AddLiquidity : @parameter%AddLiquidity : lambda nat nat : @storage
                                       GET 4;      # nat : @parameter%AddLiquidity : lambda nat nat : @storage
                                       SWAP;       # @parameter%AddLiquidity : nat : lambda nat nat : @storage
                                       DUP;        # @parameter%AddLiquidity : @parameter%AddLiquidity : nat : lambda nat nat : @storage
                                       DUG 3;      # @parameter%AddLiquidity : nat : lambda nat nat : @parameter%AddLiquidity : @storage
                                       GET 3;      # nat : nat : lambda nat nat : @parameter%AddLiquidity : @storage
                                       MUL;        # nat : lambda nat nat : @parameter%AddLiquidity : @storage
                                       EXEC;       # nat : @parameter%AddLiquidity : @storage
                                       # sqrt = sp.local("sqrt", compute_volatileSwap_298i.value)
                                       # sp.verify(sqrt.value > 1000, 'Negative_Val') # nat : @parameter%AddLiquidity : @storage
                                       DUP;        # nat : nat : @parameter%AddLiquidity : @storage
                                       PUSH nat 1000; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                       COMPARE;    # int : nat : @parameter%AddLiquidity : @storage
                                       LT;         # bool : nat : @parameter%AddLiquidity : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Negative_Val"; # string : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : @parameter%AddLiquidity : @storage
                                       # liquidity.value = abs(sqrt.value - 1000) # nat : @parameter%AddLiquidity : @storage
                                       PUSH nat 1000; # nat : nat : @parameter%AddLiquidity : @storage
                                       SWAP;       # nat : nat : @parameter%AddLiquidity : @storage
                                       SUB;        # int : @parameter%AddLiquidity : @storage
                                       ABS;        # nat : @parameter%AddLiquidity : @storage
                                       # self.data.totalSupply += 1000 # nat : @parameter%AddLiquidity : @storage
                                       DIG 2;      # @storage : nat : @parameter%AddLiquidity
                                       DUP;        # @storage : @storage : nat : @parameter%AddLiquidity
                                       GET 9;      # nat : @storage : nat : @parameter%AddLiquidity
                                       PUSH nat 1000; # nat : nat : @storage : nat : @parameter%AddLiquidity
                                       ADD;        # nat : @storage : nat : @parameter%AddLiquidity
                                       UPDATE 9;   # @storage : nat : @parameter%AddLiquidity
                                       DUG 2;      # nat : @parameter%AddLiquidity : @storage
                                       SWAP;       # @parameter%AddLiquidity : nat : @storage
                                       # token1Amount.value = params.token1_max # @parameter%AddLiquidity : nat : @storage
                                       DUP;        # @parameter%AddLiquidity : @parameter%AddLiquidity : nat : @storage
                                       DUG 2;      # @parameter%AddLiquidity : nat : @parameter%AddLiquidity : @storage
                                       GET 3;      # nat : nat : @parameter%AddLiquidity : @storage
                                       SWAP;       # nat : nat : @parameter%AddLiquidity : @storage
                                       # token2Amount.value = params.token2_max # nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 3;      # @parameter%AddLiquidity : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 4;      # nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SWAP;       # nat : nat : nat : @parameter%AddLiquidity : @storage
                                     }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # sp.verify(liquidity.value > 0) # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP;        # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   PUSH nat 0; # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   COMPARE;    # int : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   LT;         # bool : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: liquidity.value > 0"; # string : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # sp.verify(token1Amount.value <= params.token1_max) # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 4;      # @parameter%AddLiquidity : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   GET 3;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 4;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   COMPARE;    # int : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   LE;         # bool : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token1Amount.value <= params.token1_max"; # string : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # sp.verify(token2Amount.value <= params.token2_max) # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 4;      # @parameter%AddLiquidity : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   GET 4;      # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 3;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   COMPARE;    # int : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   LE;         # bool : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token2Amount.value <= params.token2_max"; # string : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # sp.verify(token1Amount.value > 0, 'Zero_Transfer') # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   PUSH nat 0; # nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 4;      # nat : nat : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   COMPARE;    # int : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   GT;         # bool : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # if self.data.token1Check: # nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 5;      # @storage : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   GET 7;      # bool : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token1Id, amount = token1Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # nat : nat : nat : @parameter%AddLiquidity : @storage
                                       NIL operation; # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 6;      # @storage : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 5;      # address : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 8;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 11;     # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 8;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = token1Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # nat : nat : nat : @parameter%AddLiquidity : @storage
                                       NIL operation; # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 6;      # @storage : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 5;      # address : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 6;      # nat : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SELF_ADDRESS; # @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SENDER;     # @sender : @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                     }; # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # sp.verify(token2Amount.value > 0, 'Zero_Transfer') # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   PUSH nat 0; # nat : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 4;      # nat : nat : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   COMPARE;    # int : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   GT;         # bool : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # if self.data.token2Check: # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DUP 6;      # @storage : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   GET 4;      # bool : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token2Id, amount = token2Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 6;      # @storage : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 3;      # address : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 7;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 11;     # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = token2Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 6;      # @storage : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       GET 3;      # address : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       DUP 5;      # nat : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SELF_ADDRESS; # @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       SENDER;     # @sender : @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                       CONS;       # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                     }; # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   # self.data.token1_pool += token1Amount.value # list operation : nat : nat : nat : @parameter%AddLiquidity : @storage
                                   DIG 5;      # @storage : list operation : nat : nat : nat : @parameter%AddLiquidity
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : list operation : nat : nat : nat : @parameter%AddLiquidity
                                   SWAP;       # pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : nat : @parameter%AddLiquidity
                                   UNPAIR;     # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : nat : @parameter%AddLiquidity
                                   UNPAIR;     # pair (nat %token1_Fee) (nat %token1_pool) : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : nat : @parameter%AddLiquidity
                                   UNPAIR;     # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : nat : @parameter%AddLiquidity
                                   SWAP;       # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : nat : @parameter%AddLiquidity
                                   DIG 8;      # nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%AddLiquidity
                                   ADD;        # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%AddLiquidity
                                   SWAP;       # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%AddLiquidity
                                   PAIR;       # pair nat nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%AddLiquidity
                                   PAIR;       # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%AddLiquidity
                                   PAIR;       # pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%AddLiquidity
                                   SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : list operation : nat : nat : @parameter%AddLiquidity
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%AddLiquidity
                                   # self.data.token2_pool += token2Amount.value # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%AddLiquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%AddLiquidity
                                   GET 7;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%AddLiquidity
                                   DIG 4;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   ADD;        # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   UPDATE 7;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   # self.data.totalSupply += liquidity.value # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   GET 9;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   DUP 4;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   ADD;        # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   UPDATE 9;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   # sp.transfer(sp.record(address = params.recipient, value = liquidity.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.lpTokenAddress, entry_point='mint').open_some()) # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity
                                   DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   GET 3;      # address : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   IF_NONE
                                     {
                                       PUSH int 335; # int : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DIG 3;      # nat : mutez : @some : list operation : @parameter%AddLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DIG 4;      # @parameter%AddLiquidity : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   PAIR;       # pair address nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }
                                 {
                                   DIG 2;      # lambda nat nat : @parameter%ChangeAdmin : @storage
                                   DROP;       # @parameter%ChangeAdmin : @storage
                                   SWAP;       # @storage : @parameter%ChangeAdmin
                                   # == ChangeAdmin ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage : @parameter%ChangeAdmin
                                   DUP;        # @storage : @storage : @parameter%ChangeAdmin
                                   DUG 2;      # @storage : @parameter%ChangeAdmin : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%ChangeAdmin : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : @parameter%ChangeAdmin : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @parameter%ChangeAdmin : @storage
                                   CAR;        # address : @parameter%ChangeAdmin : @storage
                                   SENDER;     # @sender : address : @parameter%ChangeAdmin : @storage
                                   COMPARE;    # int : @parameter%ChangeAdmin : @storage
                                   EQ;         # bool : @parameter%ChangeAdmin : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @parameter%ChangeAdmin : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ChangeAdmin : @storage
                                   SWAP;       # @storage : @parameter%ChangeAdmin
                                   # self.data.admin = params # @storage : @parameter%ChangeAdmin
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   UNPAIR;     # pair (address %admin) (nat %lpFee) : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   CDR;        # nat : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   DIG 4;      # @parameter%ChangeAdmin : nat : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair @parameter%ChangeAdmin nat : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair @parameter%ChangeAdmin nat) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair @parameter%ChangeAdmin nat) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair @parameter%ChangeAdmin nat) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   NIL operation; # list operation : pair (pair (pair (pair @parameter%ChangeAdmin nat) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }; # list operation : pair (pair (pair (pair address nat) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                             }
                             {
                               DIG 2;      # lambda nat nat : @parameter.left.right : @storage
                               DROP;       # @parameter.left.right : @storage
                               IF_LEFT
                                 {
                                   DROP;       # @storage
                                   # == ChangeState ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage
                                   DUP;        # @storage : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @storage
                                   CAR;        # address : @storage
                                   SENDER;     # @sender : address : @storage
                                   COMPARE;    # int : @storage
                                   EQ;         # bool : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @storage
                                       FAILWITH;   # FAILED
                                     }; # @storage
                                   # self.data.paused = ~ self.data.paused # @storage
                                   DUP;        # @storage : @storage
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @storage
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @storage
                                   SWAP;       # pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @storage
                                   UNPAIR;     # pair (bool %paused) (bool %state) : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @storage
                                   CDR;        # bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @storage
                                   DIG 4;      # @storage : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   GET 3;      # pair (bool %paused) (bool %state) : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   CAR;        # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   NOT;        # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair bool bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   SWAP;       # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }
                                 {
                                   SWAP;       # @storage : @parameter%ChangeSystem
                                   # == ChangeSystem ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage : @parameter%ChangeSystem
                                   DUP;        # @storage : @storage : @parameter%ChangeSystem
                                   DUG 2;      # @storage : @parameter%ChangeSystem : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%ChangeSystem : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : @parameter%ChangeSystem : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @parameter%ChangeSystem : @storage
                                   CAR;        # address : @parameter%ChangeSystem : @storage
                                   SENDER;     # @sender : address : @parameter%ChangeSystem : @storage
                                   COMPARE;    # int : @parameter%ChangeSystem : @storage
                                   EQ;         # bool : @parameter%ChangeSystem : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @parameter%ChangeSystem : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ChangeSystem : @storage
                                   # self.data.voterContract = sp.some(params) # @parameter%ChangeSystem : @storage
                                   SOME;       # option address : @storage
                                   UPDATE 10;  # @storage
                                   # self.data.state = True # @storage
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   SWAP;       # pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   UNPAIR;     # pair (bool %paused) (bool %state) : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   CAR;        # bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PUSH bool True; # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   SWAP;       # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair bool bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   SWAP;       # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }; # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                               NIL operation; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                             }; # list operation : pair (pair (pair (pair address nat) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                         }
                         {
                           IF_LEFT
                             {
                               DIG 2;      # lambda nat nat : @parameter.right.left : @storage
                               DROP;       # @parameter.right.left : @storage
                               IF_LEFT
                                 {
                                   SWAP;       # @storage : @parameter%ModifyFee
                                   # == ModifyFee ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage : @parameter%ModifyFee
                                   DUP;        # @storage : @storage : @parameter%ModifyFee
                                   DUG 2;      # @storage : @parameter%ModifyFee : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%ModifyFee : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : @parameter%ModifyFee : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @parameter%ModifyFee : @storage
                                   CAR;        # address : @parameter%ModifyFee : @storage
                                   SENDER;     # @sender : address : @parameter%ModifyFee : @storage
                                   COMPARE;    # int : @parameter%ModifyFee : @storage
                                   EQ;         # bool : @parameter%ModifyFee : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @parameter%ModifyFee : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ModifyFee : @storage
                                   # sp.verify(params > 50) # @parameter%ModifyFee : @storage
                                   DUP;        # @parameter%ModifyFee : @parameter%ModifyFee : @storage
                                   PUSH nat 50; # nat : @parameter%ModifyFee : @parameter%ModifyFee : @storage
                                   COMPARE;    # int : @parameter%ModifyFee : @storage
                                   LT;         # bool : @parameter%ModifyFee : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: params > 50"; # string : @parameter%ModifyFee : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ModifyFee : @storage
                                   SWAP;       # @storage : @parameter%ModifyFee
                                   # self.data.lpFee = params # @storage : @parameter%ModifyFee
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyFee
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyFee
                                   UNPAIR;     # pair (address %admin) (nat %lpFee) : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyFee
                                   CAR;        # address : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyFee
                                   DIG 4;      # @parameter%ModifyFee : address : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   SWAP;       # address : @parameter%ModifyFee : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair address @parameter%ModifyFee : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair address @parameter%ModifyFee) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair address @parameter%ModifyFee) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair address @parameter%ModifyFee) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }
                                 {
                                   SWAP;       # @storage : @parameter%ModifyMaxSwapAmount
                                   # == ModifyMaxSwapAmount ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage : @parameter%ModifyMaxSwapAmount
                                   DUP;        # @storage : @storage : @parameter%ModifyMaxSwapAmount
                                   DUG 2;      # @storage : @parameter%ModifyMaxSwapAmount : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%ModifyMaxSwapAmount : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : @parameter%ModifyMaxSwapAmount : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @parameter%ModifyMaxSwapAmount : @storage
                                   CAR;        # address : @parameter%ModifyMaxSwapAmount : @storage
                                   SENDER;     # @sender : address : @parameter%ModifyMaxSwapAmount : @storage
                                   COMPARE;    # int : @parameter%ModifyMaxSwapAmount : @storage
                                   EQ;         # bool : @parameter%ModifyMaxSwapAmount : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @parameter%ModifyMaxSwapAmount : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ModifyMaxSwapAmount : @storage
                                   SWAP;       # @storage : @parameter%ModifyMaxSwapAmount
                                   # self.data.maxSwapLimit = params # @storage : @parameter%ModifyMaxSwapAmount
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyMaxSwapAmount
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyMaxSwapAmount
                                   UNPAIR;     # pair (address %admin) (nat %lpFee) : pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyMaxSwapAmount
                                   SWAP;       # pair (address %lpTokenAddress) (nat %maxSwapLimit) : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyMaxSwapAmount
                                   CAR;        # address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @parameter%ModifyMaxSwapAmount
                                   DIG 4;      # @parameter%ModifyMaxSwapAmount : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   SWAP;       # address : @parameter%ModifyMaxSwapAmount : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair address @parameter%ModifyMaxSwapAmount : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   SWAP;       # pair (address %admin) (nat %lpFee) : pair address @parameter%ModifyMaxSwapAmount : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (address %admin) (nat %lpFee)) (pair address @parameter%ModifyMaxSwapAmount) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair address @parameter%ModifyMaxSwapAmount)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @parameter%ModifyMaxSwapAmount)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }; # pair (pair (pair (pair address nat) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                               NIL operation; # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                             }
                             {
                               IF_LEFT
                                 {
                                   DIG 2;      # lambda nat nat : @parameter%RemoveLiquidity : @storage
                                   DROP;       # @parameter%RemoveLiquidity : @storage
                                   # == RemoveLiquidity ==
                                   # sp.verify(self.data.totalSupply != 0, 'Plenty_Network_Not_Initialized') # @parameter%RemoveLiquidity : @storage
                                   PUSH nat 0; # nat : @parameter%RemoveLiquidity : @storage
                                   DUP 3;      # @storage : nat : @parameter%RemoveLiquidity : @storage
                                   GET 9;      # nat : nat : @parameter%RemoveLiquidity : @storage
                                   COMPARE;    # int : @parameter%RemoveLiquidity : @storage
                                   NEQ;        # bool : @parameter%RemoveLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Initialized"; # string : @parameter%RemoveLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%RemoveLiquidity : @storage
                                   SWAP;       # @storage : @parameter%RemoveLiquidity
                                   # sp.verify(params.lpAmount <= self.data.totalSupply, 'Plenty_Network_Insufficient_Balance') # @storage : @parameter%RemoveLiquidity
                                   DUP;        # @storage : @storage : @parameter%RemoveLiquidity
                                   DUG 2;      # @storage : @parameter%RemoveLiquidity : @storage
                                   GET 9;      # nat : @parameter%RemoveLiquidity : @storage
                                   SWAP;       # @parameter%RemoveLiquidity : nat : @storage
                                   DUP;        # @parameter%RemoveLiquidity : @parameter%RemoveLiquidity : nat : @storage
                                   DUG 2;      # @parameter%RemoveLiquidity : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # nat : nat : @parameter%RemoveLiquidity : @storage
                                   COMPARE;    # int : @parameter%RemoveLiquidity : @storage
                                   LE;         # bool : @parameter%RemoveLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Insufficient_Balance"; # string : @parameter%RemoveLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%RemoveLiquidity : @storage
                                   SWAP;       # @storage : @parameter%RemoveLiquidity
                                   # token1Amount = sp.local("token1Amount", 0)
                                   # token2Amount = sp.local("token2Amount", 0)
                                   # token1Amount.value = (params.lpAmount * self.data.token1_pool) // self.data.totalSupply # @storage : @parameter%RemoveLiquidity
                                   DUP;        # @storage : @storage : @parameter%RemoveLiquidity
                                   GET 9;      # nat : @storage : @parameter%RemoveLiquidity
                                   SWAP;       # @storage : nat : @parameter%RemoveLiquidity
                                   DUP;        # @storage : @storage : nat : @parameter%RemoveLiquidity
                                   DUG 3;      # @storage : nat : @parameter%RemoveLiquidity : @storage
                                   GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : @parameter%RemoveLiquidity : @storage
                                   CDR;        # nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP 3;      # @parameter%RemoveLiquidity : nat : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   MUL;        # nat : nat : @parameter%RemoveLiquidity : @storage
                                   EDIV;       # option (pair nat nat) : @parameter%RemoveLiquidity : @storage
                                   IF_NONE
                                     {
                                       PUSH int 366; # int : @parameter%RemoveLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }
                                     {
                                       CAR;        # nat : @parameter%RemoveLiquidity : @storage
                                     }; # nat : @parameter%RemoveLiquidity : @storage
                                   # token2Amount.value = (params.lpAmount * self.data.token2_pool) // self.data.totalSupply # nat : @parameter%RemoveLiquidity : @storage
                                   DIG 2;      # @storage : nat : @parameter%RemoveLiquidity
                                   DUP;        # @storage : @storage : nat : @parameter%RemoveLiquidity
                                   GET 9;      # nat : @storage : nat : @parameter%RemoveLiquidity
                                   SWAP;       # @storage : nat : nat : @parameter%RemoveLiquidity
                                   DUP;        # @storage : @storage : nat : nat : @parameter%RemoveLiquidity
                                   DUG 4;      # @storage : nat : nat : @parameter%RemoveLiquidity : @storage
                                   GET 7;      # nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP 4;      # @parameter%RemoveLiquidity : nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # nat : nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   MUL;        # nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   EDIV;       # option (pair nat nat) : nat : @parameter%RemoveLiquidity : @storage
                                   IF_NONE
                                     {
                                       PUSH int 368; # int : nat : @parameter%RemoveLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }
                                     {
                                       CAR;        # nat : nat : @parameter%RemoveLiquidity : @storage
                                     }; # nat : nat : @parameter%RemoveLiquidity : @storage
                                   # sp.verify(token1Amount.value >= params.token1_min) # nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP 3;      # @parameter%RemoveLiquidity : nat : nat : @parameter%RemoveLiquidity : @storage
                                   GET 3;      # nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP 3;      # nat : nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   COMPARE;    # int : nat : nat : @parameter%RemoveLiquidity : @storage
                                   GE;         # bool : nat : nat : @parameter%RemoveLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token1Amount.value >= params.token1_min"; # string : nat : nat : @parameter%RemoveLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : @parameter%RemoveLiquidity : @storage
                                   # sp.verify(token2Amount.value >= params.token2_min) # nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP 3;      # @parameter%RemoveLiquidity : nat : nat : @parameter%RemoveLiquidity : @storage
                                   GET 4;      # nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   SWAP;       # nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP;        # nat : nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUG 2;      # nat : nat : nat : nat : @parameter%RemoveLiquidity : @storage
                                   COMPARE;    # int : nat : nat : @parameter%RemoveLiquidity : @storage
                                   GE;         # bool : nat : nat : @parameter%RemoveLiquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token2Amount.value >= params.token2_min"; # string : nat : nat : @parameter%RemoveLiquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : @parameter%RemoveLiquidity : @storage
                                   # self.data.token1_pool = sp.as_nat(self.data.token1_pool - token1Amount.value) # nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP 4;      # @storage : nat : nat : @parameter%RemoveLiquidity : @storage
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : nat : nat : @parameter%RemoveLiquidity : @storage
                                   SWAP;       # pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity : @storage
                                   UNPAIR;     # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity : @storage
                                   UNPAIR;     # pair (nat %token1_Fee) (nat %token1_pool) : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity : @storage
                                   CAR;        # nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity : @storage
                                   DUP 6;      # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity : @storage
                                   DIG 8;      # @storage : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   CDR;        # nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   SUB;        # int : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   ISNAT;      # option nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   IF_NONE
                                     {
                                       PUSH int 378; # int : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   SWAP;       # nat : @some : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   PAIR;       # pair nat @some : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   PAIR;       # pair (pair nat @some) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   PAIR;       # pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%RemoveLiquidity
                                   SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : nat : nat : @parameter%RemoveLiquidity
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   # self.data.token2_pool = sp.as_nat(self.data.token2_pool - token2Amount.value) # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   SWAP;       # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP;        # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUG 2;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DIG 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   GET 7;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   SUB;        # int : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   ISNAT;      # option nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   IF_NONE
                                     {
                                       PUSH int 380; # int : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   UPDATE 7;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.lpAmount) # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP 4;      # @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DIG 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   GET 9;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   SUB;        # int : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   ISNAT;      # option nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   IF_NONE
                                     {
                                       PUSH int 382; # int : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   UPDATE 9;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : nat : @parameter%RemoveLiquidity
                                   DUG 3;      # nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   # sp.transfer(sp.record(address = sp.sender, value = params.lpAmount), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.lpTokenAddress, entry_point='burn').open_some()) # nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   NIL operation; # list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   GET 3;      # address : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CONTRACT %burn (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   IF_NONE
                                     {
                                       PUSH int 391; # int : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP 6;      # @parameter%RemoveLiquidity : mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # nat : mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   SENDER;     # @sender : nat : mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   PAIR;       # pair @sender nat : mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   TRANSFER_TOKENS; # operation : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CONS;       # list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   # sp.verify(token1Amount.value > 0, 'Zero_Transfer') # list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   PUSH nat 0; # nat : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP 4;      # nat : nat : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   COMPARE;    # int : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   GT;         # bool : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   # if self.data.token1Check: # list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   GET 7;      # bool : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token1Id, amount = token1Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DIG 6;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 9;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 8;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 9;      # @parameter%RemoveLiquidity : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = token1Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DIG 4;      # nat : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 6;      # @parameter%RemoveLiquidity : nat : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CDR;        # address : nat : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                     }; # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   # sp.verify(token2Amount.value > 0, 'Zero_Transfer') # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   PUSH nat 0; # nat : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP 3;      # nat : nat : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   COMPARE;    # int : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   GT;         # bool : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   # if self.data.token2Check: # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   GET 3;      # pair (pair nat @some) (pair (address %token2Address) (bool %token2Check)) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   GET 4;      # bool : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token2Id, amount = token2Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat @some) (pair (address %token2Address) (bool %token2Check)) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 3;      # address : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DIG 5;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 8;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DIG 7;      # @parameter%RemoveLiquidity : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = token2Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat @some) (pair (address %token2Address) (bool %token2Check)) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       GET 3;      # address : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DIG 3;      # nat : mutez : @some : list operation : @parameter%RemoveLiquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       DIG 4;      # @parameter%RemoveLiquidity : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CDR;        # address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                       CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                     }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat @some) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }
                                 {
                                   IF_LEFT
                                     {
                                       SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                       # == Swap ==
                                       # sp.verify(~ self.data.paused, 'Plenty_Network_Paused_State') # @storage : @parameter%Swap : lambda nat nat
                                       DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                       DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (bool %paused) (bool %state) : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # bool : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           PUSH string "Plenty_Network_Paused_State"; # string : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                       # sp.verify(((params.requiredTokenAddress == self.data.token1Address) & (params.requiredTokenId == self.data.token1Id)) | ((params.requiredTokenAddress == self.data.token2Address) & (params.requiredTokenId == self.data.token2Id)), 'Plenty_Network_Invalid_Pair') # @storage : @parameter%Swap : lambda nat nat
                                       DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                       DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%Swap : @storage : lambda nat nat
                                       GET 5;      # address : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # @parameter%Swap : address : @storage : lambda nat nat
                                       DUP;        # @parameter%Swap : @parameter%Swap : address : @storage : lambda nat nat
                                       DUG 2;      # @parameter%Swap : address : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # address : address : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                       EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                           DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                           DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%Swap : @storage : lambda nat nat
                                           GET 8;      # nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # @parameter%Swap : nat : @storage : lambda nat nat
                                           DUP;        # @parameter%Swap : @parameter%Swap : nat : @storage : lambda nat nat
                                           DUG 2;      # @parameter%Swap : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 5;      # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                           EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                         }
                                         {
                                           PUSH bool False; # bool : @parameter%Swap : @storage : lambda nat nat
                                         }; # bool : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           PUSH bool True; # bool : @parameter%Swap : @storage : lambda nat nat
                                         }
                                         {
                                           SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                           DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                           DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # address : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # @parameter%Swap : address : @storage : lambda nat nat
                                           DUP;        # @parameter%Swap : @parameter%Swap : address : @storage : lambda nat nat
                                           DUG 2;      # @parameter%Swap : address : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # address : address : @parameter%Swap : @storage : lambda nat nat
                                           COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                           EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                           IF
                                             {
                                               SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                               DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                               DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                               GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : @parameter%Swap : @storage : lambda nat nat
                                               CAR;        # nat : @parameter%Swap : @storage : lambda nat nat
                                               SWAP;       # @parameter%Swap : nat : @storage : lambda nat nat
                                               DUP;        # @parameter%Swap : @parameter%Swap : nat : @storage : lambda nat nat
                                               DUG 2;      # @parameter%Swap : nat : @parameter%Swap : @storage : lambda nat nat
                                               GET 5;      # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                               COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                               EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                             }
                                             {
                                               PUSH bool False; # bool : @parameter%Swap : @storage : lambda nat nat
                                             }; # bool : @parameter%Swap : @storage : lambda nat nat
                                         }; # bool : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Invalid_Pair"; # string : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }; # @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                       # requiredTokenAmount = sp.local("requiredTokenAmount", 0)
                                       # SwapTokenPool = sp.local("SwapTokenPool", 0)
                                       # lpfee = sp.local("lpfee", 0)
                                       # tokenTransfer = sp.local("tokenTransfer", 0)
                                       # if (params.requiredTokenAddress == self.data.token1Address) & (params.requiredTokenId == self.data.token1Id): # @storage : @parameter%Swap : lambda nat nat
                                       DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                       DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%Swap : @storage : lambda nat nat
                                       GET 5;      # address : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # @parameter%Swap : address : @storage : lambda nat nat
                                       DUP;        # @parameter%Swap : @parameter%Swap : address : @storage : lambda nat nat
                                       DUG 2;      # @parameter%Swap : address : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # address : address : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                       EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                           DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                           DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%Swap : @storage : lambda nat nat
                                           GET 8;      # nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # @parameter%Swap : nat : @storage : lambda nat nat
                                           DUP;        # @parameter%Swap : @parameter%Swap : nat : @storage : lambda nat nat
                                           DUG 2;      # @parameter%Swap : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 5;      # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                           EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                         }
                                         {
                                           PUSH bool False; # bool : @parameter%Swap : @storage : lambda nat nat
                                         }; # bool : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                           # requiredTokenAmount.value = self.data.token2_pool # @storage : @parameter%Swap : lambda nat nat
                                           DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                           DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                           GET 7;      # nat : @parameter%Swap : @storage : lambda nat nat
                                           # SwapTokenPool.value = self.data.token1_pool # nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # @storage : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : @parameter%Swap : @storage : lambda nat nat
                                           CDR;        # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                         }
                                         {
                                           SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                           # requiredTokenAmount.value = self.data.token1_pool # @storage : @parameter%Swap : lambda nat nat
                                           DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                           DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : @parameter%Swap : @storage : lambda nat nat
                                           CDR;        # nat : @parameter%Swap : @storage : lambda nat nat
                                           # SwapTokenPool.value = self.data.token2_pool # nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # @storage : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 7;      # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                         }; # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # sp.verify((params.tokenAmountIn * 100) <= (requiredTokenAmount.value * self.data.maxSwapLimit), 'Plenty_Network_Swap_Limit_Exceed') # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 4;      # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH nat 100; # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # @parameter%Swap : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       LE;         # bool : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Swap_Limit_Exceed"; # string : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # lpfee.value = params.tokenAmountIn // self.data.lpFee # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit)) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (address %admin) (nat %lpFee) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CDR;        # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # @parameter%Swap : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       EDIV;       # option (pair nat nat) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 199; # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                         }; # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # Invariant = sp.local("Invariant", self.data.token1_pool * self.data.token2_pool) # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DIG 4;      # @storage : nat : nat : nat : @parameter%Swap : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%Swap : lambda nat nat
                                       GET 7;      # nat : @storage : nat : nat : nat : @parameter%Swap : lambda nat nat
                                       SWAP;       # @storage : nat : nat : nat : nat : @parameter%Swap : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : nat : @parameter%Swap : lambda nat nat
                                       DUG 6;      # @storage : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CDR;        # nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # Invariant.value //= sp.as_nat((requiredTokenAmount.value + params.tokenAmountIn) - lpfee.value) # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # @parameter%Swap : nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DIG 5;      # nat : nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ISNAT;      # option nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 203; # int : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : @some : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       EDIV;       # option (pair nat nat) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 203; # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                         }; # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # tokenTransfer.value = sp.as_nat(SwapTokenPool.value - Invariant.value) # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DIG 3;      # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ISNAT;      # option nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 205; # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       # sp.verify(tokenTransfer.value >= params.MinimumTokenOut, 'Plenty_Network_Higher_Slippage') # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # @parameter%Swap : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # nat : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # @some : nat : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       GE;         # bool : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Higher_Slippage"; # string : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }; # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       # sp.verify(lpfee.value > 0, 'Plenty_Network_Zero_System_Fee') # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH nat 0; # nat : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       GT;         # bool : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Zero_System_Fee"; # string : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }; # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       # if (params.requiredTokenAddress == self.data.token1Address) & (params.requiredTokenId == self.data.token1Id): # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # @storage : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 5;      # address : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # @parameter%Swap : address : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # address : address : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       EQ;         # bool : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           DUP 5;      # @storage : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 8;      # nat : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # @parameter%Swap : nat : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 5;      # nat : nat : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           COMPARE;    # int : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           EQ;         # bool : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                         }
                                         {
                                           PUSH bool False; # bool : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                         }; # bool : nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           # self.data.token1_pool = Invariant.value # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           DIG 4;      # @storage : nat : @some : nat : @parameter%Swap : lambda nat nat
                                           UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : nat : @some : nat : @parameter%Swap : lambda nat nat
                                           SWAP;       # pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : @some : nat : @parameter%Swap : lambda nat nat
                                           UNPAIR;     # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : @some : nat : @parameter%Swap : lambda nat nat
                                           UNPAIR;     # pair (nat %token1_Fee) (nat %token1_pool) : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : @some : nat : @parameter%Swap : lambda nat nat
                                           CAR;        # nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : @some : nat : @parameter%Swap : lambda nat nat
                                           DIG 4;      # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap : lambda nat nat
                                           SWAP;       # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap : lambda nat nat
                                           PAIR;       # pair nat nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap : lambda nat nat
                                           PAIR;       # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap : lambda nat nat
                                           PAIR;       # pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap : lambda nat nat
                                           SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @some : nat : @parameter%Swap : lambda nat nat
                                           PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap : lambda nat nat
                                           # if self.data.state: # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap : lambda nat nat
                                           DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap : lambda nat nat
                                           DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : lambda nat nat
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : lambda nat nat
                                           GET 3;      # pair (bool %paused) (bool %state) : @some : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : lambda nat nat
                                           CDR;        # bool : @some : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : lambda nat nat
                                           IF
                                             {
                                               DIG 4;      # lambda nat nat : @some : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DROP;       # @some : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               # self.data.token2_pool += sp.as_nat(params.tokenAmountIn - lpfee.value) # @some : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 3;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               GET 7;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               DUP 4;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               DUP 6;      # @parameter%Swap : nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               GET 6;      # nat : nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               SUB;        # int : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               ISNAT;      # option nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               IF_NONE
                                                 {
                                                   PUSH int 217; # int : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               ADD;        # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               UPDATE 7;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               # self.data.token2_Fee += lpfee.value # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : nat : @parameter%Swap
                                               UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @some : nat : @parameter%Swap
                                               SWAP;       # pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               UNPAIR;     # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               SWAP;       # pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               UNPAIR;     # pair (nat %token2Id) (nat %token2_Fee) : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               UNPAIR;     # nat : nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               SWAP;       # nat : nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               DIG 6;      # nat : nat : nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               ADD;        # nat : nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               SWAP;       # nat : nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair nat nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               SWAP;       # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               DUG 2;      # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }
                                             {
                                               SWAP;       # nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : lambda nat nat
                                               DROP;       # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : lambda nat nat
                                               DIG 3;      # lambda nat nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DROP;       # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               # self.data.token2_pool += params.tokenAmountIn # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 2;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               GET 7;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               DUP 4;      # @parameter%Swap : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               GET 6;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               ADD;        # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               UPDATE 7;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               DUG 2;      # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }; # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # sp.verify(params.tokenAmountIn > 0, 'Zero_Transfer') # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           PUSH nat 0; # nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 3;      # @parameter%Swap : nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 6;      # nat : nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           COMPARE;    # int : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GT;         # bool : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {}
                                             {
                                               PUSH string "Zero_Transfer"; # string : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }; # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # if self.data.token2Check: # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 3;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 4;      # bool : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {
                                               # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token2Id, amount = params.tokenAmountIn)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL operation; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 33; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 7;      # @parameter%Swap : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 6;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 9;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 5;      # pair nat nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }
                                             {
                                               # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params.tokenAmountIn), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL operation; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 57; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 5;      # @parameter%Swap : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 6;      # nat : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : nat : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SENDER;     # @sender : @self : nat : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # sp.verify(tokenTransfer.value > 0, 'Zero_Transfer') # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           PUSH nat 0; # nat : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 3;      # @some : nat : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           COMPARE;    # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GT;         # bool : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {}
                                             {
                                               PUSH string "Zero_Transfer"; # string : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # if self.data.token1Check: # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 7;      # bool : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {
                                               # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token1Id, amount = tokenTransfer.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 5;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 33; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 5;      # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 8;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 8;      # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 7;      # @parameter%Swap : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CDR;        # address : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair address (pair nat @some) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }
                                             {
                                               # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = tokenTransfer.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 5;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 57; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 3;      # @some : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 4;      # @parameter%Swap : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CDR;        # address : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : address : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair @self (pair address @some) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                         }
                                         {
                                           # self.data.token2_pool = Invariant.value # nat : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           DIG 4;      # @storage : nat : @some : nat : @parameter%Swap : lambda nat nat
                                           SWAP;       # nat : @storage : @some : nat : @parameter%Swap : lambda nat nat
                                           UPDATE 7;   # @storage : @some : nat : @parameter%Swap : lambda nat nat
                                           # if self.data.state: # @storage : @some : nat : @parameter%Swap : lambda nat nat
                                           DUP;        # @storage : @storage : @some : nat : @parameter%Swap : lambda nat nat
                                           DUG 4;      # @storage : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (bool %paused) (bool %state) : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           CDR;        # bool : @some : nat : @parameter%Swap : @storage : lambda nat nat
                                           IF
                                             {
                                               DIG 4;      # lambda nat nat : @some : nat : @parameter%Swap : @storage
                                               DROP;       # @some : nat : @parameter%Swap : @storage
                                               # self.data.token1_pool += sp.as_nat(params.tokenAmountIn - lpfee.value) # @some : nat : @parameter%Swap : @storage
                                               DIG 3;      # @storage : @some : nat : @parameter%Swap
                                               UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @some : nat : @parameter%Swap
                                               SWAP;       # pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               UNPAIR;     # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               UNPAIR;     # pair (nat %token1_Fee) (nat %token1_pool) : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               UNPAIR;     # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               SWAP;       # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               DUP 7;      # nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               DUP 9;      # @parameter%Swap : nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               GET 6;      # nat : nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               SUB;        # int : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               ISNAT;      # option nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               IF_NONE
                                                 {
                                                   PUSH int 236; # int : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               ADD;        # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               SWAP;       # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               # self.data.token1_Fee += lpfee.value # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : nat : @parameter%Swap
                                               DIG 6;      # nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               ADD;        # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair nat nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               DUG 2;      # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }
                                             {
                                               SWAP;       # nat : @some : @parameter%Swap : @storage : lambda nat nat
                                               DROP;       # @some : @parameter%Swap : @storage : lambda nat nat
                                               DIG 3;      # lambda nat nat : @some : @parameter%Swap : @storage
                                               DROP;       # @some : @parameter%Swap : @storage
                                               # self.data.token1_pool += params.tokenAmountIn # @some : @parameter%Swap : @storage
                                               DIG 2;      # @storage : @some : @parameter%Swap
                                               UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @some : @parameter%Swap
                                               SWAP;       # pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               UNPAIR;     # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               UNPAIR;     # pair (nat %token1_Fee) (nat %token1_pool) : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               UNPAIR;     # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               SWAP;       # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               DUP 7;      # @parameter%Swap : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               GET 6;      # nat : nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               ADD;        # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               SWAP;       # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair nat nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap
                                               SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : @some : @parameter%Swap
                                               PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap
                                               DUG 2;      # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }; # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # sp.verify(params.tokenAmountIn > 0, 'Zero_Transfer') # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           PUSH nat 0; # nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 3;      # @parameter%Swap : nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 6;      # nat : nat : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           COMPARE;    # int : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GT;         # bool : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {}
                                             {
                                               PUSH string "Zero_Transfer"; # string : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }; # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # if self.data.token1Check: # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 3;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 7;      # bool : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {
                                               # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token1Id, amount = params.tokenAmountIn)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL operation; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 5;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 33; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 7;      # @parameter%Swap : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 6;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 9;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 8;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }
                                             {
                                               # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params.tokenAmountIn), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL operation; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 5;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 57; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 5;      # @parameter%Swap : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 6;      # nat : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : nat : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SENDER;     # @sender : @self : nat : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # sp.verify(tokenTransfer.value > 0, 'Zero_Transfer') # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           PUSH nat 0; # nat : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 3;      # @some : nat : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           COMPARE;    # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GT;         # bool : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {}
                                             {
                                               PUSH string "Zero_Transfer"; # string : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }; # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           # if self.data.token2Check: # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           GET 4;      # bool : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                           IF
                                             {
                                               # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token2Id, amount = tokenTransfer.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 33; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 5;      # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 8;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 7;      # @parameter%Swap : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CDR;        # address : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair address (pair nat @some) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }
                                             {
                                               # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = tokenTransfer.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               GET 3;      # address : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               IF_NONE
                                                 {
                                                   PUSH int 57; # int : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 3;      # @some : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               DIG 4;      # @parameter%Swap : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CDR;        # address : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               SELF_ADDRESS; # @self : address : @some : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               PAIR 3;     # pair @self (pair address @some) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                               CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                             }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                         }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                     }
                                     {
                                       DIG 2;      # lambda nat nat : @parameter%forwardFee : @storage
                                       DROP;       # @parameter%forwardFee : @storage
                                       SWAP;       # @storage : @parameter%forwardFee
                                       # == forwardFee ==
                                       # sp.verify(self.data.state, 'Plenty_Network_Invalid_State') # @storage : @parameter%forwardFee
                                       DUP;        # @storage : @storage : @parameter%forwardFee
                                       DUG 2;      # @storage : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%forwardFee : @storage
                                       GET 3;      # pair (bool %paused) (bool %state) : @parameter%forwardFee : @storage
                                       CDR;        # bool : @parameter%forwardFee : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Invalid_State"; # string : @parameter%forwardFee : @storage
                                           FAILWITH;   # FAILED
                                         }; # @parameter%forwardFee : @storage
                                       SWAP;       # @storage : @parameter%forwardFee
                                       # sp.verify(sp.sender == self.data.voterContract.open_some(), 'Plenty_Network_Not_Voter') # @storage : @parameter%forwardFee
                                       DUP;        # @storage : @storage : @parameter%forwardFee
                                       DUG 2;      # @storage : @parameter%forwardFee : @storage
                                       GET 10;     # option address : @parameter%forwardFee : @storage
                                       IF_NONE
                                         {
                                           PUSH int 497; # int : @parameter%forwardFee : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : @parameter%forwardFee : @storage
                                       SENDER;     # @sender : @some : @parameter%forwardFee : @storage
                                       COMPARE;    # int : @parameter%forwardFee : @storage
                                       EQ;         # bool : @parameter%forwardFee : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Not_Voter"; # string : @parameter%forwardFee : @storage
                                           FAILWITH;   # FAILED
                                         }; # @parameter%forwardFee : @storage
                                       # if self.data.token1_Fee != 0: # @parameter%forwardFee : @storage
                                       PUSH nat 0; # nat : @parameter%forwardFee : @storage
                                       DUP 3;      # @storage : nat : @parameter%forwardFee : @storage
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : @parameter%forwardFee : @storage
                                       CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : @parameter%forwardFee : @storage
                                       CAR;        # nat : nat : @parameter%forwardFee : @storage
                                       COMPARE;    # int : @parameter%forwardFee : @storage
                                       NEQ;        # bool : @parameter%forwardFee : @storage
                                       IF
                                         {
                                           # sp.verify(self.data.token1_Fee > 0, 'Zero_Transfer') # @parameter%forwardFee : @storage
                                           PUSH nat 0; # nat : @parameter%forwardFee : @storage
                                           DUP 3;      # @storage : nat : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : @parameter%forwardFee : @storage
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat : @parameter%forwardFee : @storage
                                           CAR;        # nat : nat : @parameter%forwardFee : @storage
                                           COMPARE;    # int : @parameter%forwardFee : @storage
                                           GT;         # bool : @parameter%forwardFee : @storage
                                           IF
                                             {}
                                             {
                                               PUSH string "Zero_Transfer"; # string : @parameter%forwardFee : @storage
                                               FAILWITH;   # FAILED
                                             }; # @parameter%forwardFee : @storage
                                           SWAP;       # @storage : @parameter%forwardFee
                                           # if self.data.token1Check: # @storage : @parameter%forwardFee
                                           DUP;        # @storage : @storage : @parameter%forwardFee
                                           DUG 2;      # @storage : @parameter%forwardFee : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter%forwardFee : @storage
                                           GET 7;      # bool : @parameter%forwardFee : @storage
                                           IF
                                             {
                                               # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.feeDistributor, token_id = self.data.token1Id, amount = self.data.token1_Fee)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # @parameter%forwardFee : @storage
                                               NIL operation; # list operation : @parameter%forwardFee : @storage
                                               DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : @parameter%forwardFee : @storage
                                               GET 5;      # address : list operation : @parameter%forwardFee : @storage
                                               CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%forwardFee : @storage
                                               IF_NONE
                                                 {
                                                   PUSH int 33; # int : list operation : @parameter%forwardFee : @storage
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @parameter%forwardFee : @storage
                                               PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                               NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DIG 6;      # @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               DUP;        # @storage : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               CAR;        # nat : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               SWAP;       # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               DUP;        # @storage : @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               DUG 8;      # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               GET 8;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DUP 8;      # @parameter%forwardFee : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list operation : @parameter%forwardFee : @storage
                                             }
                                             {
                                               # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.feeDistributor, value = self.data.token1_Fee), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # @parameter%forwardFee : @storage
                                               NIL operation; # list operation : @parameter%forwardFee : @storage
                                               DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                               CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation : @parameter%forwardFee : @storage
                                               GET 5;      # address : list operation : @parameter%forwardFee : @storage
                                               CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%forwardFee : @storage
                                               IF_NONE
                                                 {
                                                   PUSH int 57; # int : list operation : @parameter%forwardFee : @storage
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @parameter%forwardFee : @storage
                                               PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DUP 5;      # @storage : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CAR;        # nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DUP 5;      # @parameter%forwardFee : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CDR;        # address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list operation : @parameter%forwardFee : @storage
                                             }; # list operation : @parameter%forwardFee : @storage
                                         }
                                         {
                                           NIL operation; # list operation : @parameter%forwardFee : @storage
                                         }; # list operation : @parameter%forwardFee : @storage
                                       # if self.data.token2_Fee != 0: # list operation : @parameter%forwardFee : @storage
                                       PUSH nat 0; # nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : nat : list operation : @parameter%forwardFee : @storage
                                       CDR;        # nat : nat : list operation : @parameter%forwardFee : @storage
                                       COMPARE;    # int : list operation : @parameter%forwardFee : @storage
                                       NEQ;        # bool : list operation : @parameter%forwardFee : @storage
                                       IF
                                         {
                                           # sp.verify(self.data.token2_Fee > 0, 'Zero_Transfer') # list operation : @parameter%forwardFee : @storage
                                           PUSH nat 0; # nat : list operation : @parameter%forwardFee : @storage
                                           DUP 4;      # @storage : nat : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : nat : list operation : @parameter%forwardFee : @storage
                                           CDR;        # nat : nat : list operation : @parameter%forwardFee : @storage
                                           COMPARE;    # int : list operation : @parameter%forwardFee : @storage
                                           GT;         # bool : list operation : @parameter%forwardFee : @storage
                                           IF
                                             {}
                                             {
                                               PUSH string "Zero_Transfer"; # string : list operation : @parameter%forwardFee : @storage
                                               FAILWITH;   # FAILED
                                             }; # list operation : @parameter%forwardFee : @storage
                                           # if self.data.token2Check: # list operation : @parameter%forwardFee : @storage
                                           DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : list operation : @parameter%forwardFee : @storage
                                           GET 4;      # bool : list operation : @parameter%forwardFee : @storage
                                           IF
                                             {
                                               # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.feeDistributor, token_id = self.data.token2Id, amount = self.data.token2_Fee)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : @parameter%forwardFee : @storage
                                               DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                               GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : list operation : @parameter%forwardFee : @storage
                                               GET 3;      # address : list operation : @parameter%forwardFee : @storage
                                               CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%forwardFee : @storage
                                               IF_NONE
                                                 {
                                                   PUSH int 33; # int : list operation : @parameter%forwardFee : @storage
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @parameter%forwardFee : @storage
                                               PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                               NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DIG 6;      # @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               DUP;        # @storage : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               CDR;        # nat : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               SWAP;       # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               DUP;        # @storage : @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                               DUG 8;      # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DUP 8;      # @parameter%forwardFee : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list operation : @parameter%forwardFee : @storage
                                             }
                                             {
                                               # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.feeDistributor, value = self.data.token2_Fee), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : @parameter%forwardFee : @storage
                                               DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                               GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : list operation : @parameter%forwardFee : @storage
                                               GET 3;      # address : list operation : @parameter%forwardFee : @storage
                                               CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%forwardFee : @storage
                                               IF_NONE
                                                 {
                                                   PUSH int 57; # int : list operation : @parameter%forwardFee : @storage
                                                   FAILWITH;   # FAILED
                                                 }
                                                 {}; # @some : list operation : @parameter%forwardFee : @storage
                                               PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DUP 5;      # @storage : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CDR;        # nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               DUP 5;      # @parameter%forwardFee : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               CDR;        # address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                               TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                               CONS;       # list operation : @parameter%forwardFee : @storage
                                             }; # list operation : @parameter%forwardFee : @storage
                                         }
                                         {}; # list operation : @parameter%forwardFee : @storage
                                       # fees_map = sp.local("fees_map", {}, sp.TMap(sp.TVariant(fa12 = sp.TAddress, fa2 = sp.TPair(sp.TAddress, sp.TNat), tez = sp.TUnit).layout(("fa12", ("fa2", "tez"))), sp.TNat)) # list operation : @parameter%forwardFee : @storage
                                       EMPTY_MAP (or address (or (pair address nat) unit)) nat; # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       # if self.data.token1Check: # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 7;      # bool : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       IF
                                         {
                                           # fees_map.value[variant('fa2', (self.data.token1Address, self.data.token1Id))] = self.data.token1_Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CAR;        # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DIG 4;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           GET 8;      # nat : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           SWAP;       # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           DUG 6;      # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # address : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           PAIR;       # pair address nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           LEFT unit;  # or (pair address nat) unit : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           RIGHT address; # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                         }
                                         {
                                           # fees_map.value[variant('fa12', self.data.token1Address)] = self.data.token1_Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CAR;        # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DUP 5;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # address : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           LEFT (or (pair address nat) unit); # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                         }; # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       # if self.data.token2Check: # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 4;      # bool : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       IF
                                         {
                                           # fees_map.value[variant('fa2', (self.data.token2Address, self.data.token2Id))] = self.data.token2_Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CDR;        # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DIG 4;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           CAR;        # nat : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           SWAP;       # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                           DUG 6;      # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # address : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           PAIR;       # pair address nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           LEFT unit;  # or (pair address nat) unit : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           RIGHT address; # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                         }
                                         {
                                           # fees_map.value[variant('fa12', self.data.token2Address)] = self.data.token2_Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           CDR;        # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           DUP 5;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # address : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           LEFT (or (pair address nat) unit); # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                           UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                         }; # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       SWAP;       # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       # sp.transfer(sp.record(epoch = params.epoch, fees = fees_map.value), sp.tez(0), sp.contract(sp.TRecord(epoch = sp.TNat, fees = sp.TMap(sp.TVariant(fa12 = sp.TAddress, fa2 = sp.TPair(sp.TAddress, sp.TNat), tez = sp.TUnit).layout(("fa12", ("fa2", "tez"))), sp.TNat)).layout(("epoch", "fees")), params.feeDistributor, entry_point='add_fees').open_some()) # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       DUP 3;      # @parameter%forwardFee : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       CDR;        # address : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       CONTRACT %add_fees (pair (nat %epoch) (map %fees (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)); # option (contract (pair (nat %epoch) (map %fees (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat))) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       IF_NONE
                                         {
                                           PUSH int 540; # int : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       PUSH mutez 0; # mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       DIG 3;      # map (or address (or (pair address nat) unit)) nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                       DIG 4;      # @parameter%forwardFee : map (or address (or (pair address nat) unit)) nat : mutez : @some : list operation : @storage
                                       CAR;        # nat : map (or address (or (pair address nat) unit)) nat : mutez : @some : list operation : @storage
                                       PAIR;       # pair nat (map (or address (or (pair address nat) unit)) nat) : mutez : @some : list operation : @storage
                                       TRANSFER_TOKENS; # operation : list operation : @storage
                                       CONS;       # list operation : @storage
                                       SWAP;       # @storage : list operation
                                       # self.data.token1_Fee = 0 # @storage : list operation
                                       UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : list operation
                                       SWAP;       # pair (pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check))) (pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       UNPAIR;     # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       UNPAIR;     # pair (nat %token1_Fee) (nat %token1_pool) : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       CDR;        # nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       PUSH nat 0; # nat : nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       PAIR;       # pair nat nat : pair (address %token2Address) (bool %token2Check) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       PAIR;       # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       SWAP;       # pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       # self.data.token2_Fee = 0 # pair (pair (nat %token2Id) (nat %token2_Fee)) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       UNPAIR;     # pair (nat %token2Id) (nat %token2_Fee) : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       CAR;        # nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       PUSH nat 0; # nat : nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       SWAP;       # nat : nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       PAIR;       # pair nat nat : pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       PAIR;       # pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       SWAP;       # pair (pair nat nat) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       PAIR;       # pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : list operation
                                       SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))) : list operation
                                       PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))) : list operation
                                       SWAP;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                     }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                                 }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                             }; # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                         }; # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                       NIL operation; # list operation : list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                       SWAP;       # list operation : list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                       ITER
                         {
                           CONS;       # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                         }; # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address)))))
                       PAIR;       # pair (list operation) (pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id))))) (pair (pair (pair nat nat) (pair (address %token2Address) (bool %token2Check))) (pair (pair nat nat) (pair (nat %token2_pool) (pair (nat %totalSupply) (option %voterContract address))))))
                     };
                   view
                     "getExchangeFee" (pair (pair (address %token1Address) (nat %token1Id)) (pair (address %token2Address) (nat %token2Id))) (pair (nat %token1Fee) (nat %token2Fee))
                     {
                       UNPAIR;     # @parameter : @storage
                       SWAP;       # @storage : @parameter
                       # sp.verify(((params.token1Address == self.data.token1Address) & (params.token1Id == self.data.token1Id)) & ((params.token2Address == self.data.token2Address) & (params.token2Id == self.data.token2Id))) # @storage : @parameter
                       DUP;        # @storage : @storage : @parameter
                       DUG 2;      # @storage : @parameter : @storage
                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter : @storage
                       GET 5;      # address : @parameter : @storage
                       SWAP;       # @parameter : address : @storage
                       DUP;        # @parameter : @parameter : address : @storage
                       DUG 2;      # @parameter : address : @parameter : @storage
                       CAR;        # pair (address %token1Address) (nat %token1Id) : address : @parameter : @storage
                       CAR;        # address : address : @parameter : @storage
                       COMPARE;    # int : @parameter : @storage
                       EQ;         # bool : @parameter : @storage
                       IF
                         {
                           SWAP;       # @storage : @parameter
                           DUP;        # @storage : @storage : @parameter
                           DUG 2;      # @storage : @parameter : @storage
                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter : @storage
                           GET 8;      # nat : @parameter : @storage
                           SWAP;       # @parameter : nat : @storage
                           DUP;        # @parameter : @parameter : nat : @storage
                           DUG 2;      # @parameter : nat : @parameter : @storage
                           CAR;        # pair (address %token1Address) (nat %token1Id) : nat : @parameter : @storage
                           CDR;        # nat : nat : @parameter : @storage
                           COMPARE;    # int : @parameter : @storage
                           EQ;         # bool : @parameter : @storage
                         }
                         {
                           PUSH bool False; # bool : @parameter : @storage
                         }; # bool : @parameter : @storage
                       IF
                         {
                           SWAP;       # @storage : @parameter
                           DUP;        # @storage : @storage : @parameter
                           DUG 2;      # @storage : @parameter : @storage
                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @parameter : @storage
                           GET 3;      # address : @parameter : @storage
                           SWAP;       # @parameter : address : @storage
                           DUP;        # @parameter : @parameter : address : @storage
                           DUG 2;      # @parameter : address : @parameter : @storage
                           GET 3;      # address : address : @parameter : @storage
                           COMPARE;    # int : @parameter : @storage
                           EQ;         # bool : @parameter : @storage
                           IF
                             {
                               SWAP;       # @storage : @parameter
                               DUP;        # @storage : @storage : @parameter
                               DUG 2;      # @storage : @parameter : @storage
                               GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : @parameter : @storage
                               CAR;        # nat : @parameter : @storage
                               SWAP;       # @parameter : nat : @storage
                               GET 4;      # nat : nat : @storage
                               COMPARE;    # int : @storage
                               EQ;         # bool : @storage
                             }
                             {
                               DROP;       # @storage
                               PUSH bool False; # bool : @storage
                             }; # bool : @storage
                         }
                         {
                           DROP;       # @storage
                           PUSH bool False; # bool : @storage
                         }; # bool : @storage
                       IF
                         {}
                         {
                           PUSH string "WrongCondition: ((params.token1Address == self.data.token1Address) & (params.token1Id == self.data.token1Id)) & ((params.token2Address == self.data.token2Address) & (params.token2Id == self.data.token2Id))"; # string : @storage
                           FAILWITH;   # FAILED
                         }; # @storage
                       # sp.result(sp.record(token1Fee = self.data.token1_Fee, token2Fee = self.data.token2_Fee)) # @storage
                       DUP;        # @storage : @storage
                       GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : @storage
                       CDR;        # nat : @storage
                       SWAP;       # @storage : nat
                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat
                       CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat
                       CAR;        # nat : nat
                       PAIR;       # pair nat nat
                     };
                   view
                     "getReserveBalance" (pair (pair (address %token1Address) (nat %token1Id)) (pair (address %token2Address) (nat %token2Id))) (pair (nat %token1_pool) (nat %token2_pool))
                     {
                       UNPAIR;     # @parameter : @storage
                       SWAP;       # @storage : @parameter
                       # sp.verify(((params.token1Address == self.data.token1Address) & (params.token1Id == self.data.token1Id)) & ((params.token2Address == self.data.token2Address) & (params.token2Id == self.data.token2Id))) # @storage : @parameter
                       DUP;        # @storage : @storage : @parameter
                       DUG 2;      # @storage : @parameter : @storage
                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter : @storage
                       GET 5;      # address : @parameter : @storage
                       SWAP;       # @parameter : address : @storage
                       DUP;        # @parameter : @parameter : address : @storage
                       DUG 2;      # @parameter : address : @parameter : @storage
                       CAR;        # pair (address %token1Address) (nat %token1Id) : address : @parameter : @storage
                       CAR;        # address : address : @parameter : @storage
                       COMPARE;    # int : @parameter : @storage
                       EQ;         # bool : @parameter : @storage
                       IF
                         {
                           SWAP;       # @storage : @parameter
                           DUP;        # @storage : @storage : @parameter
                           DUG 2;      # @storage : @parameter : @storage
                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lpTokenAddress) (nat %maxSwapLimit))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Id)))) : @parameter : @storage
                           GET 8;      # nat : @parameter : @storage
                           SWAP;       # @parameter : nat : @storage
                           DUP;        # @parameter : @parameter : nat : @storage
                           DUG 2;      # @parameter : nat : @parameter : @storage
                           CAR;        # pair (address %token1Address) (nat %token1Id) : nat : @parameter : @storage
                           CDR;        # nat : nat : @parameter : @storage
                           COMPARE;    # int : @parameter : @storage
                           EQ;         # bool : @parameter : @storage
                         }
                         {
                           PUSH bool False; # bool : @parameter : @storage
                         }; # bool : @parameter : @storage
                       IF
                         {
                           SWAP;       # @storage : @parameter
                           DUP;        # @storage : @storage : @parameter
                           DUG 2;      # @storage : @parameter : @storage
                           GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : @parameter : @storage
                           GET 3;      # address : @parameter : @storage
                           SWAP;       # @parameter : address : @storage
                           DUP;        # @parameter : @parameter : address : @storage
                           DUG 2;      # @parameter : address : @parameter : @storage
                           GET 3;      # address : address : @parameter : @storage
                           COMPARE;    # int : @parameter : @storage
                           EQ;         # bool : @parameter : @storage
                           IF
                             {
                               SWAP;       # @storage : @parameter
                               DUP;        # @storage : @storage : @parameter
                               DUG 2;      # @storage : @parameter : @storage
                               GET 5;      # pair (nat %token2Id) (nat %token2_Fee) : @parameter : @storage
                               CAR;        # nat : @parameter : @storage
                               SWAP;       # @parameter : nat : @storage
                               GET 4;      # nat : nat : @storage
                               COMPARE;    # int : @storage
                               EQ;         # bool : @storage
                             }
                             {
                               DROP;       # @storage
                               PUSH bool False; # bool : @storage
                             }; # bool : @storage
                         }
                         {
                           DROP;       # @storage
                           PUSH bool False; # bool : @storage
                         }; # bool : @storage
                       IF
                         {}
                         {
                           PUSH string "WrongCondition: ((params.token1Address == self.data.token1Address) & (params.token1Id == self.data.token1Id)) & ((params.token2Address == self.data.token2Address) & (params.token2Id == self.data.token2Id))"; # string : @storage
                           FAILWITH;   # FAILED
                         }; # @storage
                       # sp.result(sp.record(token1_pool = self.data.token1_pool, token2_pool = self.data.token2_pool)) # @storage
                       DUP;        # @storage : @storage
                       GET 7;      # nat : @storage
                       SWAP;       # @storage : nat
                       GET 3;      # pair (pair (nat %token1_Fee) (nat %token1_pool)) (pair (address %token2Address) (bool %token2Check)) : nat
                       CAR;        # pair (nat %token1_Fee) (nat %token1_pool) : nat
                       CDR;        # nat : nat
                       PAIR;       # pair nat nat
                     };
                 }; # operation : address : list operation : @parameter%deployPair : @storage
                PAIR;       # pair operation address : list operation : @parameter%deployPair : @storage
                # sp.operations().push(create_contract_volatileDeployer_42.value.operation) # pair operation address : list operation : @parameter%deployPair : @storage
                DUP;        # pair operation address : pair operation address : list operation : @parameter%deployPair : @storage
                DUG 2;      # pair operation address : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # operation : list operation : pair operation address : @parameter%deployPair : @storage
                CONS;       # list operation : pair operation address : @parameter%deployPair : @storage
                # sp.emit(sp.record(exchangeAddress = sp.some(create_contract_volatileDeployer_42.value.address).open_some(), lpTokenAddress = params.lpTokenAddress, token1Address = params.token1Address, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Id = params.token2Id, token2Type = params.token2Type)) # list operation : pair operation address : @parameter%deployPair : @storage
                DIG 2;      # @parameter%deployPair : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : list operation : pair operation address : @storage
                GET 7;      # bool : @parameter%deployPair : list operation : pair operation address : @storage
                SWAP;       # @parameter%deployPair : bool : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : bool : list operation : pair operation address : @storage
                DUG 4;      # @parameter%deployPair : bool : list operation : pair operation address : @parameter%deployPair : @storage
                GET 5;      # nat : bool : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                DIG 3;      # @parameter%deployPair : pair nat bool : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair nat bool : list operation : pair operation address : @storage
                GET 3;      # pair (address %token2Address) (nat %token2Amount) : @parameter%deployPair : pair nat bool : list operation : pair operation address : @storage
                CAR;        # address : @parameter%deployPair : pair nat bool : list operation : pair operation address : @storage
                SWAP;       # @parameter%deployPair : address : pair nat bool : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : address : pair nat bool : list operation : pair operation address : @storage
                DUG 5;      # @parameter%deployPair : address : pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : address : pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                GET 6;      # bool : address : pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair bool address : pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                DIG 3;      # @parameter%deployPair : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : @parameter%deployPair : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @storage
                GET 5;      # nat : @parameter%deployPair : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @storage
                SWAP;       # @parameter%deployPair : nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @storage
                DUG 5;      # @parameter%deployPair : nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CDR;        # address : nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                DUP 5;      # @parameter%deployPair : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # address : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                DUP 5;      # pair operation address : address : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CDR;        # address : address : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                SOME;       # option address : address : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                IF_NONE
                  {
                    PUSH int 75; # int : address : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair @some address : pair address nat : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair (pair @some address) (pair address nat) : pair (pair bool address) (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair @some address) (pair address nat)) (pair (pair bool address) (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                EMIT (pair (pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))); # operation : list operation : pair operation address : @parameter%deployPair : @storage
                CONS;       # list operation : pair operation address : @parameter%deployPair : @storage
                SWAP;       # pair operation address : list operation : @parameter%deployPair : @storage
                # self.data.Registry[sp.some(create_contract_volatileDeployer_42.value.address).open_some()] = sp.record(lpTokenAddress = params.lpTokenAddress, token1Address = params.token1Address, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Id = params.token2Id, token2Type = params.token2Type) # pair operation address : list operation : @parameter%deployPair : @storage
                DIG 3;      # @storage : pair operation address : list operation : @parameter%deployPair
                UNPAIR;     # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                UNPAIR;     # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DIG 5;      # @parameter%deployPair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                GET 7;      # bool : @parameter%deployPair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                SWAP;       # @parameter%deployPair : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUG 7;      # @parameter%deployPair : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                GET 5;      # nat : bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DIG 6;      # @parameter%deployPair : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                GET 3;      # pair (address %token2Address) (nat %token2Amount) : @parameter%deployPair : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                CAR;        # address : @parameter%deployPair : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                SWAP;       # @parameter%deployPair : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUG 8;      # @parameter%deployPair : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                GET 6;      # bool : address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair bool address : pair nat bool : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DIG 6;      # @parameter%deployPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : @parameter%deployPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                GET 5;      # nat : @parameter%deployPair : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                SWAP;       # @parameter%deployPair : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUG 8;      # @parameter%deployPair : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CDR;        # address : nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DUP 8;      # @parameter%deployPair : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # address : pair address nat : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair address (pair address nat) : pair (pair bool address) (pair nat bool) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                SOME;       # option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DUP 5;      # pair operation address : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CDR;        # address : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                SOME;       # option address : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                IF_NONE
                  {
                    PUSH int 75; # int : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                UPDATE;     # big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                DUG 3;      # pair operation address : list operation : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # sp.transfer(sp.some(create_contract_volatileDeployer_42.value.address).open_some(), sp.tez(0), sp.contract(sp.TAddress, params.lpTokenAddress, entry_point='updateExchangeAddress').open_some()) # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 3;      # @parameter%deployPair : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # address : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONTRACT %updateExchangeAddress address; # option (contract address) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 89; # int : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH mutez 0; # mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 4;      # pair operation address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CDR;        # address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SOME;       # option address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 75; # int : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                TRANSFER_TOKENS; # operation : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONS;       # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # sp.transfer(sp.record(exchangeAddress = sp.some(create_contract_volatileDeployer_42.value.address).open_some(), stablePair = False, token1Address = params.token1Address, token1Amount = params.token1Amount, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Amount = params.token2Amount, token2Id = params.token2Id, token2Type = params.token2Type, userAddress = params.userAddress), sp.tez(0), sp.contract(sp.TRecord(exchangeAddress = sp.TAddress, stablePair = sp.TBool, token1Address = sp.TAddress, token1Amount = sp.TNat, token1Id = sp.TNat, token1Type = sp.TBool, token2Address = sp.TAddress, token2Amount = sp.TNat, token2Id = sp.TNat, token2Type = sp.TBool, userAddress = sp.TAddress).layout(((("exchangeAddress", "stablePair"), ("token1Address", ("token1Amount", "token1Id"))), (("token1Type", ("token2Address", "token2Amount")), ("token2Id", ("token2Type", "userAddress"))))), self.data.routerAddress, entry_point='AddExchange').open_some()) # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 4;      # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 6;      # address : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONTRACT %AddExchange (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress))))); # option (contract (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress)))))) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 222; # int : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH mutez 0; # mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 4;      # @parameter%deployPair : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 8;      # address : @parameter%deployPair : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # @parameter%deployPair : address : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : address : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUG 6;      # @parameter%deployPair : address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 7;      # bool : address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair bool address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 6;      # @parameter%deployPair : pair bool address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 5;      # nat : pair bool address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 5;      # @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # pair (address %token2Address) (nat %token2Amount) : @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CDR;        # nat : @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # @parameter%deployPair : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUG 7;      # @parameter%deployPair : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # pair (address %token2Address) (nat %token2Amount) : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # address : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 7;      # @parameter%deployPair : pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 6;      # bool : pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair bool (pair address nat) : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 5;      # @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 5;      # nat : @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # @parameter%deployPair : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUG 7;      # @parameter%deployPair : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # nat : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 7;      # @parameter%deployPair : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CDR;        # address : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH bool False; # bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 7;      # pair operation address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CDR;        # address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SOME;       # option address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 75; # int : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair @some bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair (pair @some bool) (pair address (pair nat nat)) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair (pair (pair @some bool) (pair address (pair nat nat))) (pair (pair bool (pair address nat)) (pair nat (pair bool address))) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                TRANSFER_TOKENS; # operation : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONS;       # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # pair operation address : list operation : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # self.data.lpMapping[params.lpTokenAddress] = sp.some(create_contract_volatileDeployer_42.value.address).open_some() # pair operation address : list operation : @parameter%deployPair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 3;      # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                DUP;        # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                GET 5;      # big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                DIG 2;      # pair operation address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                CDR;        # address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                SOME;       # option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                IF_NONE
                  {
                    PUSH int 75; # int : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                SOME;       # option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                DIG 4;      # @parameter%deployPair : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Amount) (pair (nat %token1Id) (bool %token1Type))) : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (address %lpTokenAddress) (address %token1Address) : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # address : option address : big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE;     # big_map address address : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE 5;   # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                SWAP;       # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }; # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%modifyFee
                # == modifyFee ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%modifyFee
                DUP;        # @storage : @storage : @parameter%modifyFee
                DUG 2;      # @storage : @parameter%modifyFee : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%modifyFee : @storage
                GET 3;      # address : @parameter%modifyFee : @storage
                SENDER;     # @sender : address : @parameter%modifyFee : @storage
                COMPARE;    # int : @parameter%modifyFee : @storage
                EQ;         # bool : @parameter%modifyFee : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%modifyFee : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%modifyFee : @storage
                # self.data.lpFee = params # @parameter%modifyFee : @storage
                UPDATE 3;   # @storage
                NIL operation; # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%removeExchangePair
                # == removeExchangePair ==
                # sp.verify((sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)) # @storage : @parameter%removeExchangePair
                DUP;        # @storage : @storage : @parameter%removeExchangePair
                DUG 2;      # @storage : @parameter%removeExchangePair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%removeExchangePair : @storage
                GET 3;      # address : @parameter%removeExchangePair : @storage
                SENDER;     # @sender : address : @parameter%removeExchangePair : @storage
                COMPARE;    # int : @parameter%removeExchangePair : @storage
                EQ;         # bool : @parameter%removeExchangePair : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%removeExchangePair : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%removeExchangePair
                    DUP;        # @storage : @storage : @parameter%removeExchangePair
                    DUG 2;      # @storage : @parameter%removeExchangePair : @storage
                    CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%removeExchangePair : @storage
                    GET 4;      # address : @parameter%removeExchangePair : @storage
                    SENDER;     # @sender : address : @parameter%removeExchangePair : @storage
                    COMPARE;    # int : @parameter%removeExchangePair : @storage
                    EQ;         # bool : @parameter%removeExchangePair : @storage
                  }; # bool : @parameter%removeExchangePair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)"; # string : @parameter%removeExchangePair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%removeExchangePair : @storage
                SWAP;       # @storage : @parameter%removeExchangePair
                # sp.verify(self.data.Registry.contains(params)) # @storage : @parameter%removeExchangePair
                DUP;        # @storage : @storage : @parameter%removeExchangePair
                DUG 2;      # @storage : @parameter%removeExchangePair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%removeExchangePair : @storage
                CAR;        # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%removeExchangePair : @storage
                SWAP;       # @parameter%removeExchangePair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                DUP;        # @parameter%removeExchangePair : @parameter%removeExchangePair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                DUG 2;      # @parameter%removeExchangePair : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%removeExchangePair : @storage
                MEM;        # bool : @parameter%removeExchangePair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.Registry.contains(params)"; # string : @parameter%removeExchangePair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%removeExchangePair : @storage
                SWAP;       # @storage : @parameter%removeExchangePair
                # del self.data.Registry[params] # @storage : @parameter%removeExchangePair
                UNPAIR;     # pair (big_map %Registry address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                UNPAIR;     # big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                NONE (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))); # option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                DUP 5;      # @parameter%removeExchangePair : option (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : big_map address (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Id))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (bool %token2Type)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                UPDATE;     # big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                PAIR;       # pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                PAIR;       # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : @parameter%removeExchangePair
                SWAP;       # @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # sp.transfer(params, sp.tez(0), sp.contract(sp.TAddress, self.data.routerAddress, entry_point='DeleteExchange').open_some()) # @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                NIL operation; # list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 3;      # pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 6;      # address : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONTRACT %DeleteExchange address; # option (contract address) : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 166; # int : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 3;      # @parameter%removeExchangePair : mutez : @some : list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONS;       # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }; # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }; # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
      }; # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    NIL operation; # list operation : list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    SWAP;       # list operation : list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    ITER
      {
        CONS;       # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
      }; # list operation : pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    PAIR;       # pair (list operation) (pair (pair (big_map address (pair (pair address (pair address nat)) (pair (pair bool address) (pair nat bool)))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))))
  };