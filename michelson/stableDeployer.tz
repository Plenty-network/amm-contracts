parameter (or (or (or (pair %addExistingPair (pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id)))) (pair (pair (nat %token1Precision) (pair (bool %token1Type) (address %token2Address))) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) (address %callUpdateExchageAddress)) (or (address %changeAdminAddress) (address %changeLpDeployer))) (or (or (address %changeRouterAddress) (pair %deployPair (pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type)))) (pair (pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id))) (pair (nat %token2Precision) (pair (bool %token2Type) (address %userAddress)))))) (or (nat %modifyFee) (address %removeExchangePair))));
storage   (pair (pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%addExistingPair
                # == addExistingPair ==
                # sp.verify((sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)) # @storage : @parameter%addExistingPair
                DUP;        # @storage : @storage : @parameter%addExistingPair
                DUG 2;      # @storage : @parameter%addExistingPair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%addExistingPair : @storage
                GET 3;      # address : @parameter%addExistingPair : @storage
                SENDER;     # @sender : address : @parameter%addExistingPair : @storage
                COMPARE;    # int : @parameter%addExistingPair : @storage
                EQ;         # bool : @parameter%addExistingPair : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%addExistingPair : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%addExistingPair
                    DUP;        # @storage : @storage : @parameter%addExistingPair
                    DUG 2;      # @storage : @parameter%addExistingPair : @storage
                    CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%addExistingPair : @storage
                    GET 4;      # address : @parameter%addExistingPair : @storage
                    SENDER;     # @sender : address : @parameter%addExistingPair : @storage
                    COMPARE;    # int : @parameter%addExistingPair : @storage
                    EQ;         # bool : @parameter%addExistingPair : @storage
                  }; # bool : @parameter%addExistingPair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)"; # string : @parameter%addExistingPair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%addExistingPair : @storage
                SWAP;       # @storage : @parameter%addExistingPair
                # self.data.Registry[params.exchangeAddress] = sp.record(lpTokenAddress = params.lpTokenAddress, token1Address = params.token1Address, token1Id = params.token1Id, token1Precision = params.token1Precision, token1Type = params.token1Type, token2Address = params.token2Address, token2Id = params.token2Id, token2Precision = params.token2Precision, token2Type = params.token2Type) # @storage : @parameter%addExistingPair
                UNPAIR;     # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                UNPAIR;     # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DIG 3;      # @parameter%addExistingPair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 8;      # bool : @parameter%addExistingPair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # @parameter%addExistingPair : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUG 5;      # @parameter%addExistingPair : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 7;      # nat : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair nat bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DUP 5;      # @parameter%addExistingPair : pair nat bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 5;      # nat : pair nat bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DIG 4;      # @parameter%addExistingPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 3;      # pair (nat %token1Precision) (pair (bool %token1Type) (address %token2Address)) : @parameter%addExistingPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 4;      # address : @parameter%addExistingPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # @parameter%addExistingPair : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUG 6;      # @parameter%addExistingPair : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 3;      # pair (nat %token1Precision) (pair (bool %token1Type) (address %token2Address)) : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 3;      # bool : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair bool address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DIG 4;      # @parameter%addExistingPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 3;      # pair (nat %token1Precision) (pair (bool %token1Type) (address %token2Address)) : @parameter%addExistingPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                CAR;        # nat : @parameter%addExistingPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # @parameter%addExistingPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUG 6;      # @parameter%addExistingPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                GET 6;      # nat : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DIG 5;      # @parameter%addExistingPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : @parameter%addExistingPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                GET 5;      # address : @parameter%addExistingPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # @parameter%addExistingPair : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                DUG 7;      # @parameter%addExistingPair : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CDR;        # address : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair address address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (pair address address) (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                SOME;       # option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                DUP 5;      # @parameter%addExistingPair : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                CAR;        # address : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                UPDATE;     # big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%addExistingPair
                PAIR;       # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : @parameter%addExistingPair
                SWAP;       # @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # if params.routerCall: # @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%addExistingPair : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # bool : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF
                  {
                    # sp.transfer(sp.record(exchangeAddress = params.exchangeAddress, stablePair = True, token1Address = params.token1Address, token1Amount = 0, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Amount = 0, token2Id = params.token2Id, token2Type = params.token2Type, userAddress = sp.self_address), sp.tez(0), sp.contract(sp.TRecord(exchangeAddress = sp.TAddress, stablePair = sp.TBool, token1Address = sp.TAddress, token1Amount = sp.TNat, token1Id = sp.TNat, token1Type = sp.TBool, token2Address = sp.TAddress, token2Amount = sp.TNat, token2Id = sp.TNat, token2Type = sp.TBool, userAddress = sp.TAddress).layout(((("exchangeAddress", "stablePair"), ("token1Address", ("token1Amount", "token1Id"))), (("token1Type", ("token2Address", "token2Amount")), ("token2Id", ("token2Type", "userAddress"))))), self.data.routerAddress, entry_point='AddExchange').open_some()) # @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    NIL operation; # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 3;      # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 6;      # address : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CONTRACT %AddExchange (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress))))); # option (contract (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress)))))) : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    IF_NONE
                      {
                        PUSH int 218; # int : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    SELF_ADDRESS; # @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 5;      # @parameter%addExistingPair : @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 8;      # bool : @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair bool @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 5;      # @parameter%addExistingPair : pair bool @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 5;      # nat : pair bool @self : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH nat 0; # nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 6;      # @parameter%addExistingPair : nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 3;      # pair (nat %token1Precision) (pair (bool %token1Type) (address %token2Address)) : nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 4;      # address : nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 6;      # @parameter%addExistingPair : pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 3;      # pair (nat %token1Precision) (pair (bool %token1Type) (address %token2Address)) : pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 3;      # bool : pair address nat : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair bool (pair address nat) : pair nat (pair bool @self) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 5;      # @parameter%addExistingPair : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 6;      # nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH nat 0; # nat : nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 6;      # @parameter%addExistingPair : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    GET 5;      # address : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PUSH bool True; # bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    DUP 7;      # @parameter%addExistingPair : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CAR;        # address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair address bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair (pair address bool) (pair address (pair nat nat)) : pair (pair bool (pair address nat)) (pair nat (pair bool @self)) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    PAIR;       # pair (pair (pair address bool) (pair address (pair nat nat))) (pair (pair bool (pair address nat)) (pair nat (pair bool @self))) : mutez : @some : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    TRANSFER_TOKENS; # operation : list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    CONS;       # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                  }
                  {
                    NIL operation; # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                  }; # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # self.data.lpMapping[params.lpTokenAddress] = params.exchangeAddress # list operation : @parameter%addExistingPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 2;      # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                DUP;        # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                GET 5;      # big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                DUP 4;      # @parameter%addExistingPair : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                CAR;        # address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                SOME;       # option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%addExistingPair
                DIG 4;      # @parameter%addExistingPair : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (bool %routerCall) (pair (address %token1Address) (nat %token1Id))) : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (address %exchangeAddress) (address %lpTokenAddress) : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CDR;        # address : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE;     # big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE 5;   # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                SWAP;       # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }
              {
                SWAP;       # @storage : @parameter%callUpdateExchageAddress
                # == callUpdateExchageAddress ==
                # sp.verify(self.data.lpMapping.contains(params)) # @storage : @parameter%callUpdateExchageAddress
                DUP;        # @storage : @storage : @parameter%callUpdateExchageAddress
                DUG 2;      # @storage : @parameter%callUpdateExchageAddress : @storage
                GET 5;      # big_map address address : @parameter%callUpdateExchageAddress : @storage
                SWAP;       # @parameter%callUpdateExchageAddress : big_map address address : @storage
                DUP;        # @parameter%callUpdateExchageAddress : @parameter%callUpdateExchageAddress : big_map address address : @storage
                DUG 2;      # @parameter%callUpdateExchageAddress : big_map address address : @parameter%callUpdateExchageAddress : @storage
                MEM;        # bool : @parameter%callUpdateExchageAddress : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.lpMapping.contains(params)"; # string : @parameter%callUpdateExchageAddress : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%callUpdateExchageAddress : @storage
                # sp.transfer(self.data.lpMapping[params], sp.tez(0), sp.contract(sp.TAddress, params, entry_point='updateExchangeAddress').open_some()) # @parameter%callUpdateExchageAddress : @storage
                DUP;        # @parameter%callUpdateExchageAddress : @parameter%callUpdateExchageAddress : @storage
                CONTRACT %updateExchangeAddress address; # option (contract address) : @parameter%callUpdateExchageAddress : @storage
                IF_NONE
                  {
                    PUSH int 180; # int : @parameter%callUpdateExchageAddress : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%callUpdateExchageAddress : @storage
                NIL operation; # list operation : @some : @parameter%callUpdateExchageAddress : @storage
                SWAP;       # @some : list operation : @parameter%callUpdateExchageAddress : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%callUpdateExchageAddress : @storage
                DUP 5;      # @storage : mutez : @some : list operation : @parameter%callUpdateExchageAddress : @storage
                GET 5;      # big_map address address : mutez : @some : list operation : @parameter%callUpdateExchageAddress : @storage
                DIG 4;      # @parameter%callUpdateExchageAddress : big_map address address : mutez : @some : list operation : @storage
                GET;        # option address : mutez : @some : list operation : @storage
                IF_NONE
                  {
                    PUSH int 186; # int : mutez : @some : list operation : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }; # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%changeAdminAddress
                # == changeAdminAddress ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%changeAdminAddress
                DUP;        # @storage : @storage : @parameter%changeAdminAddress
                DUG 2;      # @storage : @parameter%changeAdminAddress : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%changeAdminAddress : @storage
                GET 3;      # address : @parameter%changeAdminAddress : @storage
                SENDER;     # @sender : address : @parameter%changeAdminAddress : @storage
                COMPARE;    # int : @parameter%changeAdminAddress : @storage
                EQ;         # bool : @parameter%changeAdminAddress : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%changeAdminAddress : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%changeAdminAddress : @storage
                SWAP;       # @storage : @parameter%changeAdminAddress
                # self.data.adminAddress = params # @storage : @parameter%changeAdminAddress
                UNPAIR;     # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                UNPAIR;     # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                SWAP;       # pair (address %adminAddress) (address %lpDeployer) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                CDR;        # address : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeAdminAddress
                DIG 3;      # @parameter%changeAdminAddress : address : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair @parameter%changeAdminAddress address : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair @parameter%changeAdminAddress address : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair @parameter%changeAdminAddress address) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (pair (big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair @parameter%changeAdminAddress address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }
              {
                SWAP;       # @storage : @parameter%changeLpDeployer
                # == changeLpDeployer ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%changeLpDeployer
                DUP;        # @storage : @storage : @parameter%changeLpDeployer
                DUG 2;      # @storage : @parameter%changeLpDeployer : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%changeLpDeployer : @storage
                GET 3;      # address : @parameter%changeLpDeployer : @storage
                SENDER;     # @sender : address : @parameter%changeLpDeployer : @storage
                COMPARE;    # int : @parameter%changeLpDeployer : @storage
                EQ;         # bool : @parameter%changeLpDeployer : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%changeLpDeployer : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%changeLpDeployer : @storage
                SWAP;       # @storage : @parameter%changeLpDeployer
                # self.data.lpDeployer = params # @storage : @parameter%changeLpDeployer
                UNPAIR;     # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                UNPAIR;     # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                SWAP;       # pair (address %adminAddress) (address %lpDeployer) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                CAR;        # address : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%changeLpDeployer
                DIG 3;      # @parameter%changeLpDeployer : address : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # address : @parameter%changeLpDeployer : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair address @parameter%changeLpDeployer : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                SWAP;       # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair address @parameter%changeLpDeployer : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair address @parameter%changeLpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))
                PAIR;       # pair (pair (big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair address @parameter%changeLpDeployer)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }; # pair (pair (big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
            NIL operation; # list operation : pair (pair (big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }; # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%changeRouterAddress
                # == changeRouterAddress ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%changeRouterAddress
                DUP;        # @storage : @storage : @parameter%changeRouterAddress
                DUG 2;      # @storage : @parameter%changeRouterAddress : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%changeRouterAddress : @storage
                GET 3;      # address : @parameter%changeRouterAddress : @storage
                SENDER;     # @sender : address : @parameter%changeRouterAddress : @storage
                COMPARE;    # int : @parameter%changeRouterAddress : @storage
                EQ;         # bool : @parameter%changeRouterAddress : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%changeRouterAddress : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%changeRouterAddress : @storage
                # self.data.routerAddress = params # @parameter%changeRouterAddress : @storage
                UPDATE 6;   # @storage
                NIL operation; # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%deployPair
                # == deployPair ==
                # sp.verify(sp.sender == self.data.lpDeployer) # @storage : @parameter%deployPair
                DUP;        # @storage : @storage : @parameter%deployPair
                DUG 2;      # @storage : @parameter%deployPair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%deployPair : @storage
                GET 4;      # address : @parameter%deployPair : @storage
                SENDER;     # @sender : address : @parameter%deployPair : @storage
                COMPARE;    # int : @parameter%deployPair : @storage
                EQ;         # bool : @parameter%deployPair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.lpDeployer"; # string : @parameter%deployPair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%deployPair : @storage
                # def f_x0(_x0):
                #   sp.verify(_x0 >= 0, 'Negative_Value')
                #   y = sp.local("y", _x0)
                #   sp.while (y.value * y.value) > _x0:
                #     y.value = ((_x0 // y.value) + y.value) // 2
                #   sp.verify(((y.value * y.value) <= _x0) & (_x0 < ((y.value + 1) * (y.value + 1))))
                #   sp.result(y.value)
                # create_contract_stableDeployer_42 = sp.local("create_contract_stableDeployer_42", create contract ...) # @parameter%deployPair : @storage
                NIL operation; # list operation : @parameter%deployPair : @storage
                NONE address; # option address : list operation : @parameter%deployPair : @storage
                DUP 3;      # @parameter%deployPair : option address : list operation : @parameter%deployPair : @storage
                GET 5;      # nat : option address : list operation : @parameter%deployPair : @storage
                PAIR;       # pair nat (option address) : list operation : @parameter%deployPair : @storage
                PUSH nat 0; # nat : pair nat (option address) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                DUP 3;      # @parameter%deployPair : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                GET 4;      # nat : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                PUSH nat 0; # nat : nat : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair nat nat : pair nat (pair nat (option address)) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                DIG 2;      # @parameter%deployPair : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                GET 7;      # bool : @parameter%deployPair : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                SWAP;       # @parameter%deployPair : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @storage
                DUG 4;      # @parameter%deployPair : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                CAR;        # address : bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                DUP 4;      # @parameter%deployPair : pair address bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : pair address bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                GET 5;      # nat : pair address bool : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair nat (pair address bool) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PUSH nat 0; # nat : pair nat (pair address bool) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                DUP 5;      # @parameter%deployPair : nat : pair nat (pair address bool) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : nat : pair nat (pair address bool) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                GET 3;      # nat : nat : pair nat (pair address bool) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair nat nat : pair nat (pair address bool) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair nat nat) (pair nat (pair address bool)) : pair (pair nat nat) (pair nat (pair nat (option address))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PUSH nat 0; # nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DUP 4;      # @parameter%deployPair : nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                GET 6;      # bool : nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair bool nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DUP 4;      # @parameter%deployPair : pair bool nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : pair bool nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : pair bool nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                GET 3;      # address : pair bool nat : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address (pair bool nat) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PUSH (pair bool bool) (Pair False False); # pair bool bool : pair address (pair bool nat) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PUSH nat 0; # nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DUP 5;      # @parameter%deployPair : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # address : nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                DIG 5;      # @storage : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                DUP;        # @storage : @storage : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                GET 3;      # nat : @storage : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                SWAP;       # @storage : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                DUP;        # @storage : @storage : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair
                DUG 7;      # @storage : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                GET 3;      # address : nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair address nat : pair address nat : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair address nat) (pair address nat) : pair (pair bool bool) (pair address (pair bool nat)) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat))) : pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address)))) : list operation : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address))))) : list operation : @parameter%deployPair : @storage
                PUSH mutez 0; # mutez : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address))))) : list operation : @parameter%deployPair : @storage
                NONE key_hash; # option key_hash : mutez : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair nat (pair address bool))) (pair (pair nat nat) (pair nat (pair nat (option address))))) : list operation : @parameter%deployPair : @storage
                CREATE_CONTRACT
                 { parameter (or (or (or (address %ChangeAdmin) (unit %ChangeState)) (or (address %ChangeSystem) (nat %ModifyFee))) (or (or (pair %Swap (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))) (pair %add_liquidity (address %recipient) (pair (nat %token1_max) (nat %token2_max)))) (or (pair %forwardFee (nat %epoch) (address %feeDistributor)) (pair %remove_liquidity (pair (nat %lpAmount) (address %recipient)) (pair (nat %token1_min) (nat %token2_min))))));
                   storage   (pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))));
                   code
                     {
                       # Private variable: square_root # pair @parameter @storage
                       LAMBDA
                         nat
                         nat
                         {
                           # sp.verify(_x0 >= 0, 'Negative_Value') # nat
                           DUP;        # nat : nat
                           PUSH nat 0; # nat : nat : nat
                           SWAP;       # nat : nat : nat
                           COMPARE;    # int : nat
                           GE;         # bool : nat
                           IF
                             {}
                             {
                               PUSH string "Negative_Value"; # string : nat
                               FAILWITH;   # FAILED
                             }; # nat
                           # y = sp.local("y", _x0) # nat
                           DUP;        # nat : nat
                           # while (y.value * y.value) > _x0 : ... # nat : nat
                           DUP;        # nat : nat : nat
                           DUG 2;      # nat : nat : nat
                           SWAP;       # nat : nat : nat
                           DUP;        # nat : nat : nat : nat
                           DUP;        # nat : nat : nat : nat : nat
                           DUG 3;      # nat : nat : nat : nat : nat
                           MUL;        # nat : nat : nat : nat
                           COMPARE;    # int : nat : nat
                           GT;         # bool : nat : nat
                           LOOP
                             {
                               # y.value = ((_x0 // y.value) + y.value) // 2 # nat : nat
                               PUSH nat 2; # nat : nat : nat
                               SWAP;       # nat : nat : nat
                               DUP;        # nat : nat : nat : nat
                               DUP 4;      # nat : nat : nat : nat : nat
                               EDIV;       # option (pair nat nat) : nat : nat : nat
                               IF_NONE
                                 {
                                   PUSH int 104; # int : nat : nat : nat
                                   FAILWITH;   # FAILED
                                 }
                                 {
                                   CAR;        # nat : nat : nat : nat
                                 }; # nat : nat : nat : nat
                               ADD;        # nat : nat : nat
                               EDIV;       # option (pair nat nat) : nat
                               IF_NONE
                                 {
                                   PUSH int 104; # int : nat
                                   FAILWITH;   # FAILED
                                 }
                                 {
                                   CAR;        # nat : nat
                                 }; # nat : nat
                               SWAP;       # nat : nat
                               # check for next loop: (y.value * y.value) > _x0 # nat : nat
                               DUP;        # nat : nat : nat
                               DUG 2;      # nat : nat : nat
                               SWAP;       # nat : nat : nat
                               DUP;        # nat : nat : nat : nat
                               DUP;        # nat : nat : nat : nat : nat
                               DUG 3;      # nat : nat : nat : nat : nat
                               MUL;        # nat : nat : nat : nat
                               COMPARE;    # int : nat : nat
                               GT;         # bool : nat : nat
                             }; # nat : nat
                           SWAP;       # nat : nat
                           # sp.verify(((y.value * y.value) <= _x0) & (_x0 < ((y.value + 1) * (y.value + 1)))) # nat : nat
                           DUP;        # nat : nat : nat
                           DUG 2;      # nat : nat : nat
                           SWAP;       # nat : nat : nat
                           DUP;        # nat : nat : nat : nat
                           DUP;        # nat : nat : nat : nat : nat
                           DUG 3;      # nat : nat : nat : nat : nat
                           MUL;        # nat : nat : nat : nat
                           COMPARE;    # int : nat : nat
                           LE;         # bool : nat : nat
                           IF
                             {
                               DUP;        # nat : nat : nat
                               PUSH nat 1; # nat : nat : nat : nat
                               ADD;        # nat : nat : nat
                               PUSH nat 1; # nat : nat : nat : nat
                               DUP 3;      # nat : nat : nat : nat : nat
                               ADD;        # nat : nat : nat : nat
                               MUL;        # nat : nat : nat
                               DIG 2;      # nat : nat : nat
                               COMPARE;    # int : nat
                               LT;         # bool : nat
                             }
                             {
                               SWAP;       # nat : nat
                               DROP;       # nat
                               PUSH bool False; # bool : nat
                             }; # bool : nat
                           IF
                             {}
                             {
                               PUSH string "WrongCondition: ((y.value * y.value) <= _x0) & (_x0 < ((y.value + 1) * (y.value + 1)))"; # string : nat
                               FAILWITH;   # FAILED
                             }; # nat
                           # sp.result(y.value) # nat
                         }; # lambda nat nat : pair @parameter @storage
                       SWAP;       # pair @parameter @storage : lambda nat nat
                       UNPAIR;     # @parameter : @storage : lambda nat nat
                       IF_LEFT
                         {
                           DIG 2;      # lambda nat nat : @parameter.left : @storage
                           DROP;       # @parameter.left : @storage
                           IF_LEFT
                             {
                               IF_LEFT
                                 {
                                   SWAP;       # @storage : @parameter%ChangeAdmin
                                   # == ChangeAdmin ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage : @parameter%ChangeAdmin
                                   DUP;        # @storage : @storage : @parameter%ChangeAdmin
                                   DUG 2;      # @storage : @parameter%ChangeAdmin : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%ChangeAdmin : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : @parameter%ChangeAdmin : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @parameter%ChangeAdmin : @storage
                                   CAR;        # address : @parameter%ChangeAdmin : @storage
                                   SENDER;     # @sender : address : @parameter%ChangeAdmin : @storage
                                   COMPARE;    # int : @parameter%ChangeAdmin : @storage
                                   EQ;         # bool : @parameter%ChangeAdmin : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @parameter%ChangeAdmin : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ChangeAdmin : @storage
                                   SWAP;       # @storage : @parameter%ChangeAdmin
                                   # self.data.admin = params # @storage : @parameter%ChangeAdmin
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   UNPAIR;     # pair (address %admin) (nat %lpFee) : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   CDR;        # nat : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ChangeAdmin
                                   DIG 4;      # @parameter%ChangeAdmin : nat : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair @parameter%ChangeAdmin nat : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair @parameter%ChangeAdmin nat) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair @parameter%ChangeAdmin nat) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair @parameter%ChangeAdmin nat) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }
                                 {
                                   DROP;       # @storage
                                   # == ChangeState ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage
                                   DUP;        # @storage : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @storage
                                   CAR;        # address : @storage
                                   SENDER;     # @sender : address : @storage
                                   COMPARE;    # int : @storage
                                   EQ;         # bool : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @storage
                                       FAILWITH;   # FAILED
                                     }; # @storage
                                   # self.data.paused = ~ self.data.paused # @storage
                                   DUP;        # @storage : @storage
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @storage
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @storage
                                   SWAP;       # pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @storage
                                   UNPAIR;     # pair (bool %paused) (bool %state) : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @storage
                                   CDR;        # bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @storage
                                   DIG 4;      # @storage : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   GET 3;      # pair (bool %paused) (bool %state) : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   CAR;        # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   NOT;        # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair bool bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   SWAP;       # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }; # pair (pair (pair (pair address nat) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                             }
                             {
                               IF_LEFT
                                 {
                                   SWAP;       # @storage : @parameter%ChangeSystem
                                   # == ChangeSystem ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage : @parameter%ChangeSystem
                                   DUP;        # @storage : @storage : @parameter%ChangeSystem
                                   DUG 2;      # @storage : @parameter%ChangeSystem : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%ChangeSystem : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : @parameter%ChangeSystem : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @parameter%ChangeSystem : @storage
                                   CAR;        # address : @parameter%ChangeSystem : @storage
                                   SENDER;     # @sender : address : @parameter%ChangeSystem : @storage
                                   COMPARE;    # int : @parameter%ChangeSystem : @storage
                                   EQ;         # bool : @parameter%ChangeSystem : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @parameter%ChangeSystem : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ChangeSystem : @storage
                                   # self.data.voterContract = sp.some(params) # @parameter%ChangeSystem : @storage
                                   SOME;       # option address : @storage
                                   UPDATE 10;  # @storage
                                   # self.data.state = True # @storage
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   SWAP;       # pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   UNPAIR;     # pair (bool %paused) (bool %state) : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   CAR;        # bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PUSH bool True; # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   SWAP;       # bool : bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair bool bool : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   SWAP;       # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }
                                 {
                                   SWAP;       # @storage : @parameter%ModifyFee
                                   # == ModifyFee ==
                                   # sp.verify(sp.sender == self.data.admin, 'Plenty_Network_Not_Admin') # @storage : @parameter%ModifyFee
                                   DUP;        # @storage : @storage : @parameter%ModifyFee
                                   DUG 2;      # @storage : @parameter%ModifyFee : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%ModifyFee : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : @parameter%ModifyFee : @storage
                                   CAR;        # pair (address %admin) (nat %lpFee) : @parameter%ModifyFee : @storage
                                   CAR;        # address : @parameter%ModifyFee : @storage
                                   SENDER;     # @sender : address : @parameter%ModifyFee : @storage
                                   COMPARE;    # int : @parameter%ModifyFee : @storage
                                   EQ;         # bool : @parameter%ModifyFee : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Admin"; # string : @parameter%ModifyFee : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ModifyFee : @storage
                                   # sp.verify(params >= 100) # @parameter%ModifyFee : @storage
                                   DUP;        # @parameter%ModifyFee : @parameter%ModifyFee : @storage
                                   PUSH nat 100; # nat : @parameter%ModifyFee : @parameter%ModifyFee : @storage
                                   SWAP;       # @parameter%ModifyFee : nat : @parameter%ModifyFee : @storage
                                   COMPARE;    # int : @parameter%ModifyFee : @storage
                                   GE;         # bool : @parameter%ModifyFee : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: params >= 100"; # string : @parameter%ModifyFee : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%ModifyFee : @storage
                                   SWAP;       # @storage : @parameter%ModifyFee
                                   # self.data.lpFee = params # @storage : @parameter%ModifyFee
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ModifyFee
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ModifyFee
                                   UNPAIR;     # pair (address %admin) (nat %lpFee) : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ModifyFee
                                   CAR;        # address : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : @parameter%ModifyFee
                                   DIG 4;      # @parameter%ModifyFee : address : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   SWAP;       # address : @parameter%ModifyFee : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair address @parameter%ModifyFee : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair address @parameter%ModifyFee) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair address @parameter%ModifyFee) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))
                                   PAIR;       # pair (pair (pair (pair address @parameter%ModifyFee) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }; # pair (pair (pair (pair address nat) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                             }; # pair (pair (pair (pair address nat) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                           NIL operation; # list operation : pair (pair (pair (pair address nat) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair bool bool) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                         }
                         {
                           IF_LEFT
                             {
                               IF_LEFT
                                 {
                                   SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                   # == Swap ==
                                   # sp.verify(~ self.data.paused, 'Plenty_Network_Paused_State') # @storage : @parameter%Swap : lambda nat nat
                                   DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                   DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%Swap : @storage : lambda nat nat
                                   GET 3;      # pair (bool %paused) (bool %state) : @parameter%Swap : @storage : lambda nat nat
                                   CAR;        # bool : @parameter%Swap : @storage : lambda nat nat
                                   IF
                                     {
                                       PUSH string "Plenty_Network_Paused_State"; # string : @parameter%Swap : @storage : lambda nat nat
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @parameter%Swap : @storage : lambda nat nat
                                   # sp.verify(params.tokenAmountIn > 0, 'Plenty_Network_Zero_Swap') # @parameter%Swap : @storage : lambda nat nat
                                   DUP;        # @parameter%Swap : @parameter%Swap : @storage : lambda nat nat
                                   GET 6;      # nat : @parameter%Swap : @storage : lambda nat nat
                                   PUSH nat 0; # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                   LT;         # bool : @parameter%Swap : @storage : lambda nat nat
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Zero_Swap"; # string : @parameter%Swap : @storage : lambda nat nat
                                       FAILWITH;   # FAILED
                                     }; # @parameter%Swap : @storage : lambda nat nat
                                   SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                   # sp.verify(((params.requiredTokenAddress == self.data.token1Address) & (params.requiredTokenId == self.data.token1Id)) | ((params.requiredTokenAddress == self.data.token2Address) & (params.requiredTokenId == self.data.token2Id)), 'Plenty_Network_Invalid_Pair') # @storage : @parameter%Swap : lambda nat nat
                                   DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                   DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%Swap : @storage : lambda nat nat
                                   GET 5;      # address : @parameter%Swap : @storage : lambda nat nat
                                   SWAP;       # @parameter%Swap : address : @storage : lambda nat nat
                                   DUP;        # @parameter%Swap : @parameter%Swap : address : @storage : lambda nat nat
                                   DUG 2;      # @parameter%Swap : address : @parameter%Swap : @storage : lambda nat nat
                                   GET 3;      # address : address : @parameter%Swap : @storage : lambda nat nat
                                   COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                   EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                   IF
                                     {
                                       SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                       DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                       DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # @parameter%Swap : nat : @storage : lambda nat nat
                                       DUP;        # @parameter%Swap : @parameter%Swap : nat : @storage : lambda nat nat
                                       DUG 2;      # @parameter%Swap : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 5;      # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                       EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                     }
                                     {
                                       PUSH bool False; # bool : @parameter%Swap : @storage : lambda nat nat
                                     }; # bool : @parameter%Swap : @storage : lambda nat nat
                                   IF
                                     {
                                       PUSH bool True; # bool : @parameter%Swap : @storage : lambda nat nat
                                     }
                                     {
                                       SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                       DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                       DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @parameter%Swap : @storage : lambda nat nat
                                       GET 5;      # address : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # @parameter%Swap : address : @storage : lambda nat nat
                                       DUP;        # @parameter%Swap : @parameter%Swap : address : @storage : lambda nat nat
                                       DUG 2;      # @parameter%Swap : address : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # address : address : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                       EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                       IF
                                         {
                                           SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                           DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                           DUG 2;      # @storage : @parameter%Swap : @storage : lambda nat nat
                                           GET 5;      # pair (nat %token2Fee) (nat %token2Id) : @parameter%Swap : @storage : lambda nat nat
                                           CDR;        # nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # @parameter%Swap : nat : @storage : lambda nat nat
                                           DUP;        # @parameter%Swap : @parameter%Swap : nat : @storage : lambda nat nat
                                           DUG 2;      # @parameter%Swap : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 5;      # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           COMPARE;    # int : @parameter%Swap : @storage : lambda nat nat
                                           EQ;         # bool : @parameter%Swap : @storage : lambda nat nat
                                         }
                                         {
                                           PUSH bool False; # bool : @parameter%Swap : @storage : lambda nat nat
                                         }; # bool : @parameter%Swap : @storage : lambda nat nat
                                     }; # bool : @parameter%Swap : @storage : lambda nat nat
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Invalid_Pair"; # string : @parameter%Swap : @storage : lambda nat nat
                                       FAILWITH;   # FAILED
                                     }; # @parameter%Swap : @storage : lambda nat nat
                                   SWAP;       # @storage : @parameter%Swap : lambda nat nat
                                   # token1PoolNew = sp.local("token1PoolNew", self.data.token1Pool * self.data.token1Precision) # @storage : @parameter%Swap : lambda nat nat
                                   DUP;        # @storage : @storage : @parameter%Swap : lambda nat nat
                                   GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @storage : @parameter%Swap : lambda nat nat
                                   GET 3;      # nat : @storage : @parameter%Swap : lambda nat nat
                                   SWAP;       # @storage : nat : @parameter%Swap : lambda nat nat
                                   DUP;        # @storage : @storage : nat : @parameter%Swap : lambda nat nat
                                   DUG 3;      # @storage : nat : @parameter%Swap : @storage : lambda nat nat
                                   GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : @parameter%Swap : @storage : lambda nat nat
                                   CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : @parameter%Swap : @storage : lambda nat nat
                                   CDR;        # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   MUL;        # nat : @parameter%Swap : @storage : lambda nat nat
                                   # token2PoolNew = sp.local("token2PoolNew", self.data.token2Pool * self.data.token2Precision) # nat : @parameter%Swap : @storage : lambda nat nat
                                   DIG 2;      # @storage : nat : @parameter%Swap : lambda nat nat
                                   DUP;        # @storage : @storage : nat : @parameter%Swap : lambda nat nat
                                   GET 9;      # nat : @storage : nat : @parameter%Swap : lambda nat nat
                                   SWAP;       # @storage : nat : nat : @parameter%Swap : lambda nat nat
                                   DUP;        # @storage : @storage : nat : nat : @parameter%Swap : lambda nat nat
                                   DUG 4;      # @storage : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   GET 7;      # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   MUL;        # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   # if (params.requiredTokenAddress == self.data.token1Address) & (params.requiredTokenId == self.data.token1Id): # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   GET 5;      # address : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   DUP 4;      # @parameter%Swap : address : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   GET 3;      # address : address : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   COMPARE;    # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   EQ;         # bool : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   IF
                                     {
                                       DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # @parameter%Swap : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 5;      # nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       EQ;         # bool : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                     }
                                     {
                                       PUSH bool False; # bool : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                     }; # bool : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                   IF
                                     {
                                       # rounds = sp.local("rounds", 5) # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH int 5; # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # dy = sp.local("dy", 0) # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH nat 0; # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # new_util = sp.local("new_util", sp.record(first = abs(sp.to_int(((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))))) * ((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))))) - (((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))) * ((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))))), second = 8 * (abs(((((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) + sp.to_int((((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))))))) # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # @storage : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # @parameter%Swap : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       INT;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @storage : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @parameter%Swap : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @storage : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @parameter%Swap : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH nat 8; # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @storage : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       INT;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PAIR;       # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # new_u = sp.local("new_u", new_util.value.first) # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # pair nat nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # new_du_dy = sp.local("new_du_dy", new_util.value.second) # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # pair nat nat : pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # pair nat nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CDR;        # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # while rounds.value != 0 : ... # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH int 0; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # int : int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       NEQ;        # bool : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       LOOP
                                         {
                                           DIG 2;      # pair nat nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DROP 3;     # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # new_util.value = sp.record(first = abs(sp.to_int(((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))))) * ((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))))) - (((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))) * ((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))))), second = 8 * (abs(((((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value))))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) - (abs(token1PoolNew.value - dy.value)))) + sp.to_int((((((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value)))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))))) * (((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))))) * ((token2PoolNew.value + (params.tokenAmountIn * self.data.token2Precision)) + (abs(token1PoolNew.value - dy.value))))))) # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # @storage : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # @parameter%Swap : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           INT;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @storage : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @parameter%Swap : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @storage : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @parameter%Swap : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PUSH nat 8; # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @storage : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           INT;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PAIR;       # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # new_u.value = new_util.value.first # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # pair nat nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # new_du_dy.value = new_util.value.second # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # pair nat nat : pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # pair nat nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           CDR;        # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # dy.value += (abs(new_u.value - (abs(sp.to_int((((token2PoolNew.value + token1PoolNew.value) * (token2PoolNew.value + token1PoolNew.value)) * ((token2PoolNew.value + token1PoolNew.value) * (token2PoolNew.value + token1PoolNew.value))) * (((token2PoolNew.value + token1PoolNew.value) * (token2PoolNew.value + token1PoolNew.value)) * ((token2PoolNew.value + token1PoolNew.value) * (token2PoolNew.value + token1PoolNew.value)))) - ((((token2PoolNew.value - token1PoolNew.value) * (token2PoolNew.value - token1PoolNew.value)) * ((token2PoolNew.value - token1PoolNew.value) * (token2PoolNew.value - token1PoolNew.value))) * (((token2PoolNew.value - token1PoolNew.value) * (token2PoolNew.value - token1PoolNew.value)) * ((token2PoolNew.value - token1PoolNew.value) * (token2PoolNew.value - token1PoolNew.value)))))))) // new_du_dy.value # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # nat : nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           INT;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           EDIV;       # option (pair nat nat) : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           IF_NONE
                                             {
                                               PUSH int 161; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                             }; # nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DIG 4;      # nat : nat : nat : nat : pair nat nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : pair nat nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 3;      # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # rounds.value -= 1 # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PUSH int 1; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DIG 5;      # int : int : nat : nat : pair nat nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : pair nat nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 4;      # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # check for next loop: rounds.value != 0 # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PUSH int 0; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # int : int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           COMPARE;    # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           NEQ;        # bool : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                         }; # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP 3;     # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # int : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP;       # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP;       # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP;       # nat : @parameter%Swap : @storage : lambda nat nat
                                       DIG 3;      # lambda nat nat : nat : @parameter%Swap : @storage
                                       DROP;       # nat : @parameter%Swap : @storage
                                       # fee = sp.local("fee", dy.value // self.data.lpFee) # nat : @parameter%Swap : @storage
                                       DUP 3;      # @storage : nat : @parameter%Swap : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : @parameter%Swap : @storage
                                       CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : @parameter%Swap : @storage
                                       CAR;        # pair (address %admin) (nat %lpFee) : nat : @parameter%Swap : @storage
                                       CDR;        # nat : nat : @parameter%Swap : @storage
                                       SWAP;       # nat : nat : @parameter%Swap : @storage
                                       DUP;        # nat : nat : nat : @parameter%Swap : @storage
                                       DUG 2;      # nat : nat : nat : @parameter%Swap : @storage
                                       EDIV;       # option (pair nat nat) : nat : @parameter%Swap : @storage
                                       IF_NONE
                                         {
                                           PUSH int 285; # int : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : @parameter%Swap : @storage
                                         }; # nat : nat : @parameter%Swap : @storage
                                       # sp.verify(((abs(dy.value - fee.value)) // self.data.token1Precision) >= params.MinimumTokenOut, 'Plenty_Network_Min_Cash_Error') # nat : nat : @parameter%Swap : @storage
                                       DUP 3;      # @parameter%Swap : nat : nat : @parameter%Swap : @storage
                                       CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : nat : @parameter%Swap : @storage
                                       CAR;        # nat : nat : nat : @parameter%Swap : @storage
                                       DUP 5;      # @storage : nat : nat : nat : @parameter%Swap : @storage
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : @parameter%Swap : @storage
                                       GET 3;      # nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 3;      # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       SUB;        # int : nat : nat : nat : nat : @parameter%Swap : @storage
                                       ABS;        # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%Swap : @storage
                                       IF_NONE
                                         {
                                           PUSH int 286; # int : nat : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%Swap : @storage
                                         }; # nat : nat : nat : nat : @parameter%Swap : @storage
                                       COMPARE;    # int : nat : nat : @parameter%Swap : @storage
                                       GE;         # bool : nat : nat : @parameter%Swap : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Min_Cash_Error"; # string : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%Swap : @storage
                                       # sp.verify(((abs(dy.value - fee.value)) // self.data.token1Precision) < self.data.token1Pool, 'Plenty_Network_Cash_Bought_Exceeds_Pool') # nat : nat : @parameter%Swap : @storage
                                       DIG 3;      # @storage : nat : nat : @parameter%Swap
                                       DUP;        # @storage : @storage : nat : nat : @parameter%Swap
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @storage : nat : nat : @parameter%Swap
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : @storage : nat : nat : @parameter%Swap
                                       CDR;        # nat : @storage : nat : nat : @parameter%Swap
                                       SWAP;       # @storage : nat : nat : nat : @parameter%Swap
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%Swap
                                       DUG 5;      # @storage : nat : nat : nat : @parameter%Swap : @storage
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : @parameter%Swap : @storage
                                       GET 3;      # nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 3;      # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       SUB;        # int : nat : nat : nat : nat : @parameter%Swap : @storage
                                       ABS;        # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%Swap : @storage
                                       IF_NONE
                                         {
                                           PUSH int 286; # int : nat : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%Swap : @storage
                                         }; # nat : nat : nat : nat : @parameter%Swap : @storage
                                       COMPARE;    # int : nat : nat : @parameter%Swap : @storage
                                       LT;         # bool : nat : nat : @parameter%Swap : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Cash_Bought_Exceeds_Pool"; # string : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%Swap : @storage
                                       # if self.data.state: # nat : nat : @parameter%Swap : @storage
                                       DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                       GET 3;      # pair (bool %paused) (bool %state) : nat : nat : @parameter%Swap : @storage
                                       CDR;        # bool : nat : nat : @parameter%Swap : @storage
                                       IF
                                         {
                                           # self.data.token1Pool = sp.as_nat(self.data.token1Pool - (dy.value // self.data.token1Precision)) # nat : nat : @parameter%Swap : @storage
                                           DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : @storage
                                           SWAP;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (nat %token1Id) (nat %token1Pool) : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           CAR;        # nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DUP 8;      # @storage : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           GET 3;      # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DUP 7;      # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           EDIV;       # option (pair nat nat) : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           IF_NONE
                                             {
                                               PUSH int 293; # int : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                             }; # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DIG 8;      # @storage : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           CDR;        # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SUB;        # int : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           ISNAT;      # option nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           IF_NONE
                                             {
                                               PUSH int 293; # int : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SWAP;       # nat : @some : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair nat @some : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                           # self.data.token1Fee += fee.value // self.data.token1Precision # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                           DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                           DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SWAP;       # pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           UNPAIR;     # pair (bool %paused) (bool %state) : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SWAP;       # pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           UNPAIR;     # address : pair (bool %token1Check) (nat %token1Fee) : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SWAP;       # pair (bool %token1Check) (nat %token1Fee) : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           UNPAIR;     # bool : nat : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SWAP;       # nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 9;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           GET 3;      # pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           GET 3;      # nat : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           DUP 8;      # nat : nat : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           EDIV;       # option (pair nat nat) : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           IF_NONE
                                             {
                                               PUSH int 294; # int : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                             }; # nat : nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           ADD;        # nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           SWAP;       # bool : nat : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair bool nat : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           SWAP;       # address : pair bool nat : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair address (pair bool nat) : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           SWAP;       # pair (bool %paused) (bool %state) : pair address (pair bool nat) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           SWAP;       # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                           DUG 3;      # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }
                                         {
                                           # self.data.token1Pool = abs(self.data.token1Pool - ((abs(dy.value - fee.value)) // self.data.token1Precision)) # nat : nat : @parameter%Swap : @storage
                                           DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : @storage
                                           SWAP;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (nat %token1Id) (nat %token1Pool) : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           CAR;        # nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DUP 8;      # @storage : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           GET 3;      # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DUP 6;      # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DUP 8;      # nat : nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           SUB;        # int : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           ABS;        # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           EDIV;       # option (pair nat nat) : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           IF_NONE
                                             {
                                               PUSH int 286; # int : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                             }; # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DIG 8;      # @storage : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           CDR;        # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SUB;        # int : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           ABS;        # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SWAP;       # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair nat nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                           DUG 3;      # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }; # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # self.data.token2Pool += params.tokenAmountIn # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 3;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       GET 7;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       DUP 5;      # @parameter%Swap : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       GET 6;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       ADD;        # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       UPDATE 7;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       DUG 3;      # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # sp.verify(params.tokenAmountIn > 0, 'Zero_Transfer') # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH nat 0; # nat : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # @parameter%Swap : nat : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 6;      # nat : nat : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       COMPARE;    # int : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GT;         # bool : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {}
                                         {
                                           PUSH string "Zero_Transfer"; # string : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # if self.data.token2Check: # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 6;      # bool : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {
                                           # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token2Id, amount = params.tokenAmountIn)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL operation; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 33; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 8;      # @parameter%Swap : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 6;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 10;     # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # pair (nat %token2Fee) (nat %token2Id) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }
                                         {
                                           # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params.tokenAmountIn), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL operation; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 57; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 6;      # @parameter%Swap : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 6;      # nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SENDER;     # @sender : @self : nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # sp.verify(((abs(dy.value - fee.value)) // self.data.token1Precision) > 0, 'Zero_Transfer') # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH nat 0; # nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # nat : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # nat : nat : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SUB;        # int : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       ABS;        # nat : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       EDIV;       # option (pair nat nat) : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 286; # int : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }; # nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       COMPARE;    # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GT;         # bool : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {}
                                         {
                                           PUSH string "Zero_Transfer"; # string : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # if self.data.token1Check: # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 7;      # bool : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {
                                           # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token1Id, amount = (abs(dy.value - fee.value)) // self.data.token1Precision)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 33; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 9;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 6;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 7;      # nat : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SUB;        # int : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           ABS;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           EDIV;       # option (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 286; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                             }; # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 8;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair nat nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 7;      # @parameter%Swap : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }
                                         {
                                           # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = (abs(dy.value - fee.value)) // self.data.token1Precision), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 57; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 7;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 4;      # nat : nat : mutez : @some : list operation : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 5;      # nat : nat : nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SUB;        # int : nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           ABS;        # nat : nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           EDIV;       # option (pair nat nat) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 286; # int : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                             }; # nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 4;      # @parameter%Swap : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CDR;        # address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }
                                     {
                                       # rounds = sp.local("rounds", 5) # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH int 5; # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # dy = sp.local("dy", 0) # int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH nat 0; # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # new_util = sp.local("new_util", sp.record(first = abs(sp.to_int(((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))))) * ((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))))) - (((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))) * ((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))))), second = 8 * (abs(((((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) + sp.to_int((((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))))))) # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # @storage : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # @parameter%Swap : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       INT;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @storage : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @parameter%Swap : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @storage : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @parameter%Swap : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH nat 8; # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @storage : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 12;     # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 11;     # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       INT;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PAIR;       # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # new_u = sp.local("new_u", new_util.value.first) # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # pair nat nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CAR;        # nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # new_du_dy = sp.local("new_du_dy", new_util.value.second) # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP;        # pair nat nat : pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUG 2;      # pair nat nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       CDR;        # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       # while rounds.value != 0 : ... # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       PUSH int 0; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DUP 6;      # int : int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       NEQ;        # bool : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       LOOP
                                         {
                                           DIG 2;      # pair nat nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DROP 3;     # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # new_util.value = sp.record(first = abs(sp.to_int(((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))))) * ((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))))) - (((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))) * ((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))))), second = 8 * (abs(((((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value))))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) - (abs(token2PoolNew.value - dy.value)))) + sp.to_int((((((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value)))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))))) * (((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))))) * ((token1PoolNew.value + (params.tokenAmountIn * self.data.token1Precision)) + (abs(token2PoolNew.value - dy.value))))))) # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # @storage : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # @parameter%Swap : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           INT;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : int : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @storage : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @parameter%Swap : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @storage : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @parameter%Swap : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # int : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PUSH nat 8; # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @storage : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 3;      # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @storage : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # @parameter%Swap : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @storage : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # @parameter%Swap : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 5;      # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @storage : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # @parameter%Swap : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @storage : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # @parameter%Swap : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           GET 6;      # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           INT;        # int : int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PAIR;       # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # new_u.value = new_util.value.first # pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # pair nat nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           CAR;        # nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SWAP;       # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # new_du_dy.value = new_util.value.second # pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # pair nat nat : pair nat nat : nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 2;      # pair nat nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           CDR;        # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # dy.value += (abs(new_u.value - (abs(sp.to_int((((token1PoolNew.value + token2PoolNew.value) * (token1PoolNew.value + token2PoolNew.value)) * ((token1PoolNew.value + token2PoolNew.value) * (token1PoolNew.value + token2PoolNew.value))) * (((token1PoolNew.value + token2PoolNew.value) * (token1PoolNew.value + token2PoolNew.value)) * ((token1PoolNew.value + token2PoolNew.value) * (token1PoolNew.value + token2PoolNew.value)))) - ((((token1PoolNew.value - token2PoolNew.value) * (token1PoolNew.value - token2PoolNew.value)) * ((token1PoolNew.value - token2PoolNew.value) * (token1PoolNew.value - token2PoolNew.value))) * (((token1PoolNew.value - token2PoolNew.value) * (token1PoolNew.value - token2PoolNew.value)) * ((token1PoolNew.value - token2PoolNew.value) * (token1PoolNew.value - token2PoolNew.value)))))))) // new_du_dy.value # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP;        # nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 7;      # nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # nat : nat : int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 8;      # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 9;      # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 10;     # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 12;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 11;     # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 13;     # nat : nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           MUL;        # nat : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           INT;        # int : int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 4;      # nat : nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ABS;        # nat : nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           EDIV;       # option (pair nat nat) : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           IF_NONE
                                             {
                                               PUSH int 161; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                             }; # nat : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DIG 4;      # nat : nat : nat : nat : pair nat nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           ADD;        # nat : nat : nat : pair nat nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 3;      # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # rounds.value -= 1 # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PUSH int 1; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DIG 5;      # int : int : nat : nat : pair nat nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           SUB;        # int : nat : nat : pair nat nat : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUG 4;      # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           # check for next loop: rounds.value != 0 # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           PUSH int 0; # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           DUP 6;      # int : int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           COMPARE;    # int : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                           NEQ;        # bool : nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                         }; # nat : nat : pair nat nat : nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP 3;     # nat : int : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # int : nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP;       # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP;       # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       SWAP;       # nat : nat : @parameter%Swap : @storage : lambda nat nat
                                       DROP;       # nat : @parameter%Swap : @storage : lambda nat nat
                                       DIG 3;      # lambda nat nat : nat : @parameter%Swap : @storage
                                       DROP;       # nat : @parameter%Swap : @storage
                                       # fee = sp.local("fee", dy.value // self.data.lpFee) # nat : @parameter%Swap : @storage
                                       DUP 3;      # @storage : nat : @parameter%Swap : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : @parameter%Swap : @storage
                                       CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : @parameter%Swap : @storage
                                       CAR;        # pair (address %admin) (nat %lpFee) : nat : @parameter%Swap : @storage
                                       CDR;        # nat : nat : @parameter%Swap : @storage
                                       SWAP;       # nat : nat : @parameter%Swap : @storage
                                       DUP;        # nat : nat : nat : @parameter%Swap : @storage
                                       DUG 2;      # nat : nat : nat : @parameter%Swap : @storage
                                       EDIV;       # option (pair nat nat) : nat : @parameter%Swap : @storage
                                       IF_NONE
                                         {
                                           PUSH int 308; # int : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : @parameter%Swap : @storage
                                         }; # nat : nat : @parameter%Swap : @storage
                                       # sp.verify(((abs(dy.value - fee.value)) // self.data.token2Precision) >= params.MinimumTokenOut, 'Plenty_Network_Min_Cash_Error') # nat : nat : @parameter%Swap : @storage
                                       DUP 3;      # @parameter%Swap : nat : nat : @parameter%Swap : @storage
                                       CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : nat : @parameter%Swap : @storage
                                       CAR;        # nat : nat : nat : @parameter%Swap : @storage
                                       DUP 5;      # @storage : nat : nat : nat : @parameter%Swap : @storage
                                       GET 9;      # nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 3;      # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       SUB;        # int : nat : nat : nat : nat : @parameter%Swap : @storage
                                       ABS;        # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%Swap : @storage
                                       IF_NONE
                                         {
                                           PUSH int 309; # int : nat : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%Swap : @storage
                                         }; # nat : nat : nat : nat : @parameter%Swap : @storage
                                       COMPARE;    # int : nat : nat : @parameter%Swap : @storage
                                       GE;         # bool : nat : nat : @parameter%Swap : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Min_Cash_Error"; # string : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%Swap : @storage
                                       # sp.verify(((abs(dy.value - fee.value)) // self.data.token2Precision) < self.data.token2Pool, 'Plenty_Network_Cash_Bought_Exceeds_Pool') # nat : nat : @parameter%Swap : @storage
                                       DIG 3;      # @storage : nat : nat : @parameter%Swap
                                       DUP;        # @storage : @storage : nat : nat : @parameter%Swap
                                       GET 7;      # nat : @storage : nat : nat : @parameter%Swap
                                       SWAP;       # @storage : nat : nat : nat : @parameter%Swap
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%Swap
                                       DUG 5;      # @storage : nat : nat : nat : @parameter%Swap : @storage
                                       GET 9;      # nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 3;      # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       SUB;        # int : nat : nat : nat : nat : @parameter%Swap : @storage
                                       ABS;        # nat : nat : nat : nat : nat : @parameter%Swap : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%Swap : @storage
                                       IF_NONE
                                         {
                                           PUSH int 309; # int : nat : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%Swap : @storage
                                         }; # nat : nat : nat : nat : @parameter%Swap : @storage
                                       COMPARE;    # int : nat : nat : @parameter%Swap : @storage
                                       LT;         # bool : nat : nat : @parameter%Swap : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Cash_Bought_Exceeds_Pool"; # string : nat : nat : @parameter%Swap : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%Swap : @storage
                                       # if self.data.state: # nat : nat : @parameter%Swap : @storage
                                       DUP 4;      # @storage : nat : nat : @parameter%Swap : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                       GET 3;      # pair (bool %paused) (bool %state) : nat : nat : @parameter%Swap : @storage
                                       CDR;        # bool : nat : nat : @parameter%Swap : @storage
                                       IF
                                         {
                                           # self.data.token2Pool = sp.as_nat(self.data.token2Pool - (dy.value // self.data.token2Precision)) # nat : nat : @parameter%Swap : @storage
                                           DIG 3;      # @storage : nat : nat : @parameter%Swap
                                           DUP;        # @storage : @storage : nat : nat : @parameter%Swap
                                           DUP;        # @storage : @storage : @storage : nat : nat : @parameter%Swap
                                           DUG 5;      # @storage : @storage : nat : nat : @parameter%Swap : @storage
                                           GET 9;      # nat : @storage : nat : nat : @parameter%Swap : @storage
                                           DUP 4;      # nat : nat : @storage : nat : nat : @parameter%Swap : @storage
                                           EDIV;       # option (pair nat nat) : @storage : nat : nat : @parameter%Swap : @storage
                                           IF_NONE
                                             {
                                               PUSH int 316; # int : @storage : nat : nat : @parameter%Swap : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : @storage : nat : nat : @parameter%Swap : @storage
                                             }; # nat : @storage : nat : nat : @parameter%Swap : @storage
                                           DIG 5;      # @storage : nat : @storage : nat : nat : @parameter%Swap
                                           GET 7;      # nat : nat : @storage : nat : nat : @parameter%Swap
                                           SUB;        # int : @storage : nat : nat : @parameter%Swap
                                           ISNAT;      # option nat : @storage : nat : nat : @parameter%Swap
                                           IF_NONE
                                             {
                                               PUSH int 316; # int : @storage : nat : nat : @parameter%Swap
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : @storage : nat : nat : @parameter%Swap
                                           UPDATE 7;   # @storage : nat : nat : @parameter%Swap
                                           # self.data.token2Fee += fee.value // self.data.token2Precision # @storage : nat : nat : @parameter%Swap
                                           DUP;        # @storage : @storage : nat : nat : @parameter%Swap
                                           DUG 4;      # @storage : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap : @storage
                                           SWAP;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           SWAP;       # pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # pair (nat %token2Fee) (nat %token2Id) : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           UNPAIR;     # nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : @storage
                                           DIG 8;      # @storage : nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           GET 9;      # nat : nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           DUP 7;      # nat : nat : nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           EDIV;       # option (pair nat nat) : nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           IF_NONE
                                             {
                                               PUSH int 317; # int : nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                             }; # nat : nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           ADD;        # nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair nat nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SWAP;       # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                           SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                           PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                           DUG 3;      # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }
                                         {
                                           # self.data.token2Pool = sp.as_nat(self.data.token2Pool - ((abs(dy.value - fee.value)) // self.data.token2Precision)) # nat : nat : @parameter%Swap : @storage
                                           DIG 3;      # @storage : nat : nat : @parameter%Swap
                                           DUP;        # @storage : @storage : nat : nat : @parameter%Swap
                                           DUP;        # @storage : @storage : @storage : nat : nat : @parameter%Swap
                                           DUG 5;      # @storage : @storage : nat : nat : @parameter%Swap : @storage
                                           GET 9;      # nat : @storage : nat : nat : @parameter%Swap : @storage
                                           DUP 3;      # nat : nat : @storage : nat : nat : @parameter%Swap : @storage
                                           DUP 5;      # nat : nat : nat : @storage : nat : nat : @parameter%Swap : @storage
                                           SUB;        # int : nat : @storage : nat : nat : @parameter%Swap : @storage
                                           ABS;        # nat : nat : @storage : nat : nat : @parameter%Swap : @storage
                                           EDIV;       # option (pair nat nat) : @storage : nat : nat : @parameter%Swap : @storage
                                           IF_NONE
                                             {
                                               PUSH int 309; # int : @storage : nat : nat : @parameter%Swap : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : @storage : nat : nat : @parameter%Swap : @storage
                                             }; # nat : @storage : nat : nat : @parameter%Swap : @storage
                                           DIG 5;      # @storage : nat : @storage : nat : nat : @parameter%Swap
                                           GET 7;      # nat : nat : @storage : nat : nat : @parameter%Swap
                                           SUB;        # int : @storage : nat : nat : @parameter%Swap
                                           ISNAT;      # option nat : @storage : nat : nat : @parameter%Swap
                                           IF_NONE
                                             {
                                               PUSH int 321; # int : @storage : nat : nat : @parameter%Swap
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : @storage : nat : nat : @parameter%Swap
                                           UPDATE 7;   # @storage : nat : nat : @parameter%Swap
                                           DUG 3;      # nat : nat : @parameter%Swap : @storage
                                         }; # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # self.data.token1Pool += params.tokenAmountIn # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 3;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                       SWAP;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       UNPAIR;     # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       UNPAIR;     # pair (nat %token1Id) (nat %token1Pool) : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       UNPAIR;     # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       SWAP;       # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       DUP 8;      # @parameter%Swap : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       GET 6;      # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       ADD;        # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       SWAP;       # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       PAIR;       # pair nat nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       PAIR;       # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       PAIR;       # pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap
                                       SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%Swap
                                       PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap
                                       DUG 3;      # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # sp.verify(params.tokenAmountIn > 0, 'Zero_Transfer') # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH nat 0; # nat : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # @parameter%Swap : nat : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 6;      # nat : nat : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       COMPARE;    # int : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GT;         # bool : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {}
                                         {
                                           PUSH string "Zero_Transfer"; # string : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # if self.data.token1Check: # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 7;      # bool : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {
                                           # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token1Id, amount = params.tokenAmountIn)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL operation; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 33; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 8;      # @parameter%Swap : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 6;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 10;     # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair nat nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }
                                         {
                                           # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params.tokenAmountIn), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL operation; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 57; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 6;      # @parameter%Swap : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 6;      # nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SENDER;     # @sender : @self : nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # sp.verify(((abs(dy.value - fee.value)) // self.data.token2Precision) > 0, 'Zero_Transfer') # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH nat 0; # nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 9;      # nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # nat : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # nat : nat : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SUB;        # int : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       ABS;        # nat : nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       EDIV;       # option (pair nat nat) : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 309; # int : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }; # nat : nat : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       COMPARE;    # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GT;         # bool : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {}
                                         {
                                           PUSH string "Zero_Transfer"; # string : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }; # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # if self.data.token2Check: # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 6;      # bool : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF
                                         {
                                           # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token2Id, amount = (abs(dy.value - fee.value)) // self.data.token2Precision)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 33; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 9;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 9;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 6;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 7;      # nat : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SUB;        # int : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           ABS;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           EDIV;       # option (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 309; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                             }; # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 8;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # pair nat nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 7;      # @parameter%Swap : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }
                                         {
                                           # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = (abs(dy.value - fee.value)) // self.data.token2Precision), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 3;      # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 5;      # address : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 57; # int : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DUP 7;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           GET 9;      # nat : mutez : @some : list operation : nat : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 4;      # nat : nat : mutez : @some : list operation : nat : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 5;      # nat : nat : nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SUB;        # int : nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           ABS;        # nat : nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           EDIV;       # option (pair nat nat) : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           IF_NONE
                                             {
                                               PUSH int 309; # int : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                             }; # nat : mutez : @some : list operation : @parameter%Swap : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           DIG 4;      # @parameter%Swap : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CAR;        # pair (nat %MinimumTokenOut) (address %recipient) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CDR;        # address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                         }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }
                                 {
                                   # == add_liquidity ==
                                   # token1Amount = sp.local("token1Amount", 0) # @parameter%add_liquidity : @storage : lambda nat nat
                                   PUSH nat 0; # nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   # token2Amount = sp.local("token2Amount", 0) # nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   PUSH nat 0; # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   # liquidity = sp.local("liquidity", 0)
                                   # if self.data.lqtTotal != 0: # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   PUSH nat 0; # nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   DUP 5;      # @storage : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   GET 4;      # nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   COMPARE;    # int : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   NEQ;        # bool : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                   IF
                                     {
                                       # if ((params.token1_max * self.data.token2Pool) // self.data.token1Pool) <= params.token2_max: # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DUP 3;      # @parameter%add_liquidity : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 4;      # nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DIG 4;      # @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       CDR;        # nat : @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       SWAP;       # @storage : nat : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       DUG 6;      # @storage : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 7;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DUP 6;      # @parameter%add_liquidity : nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 186; # int : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                         }; # nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       LE;         # bool : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       IF
                                         {
                                           DROP 2;     # @parameter%add_liquidity : @storage : lambda nat nat
                                           # token1Amount.value = params.token1_max # @parameter%add_liquidity : @storage : lambda nat nat
                                           DUP;        # @parameter%add_liquidity : @parameter%add_liquidity : @storage : lambda nat nat
                                           GET 3;      # nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           # token2Amount.value = (params.token1_max * self.data.token2Pool) // self.data.token1Pool # nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           DIG 2;      # @storage : nat : @parameter%add_liquidity : lambda nat nat
                                           DUP;        # @storage : @storage : nat : @parameter%add_liquidity : lambda nat nat
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @storage : nat : @parameter%add_liquidity : lambda nat nat
                                           CAR;        # pair (nat %token1Id) (nat %token1Pool) : @storage : nat : @parameter%add_liquidity : lambda nat nat
                                           CDR;        # nat : @storage : nat : @parameter%add_liquidity : lambda nat nat
                                           SWAP;       # @storage : nat : nat : @parameter%add_liquidity : lambda nat nat
                                           DUP;        # @storage : @storage : nat : nat : @parameter%add_liquidity : lambda nat nat
                                           DUG 4;      # @storage : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           GET 7;      # nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           DUP 4;      # @parameter%add_liquidity : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           GET 3;      # nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           MUL;        # nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           EDIV;       # option (pair nat nat) : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           IF_NONE
                                             {
                                               PUSH int 188; # int : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                             }; # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                         }
                                         {}; # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       # if ((params.token2_max * self.data.token1Pool) // self.data.token2Pool) <= params.token1_max: # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DUP 3;      # @parameter%add_liquidity : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DIG 4;      # @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       GET 7;      # nat : @storage : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       SWAP;       # @storage : nat : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       DUP;        # @storage : @storage : nat : nat : nat : nat : @parameter%add_liquidity : lambda nat nat
                                       DUG 6;      # @storage : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       CDR;        # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DUP 6;      # @parameter%add_liquidity : nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 4;      # nat : nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       MUL;        # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       IF_NONE
                                         {
                                           PUSH int 189; # int : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                         }; # nat : nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       COMPARE;    # int : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       LE;         # bool : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       IF
                                         {
                                           DROP 2;     # @parameter%add_liquidity : @storage : lambda nat nat
                                           DIG 2;      # lambda nat nat : @parameter%add_liquidity : @storage
                                           DROP;       # @parameter%add_liquidity : @storage
                                           # token2Amount.value = params.token2_max # @parameter%add_liquidity : @storage
                                           DUP;        # @parameter%add_liquidity : @parameter%add_liquidity : @storage
                                           GET 4;      # nat : @parameter%add_liquidity : @storage
                                           # token1Amount.value = (params.token2_max * self.data.token1Pool) // self.data.token2Pool # nat : @parameter%add_liquidity : @storage
                                           DIG 2;      # @storage : nat : @parameter%add_liquidity
                                           DUP;        # @storage : @storage : nat : @parameter%add_liquidity
                                           GET 7;      # nat : @storage : nat : @parameter%add_liquidity
                                           SWAP;       # @storage : nat : nat : @parameter%add_liquidity
                                           DUP;        # @storage : @storage : nat : nat : @parameter%add_liquidity
                                           DUG 4;      # @storage : nat : nat : @parameter%add_liquidity : @storage
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : @parameter%add_liquidity : @storage
                                           CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : nat : @parameter%add_liquidity : @storage
                                           CDR;        # nat : nat : nat : @parameter%add_liquidity : @storage
                                           DUP 4;      # @parameter%add_liquidity : nat : nat : nat : @parameter%add_liquidity : @storage
                                           GET 4;      # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                           MUL;        # nat : nat : nat : @parameter%add_liquidity : @storage
                                           EDIV;       # option (pair nat nat) : nat : @parameter%add_liquidity : @storage
                                           IF_NONE
                                             {
                                               PUSH int 191; # int : nat : @parameter%add_liquidity : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : @parameter%add_liquidity : @storage
                                             }; # nat : nat : @parameter%add_liquidity : @storage
                                           SWAP;       # nat : nat : @parameter%add_liquidity : @storage
                                         }
                                         {
                                           DIG 4;      # lambda nat nat : nat : nat : @parameter%add_liquidity : @storage
                                           DROP;       # nat : nat : @parameter%add_liquidity : @storage
                                         }; # nat : nat : @parameter%add_liquidity : @storage
                                       # sp.verify(token1Amount.value > 0, 'Plenty_Network_Invalid_LP_Ratio') # nat : nat : @parameter%add_liquidity : @storage
                                       PUSH nat 0; # nat : nat : nat : @parameter%add_liquidity : @storage
                                       DUP 3;      # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       COMPARE;    # int : nat : nat : @parameter%add_liquidity : @storage
                                       GT;         # bool : nat : nat : @parameter%add_liquidity : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Invalid_LP_Ratio"; # string : nat : nat : @parameter%add_liquidity : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%add_liquidity : @storage
                                       # sp.verify(token2Amount.value > 0, 'Plenty_Network_Invalid_LP_Ratio') # nat : nat : @parameter%add_liquidity : @storage
                                       DUP;        # nat : nat : nat : @parameter%add_liquidity : @storage
                                       PUSH nat 0; # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       COMPARE;    # int : nat : nat : @parameter%add_liquidity : @storage
                                       LT;         # bool : nat : nat : @parameter%add_liquidity : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Invalid_LP_Ratio"; # string : nat : nat : @parameter%add_liquidity : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : nat : @parameter%add_liquidity : @storage
                                       # if ((token1Amount.value * self.data.lqtTotal) // self.data.token1Pool) < ((token2Amount.value * self.data.lqtTotal) // self.data.token2Pool): # nat : nat : @parameter%add_liquidity : @storage
                                       DIG 3;      # @storage : nat : nat : @parameter%add_liquidity
                                       DUP;        # @storage : @storage : nat : nat : @parameter%add_liquidity
                                       GET 7;      # nat : @storage : nat : nat : @parameter%add_liquidity
                                       SWAP;       # @storage : nat : nat : nat : @parameter%add_liquidity
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%add_liquidity
                                       DUG 5;      # @storage : nat : nat : nat : @parameter%add_liquidity : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : nat : @parameter%add_liquidity : @storage
                                       CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : nat : nat : @parameter%add_liquidity : @storage
                                       GET 4;      # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       DUP 3;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       MUL;        # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : @parameter%add_liquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 195; # int : nat : nat : @parameter%add_liquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : @parameter%add_liquidity : @storage
                                         }; # nat : nat : nat : @parameter%add_liquidity : @storage
                                       DIG 4;      # @storage : nat : nat : nat : @parameter%add_liquidity
                                       DUP;        # @storage : @storage : nat : nat : nat : @parameter%add_liquidity
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @storage : nat : nat : nat : @parameter%add_liquidity
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : @storage : nat : nat : nat : @parameter%add_liquidity
                                       CDR;        # nat : @storage : nat : nat : nat : @parameter%add_liquidity
                                       SWAP;       # @storage : nat : nat : nat : nat : @parameter%add_liquidity
                                       DUP;        # @storage : @storage : nat : nat : nat : nat : @parameter%add_liquidity
                                       DUG 6;      # @storage : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       GET 4;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       DUP 5;      # nat : nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       MUL;        # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%add_liquidity : @storage
                                       IF_NONE
                                         {
                                           PUSH int 195; # int : nat : nat : nat : @parameter%add_liquidity : @storage
                                           FAILWITH;   # FAILED
                                         }
                                         {
                                           CAR;        # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                         }; # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                       COMPARE;    # int : nat : nat : @parameter%add_liquidity : @storage
                                       LT;         # bool : nat : nat : @parameter%add_liquidity : @storage
                                       IF
                                         {
                                           # liquidity.value = (token1Amount.value * self.data.lqtTotal) // self.data.token1Pool # nat : nat : @parameter%add_liquidity : @storage
                                           DIG 3;      # @storage : nat : nat : @parameter%add_liquidity
                                           DUP;        # @storage : @storage : nat : nat : @parameter%add_liquidity
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @storage : nat : nat : @parameter%add_liquidity
                                           CAR;        # pair (nat %token1Id) (nat %token1Pool) : @storage : nat : nat : @parameter%add_liquidity
                                           CDR;        # nat : @storage : nat : nat : @parameter%add_liquidity
                                           SWAP;       # @storage : nat : nat : nat : @parameter%add_liquidity
                                           DUP;        # @storage : @storage : nat : nat : nat : @parameter%add_liquidity
                                           DUG 5;      # @storage : nat : nat : nat : @parameter%add_liquidity : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : nat : @parameter%add_liquidity : @storage
                                           CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : nat : nat : @parameter%add_liquidity : @storage
                                           GET 4;      # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                           DUP 4;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                           MUL;        # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                           EDIV;       # option (pair nat nat) : nat : nat : @parameter%add_liquidity : @storage
                                           IF_NONE
                                             {
                                               PUSH int 196; # int : nat : nat : @parameter%add_liquidity : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : nat : @parameter%add_liquidity : @storage
                                             }; # nat : nat : nat : @parameter%add_liquidity : @storage
                                         }
                                         {
                                           # liquidity.value = (token2Amount.value * self.data.lqtTotal) // self.data.token2Pool # nat : nat : @parameter%add_liquidity : @storage
                                           DIG 3;      # @storage : nat : nat : @parameter%add_liquidity
                                           DUP;        # @storage : @storage : nat : nat : @parameter%add_liquidity
                                           GET 7;      # nat : @storage : nat : nat : @parameter%add_liquidity
                                           SWAP;       # @storage : nat : nat : nat : @parameter%add_liquidity
                                           DUP;        # @storage : @storage : nat : nat : nat : @parameter%add_liquidity
                                           DUG 5;      # @storage : nat : nat : nat : @parameter%add_liquidity : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : nat : @parameter%add_liquidity : @storage
                                           CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : nat : nat : @parameter%add_liquidity : @storage
                                           GET 4;      # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                           DUP 3;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                           MUL;        # nat : nat : nat : nat : @parameter%add_liquidity : @storage
                                           EDIV;       # option (pair nat nat) : nat : nat : @parameter%add_liquidity : @storage
                                           IF_NONE
                                             {
                                               PUSH int 198; # int : nat : nat : @parameter%add_liquidity : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {
                                               CAR;        # nat : nat : nat : @parameter%add_liquidity : @storage
                                             }; # nat : nat : nat : @parameter%add_liquidity : @storage
                                         }; # nat : nat : nat : @parameter%add_liquidity : @storage
                                     }
                                     {
                                       DROP 2;     # @parameter%add_liquidity : @storage : lambda nat nat
                                       SWAP;       # @storage : @parameter%add_liquidity : lambda nat nat
                                       # sp.verify((params.token1_max * self.data.token1Precision) == (params.token2_max * self.data.token2Precision), 'Plenty_Network_Invalid_LP_Ratio') # @storage : @parameter%add_liquidity : lambda nat nat
                                       DUP;        # @storage : @storage : @parameter%add_liquidity : lambda nat nat
                                       DUG 2;      # @storage : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 9;      # nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       SWAP;       # @parameter%add_liquidity : nat : @storage : lambda nat nat
                                       DUP;        # @parameter%add_liquidity : @parameter%add_liquidity : nat : @storage : lambda nat nat
                                       DUG 2;      # @parameter%add_liquidity : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 4;      # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       MUL;        # nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DUP 3;      # @storage : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 3;      # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       DUP 3;      # @parameter%add_liquidity : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       GET 3;      # nat : nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       MUL;        # nat : nat : @parameter%add_liquidity : @storage : lambda nat nat
                                       COMPARE;    # int : @parameter%add_liquidity : @storage : lambda nat nat
                                       EQ;         # bool : @parameter%add_liquidity : @storage : lambda nat nat
                                       IF
                                         {}
                                         {
                                           PUSH string "Plenty_Network_Invalid_LP_Ratio"; # string : @parameter%add_liquidity : @storage : lambda nat nat
                                           FAILWITH;   # FAILED
                                         }; # @parameter%add_liquidity : @storage : lambda nat nat
                                       # compute_stableSwap_203i = sp.local("compute_stableSwap_203i", self.square_root(params.token1_max * params.token2_max)) # @parameter%add_liquidity : @storage : lambda nat nat
                                       DIG 2;      # lambda nat nat : @parameter%add_liquidity : @storage
                                       SWAP;       # @parameter%add_liquidity : lambda nat nat : @storage
                                       DUP;        # @parameter%add_liquidity : @parameter%add_liquidity : lambda nat nat : @storage
                                       GET 4;      # nat : @parameter%add_liquidity : lambda nat nat : @storage
                                       SWAP;       # @parameter%add_liquidity : nat : lambda nat nat : @storage
                                       DUP;        # @parameter%add_liquidity : @parameter%add_liquidity : nat : lambda nat nat : @storage
                                       DUG 3;      # @parameter%add_liquidity : nat : lambda nat nat : @parameter%add_liquidity : @storage
                                       GET 3;      # nat : nat : lambda nat nat : @parameter%add_liquidity : @storage
                                       MUL;        # nat : lambda nat nat : @parameter%add_liquidity : @storage
                                       EXEC;       # nat : @parameter%add_liquidity : @storage
                                       # sqrt = sp.local("sqrt", 2 * compute_stableSwap_203i.value) # nat : @parameter%add_liquidity : @storage
                                       PUSH nat 2; # nat : nat : @parameter%add_liquidity : @storage
                                       MUL;        # nat : @parameter%add_liquidity : @storage
                                       # sp.verify(sqrt.value > 1000, 'Negative_Val') # nat : @parameter%add_liquidity : @storage
                                       DUP;        # nat : nat : @parameter%add_liquidity : @storage
                                       PUSH nat 1000; # nat : nat : nat : @parameter%add_liquidity : @storage
                                       COMPARE;    # int : nat : @parameter%add_liquidity : @storage
                                       LT;         # bool : nat : @parameter%add_liquidity : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Negative_Val"; # string : nat : @parameter%add_liquidity : @storage
                                           FAILWITH;   # FAILED
                                         }; # nat : @parameter%add_liquidity : @storage
                                       # liquidity.value = abs(sqrt.value - 1000) # nat : @parameter%add_liquidity : @storage
                                       PUSH nat 1000; # nat : nat : @parameter%add_liquidity : @storage
                                       SWAP;       # nat : nat : @parameter%add_liquidity : @storage
                                       SUB;        # int : @parameter%add_liquidity : @storage
                                       ABS;        # nat : @parameter%add_liquidity : @storage
                                       # self.data.lqtTotal += 1000 # nat : @parameter%add_liquidity : @storage
                                       DIG 2;      # @storage : nat : @parameter%add_liquidity
                                       UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       UNPAIR;     # pair (address %admin) (nat %lpFee) : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       SWAP;       # pair (address %lqtAddress) (nat %lqtTotal) : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       UNPAIR;     # address : nat : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       SWAP;       # nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       PUSH nat 1000; # nat : nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       ADD;        # nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       SWAP;       # address : nat : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       PAIR;       # pair address nat : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       SWAP;       # pair (address %admin) (nat %lpFee) : pair address nat : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       PAIR;       # pair (pair (address %admin) (nat %lpFee)) (pair address nat) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : @parameter%add_liquidity
                                       PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : @parameter%add_liquidity
                                       DUG 2;      # nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SWAP;       # @parameter%add_liquidity : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # token1Amount.value = params.token1_max # @parameter%add_liquidity : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP;        # @parameter%add_liquidity : @parameter%add_liquidity : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUG 2;      # @parameter%add_liquidity : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SWAP;       # nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       # token2Amount.value = params.token2_max # nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 3;      # @parameter%add_liquidity : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 4;      # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SWAP;       # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }; # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.verify(liquidity.value > 0) # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP;        # nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PUSH nat 0; # nat : nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   COMPARE;    # int : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   LT;         # bool : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: liquidity.value > 0"; # string : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.verify(token1Amount.value <= params.token1_max) # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 4;      # @parameter%add_liquidity : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 3;      # nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 4;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   COMPARE;    # int : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   LE;         # bool : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token1Amount.value <= params.token1_max"; # string : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.verify(token2Amount.value <= params.token2_max) # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 4;      # @parameter%add_liquidity : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 4;      # nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 3;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   COMPARE;    # int : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   LE;         # bool : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token2Amount.value <= params.token2_max"; # string : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.verify(token1Amount.value > 0, 'Zero_Transfer') # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PUSH nat 0; # nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 4;      # nat : nat : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   COMPARE;    # int : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GT;         # bool : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # if self.data.token1Check: # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 7;      # bool : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token1Id, amount = token1Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL operation; # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 8;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 11;     # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = token1Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL operation; # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # nat : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SENDER;     # @sender : @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }; # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.verify(token2Amount.value > 0, 'Zero_Transfer') # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PUSH nat 0; # nat : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 4;      # nat : nat : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   COMPARE;    # int : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GT;         # bool : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # if self.data.token2Check: # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 6;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 6;      # bool : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.token2Id, amount = token2Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 7;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 11;     # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # pair (nat %token2Fee) (nat %token2Id) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = token2Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 5;      # nat : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SENDER;     # @sender : @self : nat : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }; # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # self.data.token1Pool += token1Amount.value # list operation : nat : nat : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DIG 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : nat : @parameter%add_liquidity
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : nat : nat : @parameter%add_liquidity
                                   SWAP;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : nat : @parameter%add_liquidity
                                   UNPAIR;     # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : nat : @parameter%add_liquidity
                                   UNPAIR;     # pair (nat %token1Id) (nat %token1Pool) : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : nat : @parameter%add_liquidity
                                   UNPAIR;     # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : nat : @parameter%add_liquidity
                                   SWAP;       # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : nat : @parameter%add_liquidity
                                   DIG 8;      # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%add_liquidity
                                   ADD;        # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%add_liquidity
                                   SWAP;       # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%add_liquidity
                                   PAIR;       # pair nat nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%add_liquidity
                                   PAIR;       # pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%add_liquidity
                                   PAIR;       # pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%add_liquidity
                                   SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : nat : @parameter%add_liquidity
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%add_liquidity
                                   # self.data.token2Pool += token2Amount.value # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%add_liquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%add_liquidity
                                   GET 7;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%add_liquidity
                                   DIG 4;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity
                                   ADD;        # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity
                                   UPDATE 7;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity
                                   # self.data.lqtTotal += liquidity.value # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair address nat) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   UNPAIR;     # pair (address %admin) (nat %lpFee) : pair address nat : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   SWAP;       # pair address nat : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   UNPAIR;     # address : nat : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   SWAP;       # nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   DUP 7;      # nat : nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   ADD;        # nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   SWAP;       # address : nat : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   PAIR;       # pair address nat : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   SWAP;       # pair (address %admin) (nat %lpFee) : pair address nat : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   PAIR;       # pair (pair (address %admin) (nat %lpFee)) (pair address nat) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation : nat : @parameter%add_liquidity
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity
                                   # sp.transfer(sp.record(address = params.recipient, value = liquidity.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.lqtAddress, entry_point='mint').open_some()) # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity
                                   DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair address nat) : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 3;      # address : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF_NONE
                                     {
                                       PUSH int 133; # int : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DIG 3;      # nat : mutez : @some : list operation : @parameter%add_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DIG 4;      # @parameter%add_liquidity : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PAIR;       # pair address nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                             }
                             {
                               IF_LEFT
                                 {
                                   DIG 2;      # lambda nat nat : @parameter%forwardFee : @storage
                                   DROP;       # @parameter%forwardFee : @storage
                                   SWAP;       # @storage : @parameter%forwardFee
                                   # == forwardFee ==
                                   # sp.verify(self.data.state, 'Plenty_Network_Invalid_State') # @storage : @parameter%forwardFee
                                   DUP;        # @storage : @storage : @parameter%forwardFee
                                   DUG 2;      # @storage : @parameter%forwardFee : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%forwardFee : @storage
                                   GET 3;      # pair (bool %paused) (bool %state) : @parameter%forwardFee : @storage
                                   CDR;        # bool : @parameter%forwardFee : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Invalid_State"; # string : @parameter%forwardFee : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%forwardFee : @storage
                                   SWAP;       # @storage : @parameter%forwardFee
                                   # sp.verify(sp.sender == self.data.voterContract.open_some(), 'Plenty_Network_Not_Voter') # @storage : @parameter%forwardFee
                                   DUP;        # @storage : @storage : @parameter%forwardFee
                                   DUG 2;      # @storage : @parameter%forwardFee : @storage
                                   GET 10;     # option address : @parameter%forwardFee : @storage
                                   IF_NONE
                                     {
                                       PUSH int 386; # int : @parameter%forwardFee : @storage
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : @parameter%forwardFee : @storage
                                   SENDER;     # @sender : @some : @parameter%forwardFee : @storage
                                   COMPARE;    # int : @parameter%forwardFee : @storage
                                   EQ;         # bool : @parameter%forwardFee : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Voter"; # string : @parameter%forwardFee : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%forwardFee : @storage
                                   # if self.data.token1Fee != 0: # @parameter%forwardFee : @storage
                                   PUSH nat 0; # nat : @parameter%forwardFee : @storage
                                   DUP 3;      # @storage : nat : @parameter%forwardFee : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : @parameter%forwardFee : @storage
                                   GET 8;      # nat : nat : @parameter%forwardFee : @storage
                                   COMPARE;    # int : @parameter%forwardFee : @storage
                                   NEQ;        # bool : @parameter%forwardFee : @storage
                                   IF
                                     {
                                       # sp.verify(self.data.token1Fee > 0, 'Zero_Transfer') # @parameter%forwardFee : @storage
                                       PUSH nat 0; # nat : @parameter%forwardFee : @storage
                                       DUP 3;      # @storage : nat : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : @parameter%forwardFee : @storage
                                       GET 8;      # nat : nat : @parameter%forwardFee : @storage
                                       COMPARE;    # int : @parameter%forwardFee : @storage
                                       GT;         # bool : @parameter%forwardFee : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Zero_Transfer"; # string : @parameter%forwardFee : @storage
                                           FAILWITH;   # FAILED
                                         }; # @parameter%forwardFee : @storage
                                       SWAP;       # @storage : @parameter%forwardFee
                                       # if self.data.token1Check: # @storage : @parameter%forwardFee
                                       DUP;        # @storage : @storage : @parameter%forwardFee
                                       DUG 2;      # @storage : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%forwardFee : @storage
                                       GET 7;      # bool : @parameter%forwardFee : @storage
                                       IF
                                         {
                                           # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.feeDistributor, token_id = self.data.token1Id, amount = self.data.token1Fee)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # @parameter%forwardFee : @storage
                                           NIL operation; # list operation : @parameter%forwardFee : @storage
                                           DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # address : list operation : @parameter%forwardFee : @storage
                                           CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%forwardFee : @storage
                                           IF_NONE
                                             {
                                               PUSH int 33; # int : list operation : @parameter%forwardFee : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : @parameter%forwardFee : @storage
                                           PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                           NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DIG 6;      # @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           GET 8;      # nat : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           SWAP;       # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           DUG 8;      # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DUP 8;      # @parameter%forwardFee : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list operation : @parameter%forwardFee : @storage
                                         }
                                         {
                                           # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.feeDistributor, value = self.data.token1Fee), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # @parameter%forwardFee : @storage
                                           NIL operation; # list operation : @parameter%forwardFee : @storage
                                           DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # address : list operation : @parameter%forwardFee : @storage
                                           CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%forwardFee : @storage
                                           IF_NONE
                                             {
                                               PUSH int 57; # int : list operation : @parameter%forwardFee : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : @parameter%forwardFee : @storage
                                           PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DUP 5;      # @storage : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           GET 8;      # nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DUP 5;      # @parameter%forwardFee : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CDR;        # address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list operation : @parameter%forwardFee : @storage
                                         }; # list operation : @parameter%forwardFee : @storage
                                     }
                                     {
                                       NIL operation; # list operation : @parameter%forwardFee : @storage
                                     }; # list operation : @parameter%forwardFee : @storage
                                   # if self.data.token2Fee != 0: # list operation : @parameter%forwardFee : @storage
                                   PUSH nat 0; # nat : list operation : @parameter%forwardFee : @storage
                                   DUP 4;      # @storage : nat : list operation : @parameter%forwardFee : @storage
                                   GET 5;      # pair (nat %token2Fee) (nat %token2Id) : nat : list operation : @parameter%forwardFee : @storage
                                   CAR;        # nat : nat : list operation : @parameter%forwardFee : @storage
                                   COMPARE;    # int : list operation : @parameter%forwardFee : @storage
                                   NEQ;        # bool : list operation : @parameter%forwardFee : @storage
                                   IF
                                     {
                                       # sp.verify(self.data.token2Fee > 0, 'Zero_Transfer') # list operation : @parameter%forwardFee : @storage
                                       PUSH nat 0; # nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # pair (nat %token2Fee) (nat %token2Id) : nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # nat : nat : list operation : @parameter%forwardFee : @storage
                                       COMPARE;    # int : list operation : @parameter%forwardFee : @storage
                                       GT;         # bool : list operation : @parameter%forwardFee : @storage
                                       IF
                                         {}
                                         {
                                           PUSH string "Zero_Transfer"; # string : list operation : @parameter%forwardFee : @storage
                                           FAILWITH;   # FAILED
                                         }; # list operation : @parameter%forwardFee : @storage
                                       # if self.data.token2Check: # list operation : @parameter%forwardFee : @storage
                                       DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : @parameter%forwardFee : @storage
                                       GET 6;      # bool : list operation : @parameter%forwardFee : @storage
                                       IF
                                         {
                                           # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.feeDistributor, token_id = self.data.token2Id, amount = self.data.token2Fee)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : @parameter%forwardFee : @storage
                                           DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # address : list operation : @parameter%forwardFee : @storage
                                           CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%forwardFee : @storage
                                           IF_NONE
                                             {
                                               PUSH int 33; # int : list operation : @parameter%forwardFee : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : @parameter%forwardFee : @storage
                                           PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                           NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DIG 6;      # @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           GET 5;      # pair (nat %token2Fee) (nat %token2Id) : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           CAR;        # nat : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           SWAP;       # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           DUP;        # @storage : @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee
                                           DUG 8;      # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # pair (nat %token2Fee) (nat %token2Id) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DUP 8;      # @parameter%forwardFee : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list operation : @parameter%forwardFee : @storage
                                         }
                                         {
                                           # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.feeDistributor, value = self.data.token2Fee), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : @parameter%forwardFee : @storage
                                           DUP 3;      # @storage : list operation : @parameter%forwardFee : @storage
                                           GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # address : list operation : @parameter%forwardFee : @storage
                                           CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%forwardFee : @storage
                                           IF_NONE
                                             {
                                               PUSH int 57; # int : list operation : @parameter%forwardFee : @storage
                                               FAILWITH;   # FAILED
                                             }
                                             {}; # @some : list operation : @parameter%forwardFee : @storage
                                           PUSH mutez 0; # mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DUP 5;      # @storage : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           GET 5;      # pair (nat %token2Fee) (nat %token2Id) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CAR;        # nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           DUP 5;      # @parameter%forwardFee : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           CDR;        # address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @parameter%forwardFee : @storage
                                           TRANSFER_TOKENS; # operation : list operation : @parameter%forwardFee : @storage
                                           CONS;       # list operation : @parameter%forwardFee : @storage
                                         }; # list operation : @parameter%forwardFee : @storage
                                     }
                                     {}; # list operation : @parameter%forwardFee : @storage
                                   # fees_map = sp.local("fees_map", {}, sp.TMap(sp.TVariant(fa12 = sp.TAddress, fa2 = sp.TPair(sp.TAddress, sp.TNat), tez = sp.TUnit).layout(("fa12", ("fa2", "tez"))), sp.TNat)) # list operation : @parameter%forwardFee : @storage
                                   EMPTY_MAP (or address (or (pair address nat) unit)) nat; # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   # if self.data.token1Check: # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   GET 7;      # bool : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   IF
                                     {
                                       # fees_map.value[variant('fa2', (self.data.token1Address, self.data.token1Id))] = self.data.token1Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 8;      # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DIG 4;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       DUP;        # @storage : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       CAR;        # nat : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       SWAP;       # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       DUP;        # @storage : @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       DUG 6;      # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # address : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       PAIR;       # pair address nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       LEFT unit;  # or (pair address nat) unit : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       RIGHT address; # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                     }
                                     {
                                       # fees_map.value[variant('fa12', self.data.token1Address)] = self.data.token1Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 8;      # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 5;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # address : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       LEFT (or (pair address nat) unit); # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                     }; # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   # if self.data.token2Check: # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   GET 6;      # bool : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   IF
                                     {
                                       # fees_map.value[variant('fa2', (self.data.token2Address, self.data.token2Id))] = self.data.token2Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # pair (nat %token2Fee) (nat %token2Id) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DIG 4;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       DUP;        # @storage : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       GET 5;      # pair (nat %token2Fee) (nat %token2Id) : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       CDR;        # nat : @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       SWAP;       # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       DUP;        # @storage : @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee
                                       DUG 6;      # @storage : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # address : nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       PAIR;       # pair address nat : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       LEFT unit;  # or (pair address nat) unit : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       RIGHT address; # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                     }
                                     {
                                       # fees_map.value[variant('fa12', self.data.token2Address)] = self.data.token2Fee # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 4;      # @storage : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # pair (nat %token2Fee) (nat %token2Id) : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       CAR;        # nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       SOME;       # option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       DUP 5;      # @storage : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       GET 5;      # address : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       LEFT (or (pair address nat) unit); # or address (or (pair address nat) unit) : option nat : map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                       UPDATE;     # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                     }; # map (or address (or (pair address nat) unit)) nat : list operation : @parameter%forwardFee : @storage
                                   SWAP;       # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                   # sp.transfer(sp.record(epoch = params.epoch, fees = fees_map.value), sp.tez(0), sp.contract(sp.TRecord(epoch = sp.TNat, fees = sp.TMap(sp.TVariant(fa12 = sp.TAddress, fa2 = sp.TPair(sp.TAddress, sp.TNat), tez = sp.TUnit).layout(("fa12", ("fa2", "tez"))), sp.TNat)).layout(("epoch", "fees")), params.feeDistributor, entry_point='add_fees').open_some()) # list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                   DUP 3;      # @parameter%forwardFee : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                   CDR;        # address : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                   CONTRACT %add_fees (pair (nat %epoch) (map %fees (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat)); # option (contract (pair (nat %epoch) (map %fees (or (address %fa12) (or (pair %fa2 address nat) (unit %tez))) nat))) : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                   IF_NONE
                                     {
                                       PUSH int 423; # int : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                   PUSH mutez 0; # mutez : @some : list operation : map (or address (or (pair address nat) unit)) nat : @parameter%forwardFee : @storage
                                   DIG 3;      # map (or address (or (pair address nat) unit)) nat : mutez : @some : list operation : @parameter%forwardFee : @storage
                                   DIG 4;      # @parameter%forwardFee : map (or address (or (pair address nat) unit)) nat : mutez : @some : list operation : @storage
                                   CAR;        # nat : map (or address (or (pair address nat) unit)) nat : mutez : @some : list operation : @storage
                                   PAIR;       # pair nat (map (or address (or (pair address nat) unit)) nat) : mutez : @some : list operation : @storage
                                   TRANSFER_TOKENS; # operation : list operation : @storage
                                   CONS;       # list operation : @storage
                                   SWAP;       # @storage : list operation
                                   # self.data.token1Fee = 0 # @storage : list operation
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   UNPAIR;     # pair (bool %paused) (bool %state) : pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)) : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   UNPAIR;     # address : pair (bool %token1Check) (nat %token1Fee) : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # pair (bool %token1Check) (nat %token1Fee) : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   CAR;        # bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   PUSH nat 0; # nat : bool : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # bool : nat : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   PAIR;       # pair bool nat : address : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # address : pair bool nat : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   PAIR;       # pair address (pair bool nat) : pair (bool %paused) (bool %state) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # pair (bool %paused) (bool %state) : pair address (pair bool nat) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   PAIR;       # pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)) : pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   SWAP;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   # self.data.token2Fee = 0 # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   UNPAIR;     # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   SWAP;       # pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   UNPAIR;     # pair (nat %token2Fee) (nat %token2Id) : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   CDR;        # nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   PUSH nat 0; # nat : nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   PAIR;       # pair nat nat : pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   PAIR;       # pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   SWAP;       # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   PAIR;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : list operation
                                   SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : list operation
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation
                                   SWAP;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }
                                 {
                                   DIG 2;      # lambda nat nat : @parameter%remove_liquidity : @storage
                                   DROP;       # @parameter%remove_liquidity : @storage
                                   # == remove_liquidity ==
                                   # sp.verify(self.data.lqtTotal != 0, 'Plenty_Network_Not_Initialized') # @parameter%remove_liquidity : @storage
                                   PUSH nat 0; # nat : @parameter%remove_liquidity : @storage
                                   DUP 3;      # @storage : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : @parameter%remove_liquidity : @storage
                                   GET 4;      # nat : nat : @parameter%remove_liquidity : @storage
                                   COMPARE;    # int : @parameter%remove_liquidity : @storage
                                   NEQ;        # bool : @parameter%remove_liquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Not_Initialized"; # string : @parameter%remove_liquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%remove_liquidity : @storage
                                   SWAP;       # @storage : @parameter%remove_liquidity
                                   # sp.verify(params.lpAmount <= self.data.lqtTotal, 'Plenty_Network_Insufficient_Balance') # @storage : @parameter%remove_liquidity
                                   DUP;        # @storage : @storage : @parameter%remove_liquidity
                                   DUG 2;      # @storage : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : @parameter%remove_liquidity : @storage
                                   GET 4;      # nat : @parameter%remove_liquidity : @storage
                                   SWAP;       # @parameter%remove_liquidity : nat : @storage
                                   DUP;        # @parameter%remove_liquidity : @parameter%remove_liquidity : nat : @storage
                                   DUG 2;      # @parameter%remove_liquidity : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # nat : nat : @parameter%remove_liquidity : @storage
                                   COMPARE;    # int : @parameter%remove_liquidity : @storage
                                   LE;         # bool : @parameter%remove_liquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "Plenty_Network_Insufficient_Balance"; # string : @parameter%remove_liquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # @parameter%remove_liquidity : @storage
                                   SWAP;       # @storage : @parameter%remove_liquidity
                                   # token1Amount = sp.local("token1Amount", 0)
                                   # token2Amount = sp.local("token2Amount", 0)
                                   # token1Amount.value = (params.lpAmount * self.data.token1Pool) // self.data.lqtTotal # @storage : @parameter%remove_liquidity
                                   DUP;        # @storage : @storage : @parameter%remove_liquidity
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @storage : @parameter%remove_liquidity
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : @storage : @parameter%remove_liquidity
                                   GET 4;      # nat : @storage : @parameter%remove_liquidity
                                   SWAP;       # @storage : nat : @parameter%remove_liquidity
                                   DUP;        # @storage : @storage : nat : @parameter%remove_liquidity
                                   DUG 3;      # @storage : nat : @parameter%remove_liquidity : @storage
                                   GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : @parameter%remove_liquidity : @storage
                                   CDR;        # nat : nat : @parameter%remove_liquidity : @storage
                                   DUP 3;      # @parameter%remove_liquidity : nat : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # nat : nat : nat : @parameter%remove_liquidity : @storage
                                   MUL;        # nat : nat : @parameter%remove_liquidity : @storage
                                   EDIV;       # option (pair nat nat) : @parameter%remove_liquidity : @storage
                                   IF_NONE
                                     {
                                       PUSH int 246; # int : @parameter%remove_liquidity : @storage
                                       FAILWITH;   # FAILED
                                     }
                                     {
                                       CAR;        # nat : @parameter%remove_liquidity : @storage
                                     }; # nat : @parameter%remove_liquidity : @storage
                                   # token2Amount.value = (params.lpAmount * self.data.token2Pool) // self.data.lqtTotal # nat : @parameter%remove_liquidity : @storage
                                   DIG 2;      # @storage : nat : @parameter%remove_liquidity
                                   DUP;        # @storage : @storage : nat : @parameter%remove_liquidity
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : @storage : nat : @parameter%remove_liquidity
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : @storage : nat : @parameter%remove_liquidity
                                   GET 4;      # nat : @storage : nat : @parameter%remove_liquidity
                                   SWAP;       # @storage : nat : nat : @parameter%remove_liquidity
                                   DUP;        # @storage : @storage : nat : nat : @parameter%remove_liquidity
                                   DUG 4;      # @storage : nat : nat : @parameter%remove_liquidity : @storage
                                   GET 7;      # nat : nat : nat : @parameter%remove_liquidity : @storage
                                   DUP 4;      # @parameter%remove_liquidity : nat : nat : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # nat : nat : nat : nat : @parameter%remove_liquidity : @storage
                                   MUL;        # nat : nat : nat : @parameter%remove_liquidity : @storage
                                   EDIV;       # option (pair nat nat) : nat : @parameter%remove_liquidity : @storage
                                   IF_NONE
                                     {
                                       PUSH int 247; # int : nat : @parameter%remove_liquidity : @storage
                                       FAILWITH;   # FAILED
                                     }
                                     {
                                       CAR;        # nat : nat : @parameter%remove_liquidity : @storage
                                     }; # nat : nat : @parameter%remove_liquidity : @storage
                                   # sp.verify(token1Amount.value >= params.token1_min) # nat : nat : @parameter%remove_liquidity : @storage
                                   DUP 3;      # @parameter%remove_liquidity : nat : nat : @parameter%remove_liquidity : @storage
                                   GET 3;      # nat : nat : nat : @parameter%remove_liquidity : @storage
                                   DUP 3;      # nat : nat : nat : nat : @parameter%remove_liquidity : @storage
                                   COMPARE;    # int : nat : nat : @parameter%remove_liquidity : @storage
                                   GE;         # bool : nat : nat : @parameter%remove_liquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token1Amount.value >= params.token1_min"; # string : nat : nat : @parameter%remove_liquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : @parameter%remove_liquidity : @storage
                                   # sp.verify(token2Amount.value >= params.token2_min) # nat : nat : @parameter%remove_liquidity : @storage
                                   DUP 3;      # @parameter%remove_liquidity : nat : nat : @parameter%remove_liquidity : @storage
                                   GET 4;      # nat : nat : nat : @parameter%remove_liquidity : @storage
                                   SWAP;       # nat : nat : nat : @parameter%remove_liquidity : @storage
                                   DUP;        # nat : nat : nat : nat : @parameter%remove_liquidity : @storage
                                   DUG 2;      # nat : nat : nat : nat : @parameter%remove_liquidity : @storage
                                   COMPARE;    # int : nat : nat : @parameter%remove_liquidity : @storage
                                   GE;         # bool : nat : nat : @parameter%remove_liquidity : @storage
                                   IF
                                     {}
                                     {
                                       PUSH string "WrongCondition: token2Amount.value >= params.token2_min"; # string : nat : nat : @parameter%remove_liquidity : @storage
                                       FAILWITH;   # FAILED
                                     }; # nat : nat : @parameter%remove_liquidity : @storage
                                   # self.data.token1Pool = sp.as_nat(self.data.token1Pool - token1Amount.value) # nat : nat : @parameter%remove_liquidity : @storage
                                   DUP 4;      # @storage : nat : nat : @parameter%remove_liquidity : @storage
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : @storage
                                   SWAP;       # pair (pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity : @storage
                                   UNPAIR;     # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity : @storage
                                   UNPAIR;     # pair (nat %token1Id) (nat %token1Pool) : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity : @storage
                                   CAR;        # nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity : @storage
                                   DUP 6;      # nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity : @storage
                                   DIG 8;      # @storage : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   CDR;        # nat : nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   SUB;        # int : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   ISNAT;      # option nat : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   IF_NONE
                                     {
                                       PUSH int 252; # int : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : nat : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   SWAP;       # nat : @some : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair nat @some : pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : nat : @parameter%remove_liquidity
                                   SWAP;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   # self.data.token2Pool = sp.as_nat(self.data.token2Pool - token2Amount.value) # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   SWAP;       # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP;        # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUG 2;      # nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DIG 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   GET 7;      # nat : nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   SUB;        # int : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   ISNAT;      # option nat : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   IF_NONE
                                     {
                                       PUSH int 253; # int : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   UPDATE 7;   # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   # self.data.lqtTotal = sp.as_nat(self.data.lqtTotal - params.lpAmount) # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   DUP;        # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   DUG 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   UNPAIR;     # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   UNPAIR;     # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   UNPAIR;     # pair (address %admin) (nat %lpFee) : pair (address %lqtAddress) (nat %lqtTotal) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   SWAP;       # pair (address %lqtAddress) (nat %lqtTotal) : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 7;      # @parameter%remove_liquidity : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DIG 8;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal))) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair (address %lqtAddress) (nat %lqtTotal)) : nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   GET 4;      # nat : nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   SUB;        # int : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   ISNAT;      # option nat : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   IF_NONE
                                     {
                                       PUSH int 254; # int : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : address : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   SWAP;       # address : @some : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair address @some : pair (address %admin) (nat %lpFee) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   SWAP;       # pair (address %admin) (nat %lpFee) : pair address @some : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair (pair (address %admin) (nat %lpFee)) (pair address @some) : pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))) : nat : nat : @parameter%remove_liquidity
                                   PAIR;       # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : nat : @parameter%remove_liquidity
                                   DUG 3;      # nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.transfer(sp.record(address = sp.sender, value = params.lpAmount), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.lqtAddress, entry_point='burn').open_some()) # nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   NIL operation; # list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (pair (address %admin) (nat %lpFee)) (pair address @some) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 3;      # address : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CONTRACT %burn (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF_NONE
                                     {
                                       PUSH int 129; # int : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }
                                     {}; # @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 6;      # @parameter%remove_liquidity : mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (nat %lpAmount) (address %recipient) : mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # nat : mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   SENDER;     # @sender : nat : mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PAIR;       # pair @sender nat : mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   TRANSFER_TOKENS; # operation : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CONS;       # list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.verify(token1Amount.value > 0, 'Zero_Transfer') # list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PUSH nat 0; # nat : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 4;      # nat : nat : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   COMPARE;    # int : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GT;         # bool : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # if self.data.token1Check: # list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 7;      # bool : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token1Id, amount = token1Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 6;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 9;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair nat @some : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 9;      # @parameter%remove_liquidity : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = token1Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token1Address, entry_point='transfer').open_some()) # list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 5;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee)))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 4;      # nat : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 6;      # @parameter%remove_liquidity : nat : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CDR;        # address : nat : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }; # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # sp.verify(token2Amount.value > 0, 'Zero_Transfer') # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   PUSH nat 0; # nat : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 3;      # nat : nat : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   COMPARE;    # int : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GT;         # bool : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {}
                                     {
                                       PUSH string "Zero_Transfer"; # string : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       FAILWITH;   # FAILED
                                     }; # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   # if self.data.token2Check: # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 3;      # pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   GET 6;      # bool : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                   IF
                                     {
                                       # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.recipient, token_id = self.data.token2Id, amount = token2Amount.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 33; # int : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 5;      # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 8;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # pair (nat %token2Fee) (nat %token2Id) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CDR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 7;      # @parameter%remove_liquidity : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CDR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }
                                     {
                                       # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.recipient, value = token2Amount.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.token2Address, entry_point='transfer').open_some()) # list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DUP 4;      # pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 3;      # pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       GET 5;      # address : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       IF_NONE
                                         {
                                           PUSH int 57; # int : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                           FAILWITH;   # FAILED
                                         }
                                         {}; # @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 3;      # nat : mutez : @some : list operation : @parameter%remove_liquidity : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       DIG 4;      # @parameter%remove_liquidity : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CAR;        # pair (nat %lpAmount) (address %recipient) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CDR;        # address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                       CONS;       # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                     }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address @some)) (pair (pair (bool %paused) (bool %state)) (pair (address %token1Address) (pair (bool %token1Check) (nat %token1Fee))))) (pair (pair (pair nat @some) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair (nat %token2Fee) (nat %token2Id)) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                                 }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                             }; # list operation : pair (pair (pair (pair (address %admin) (nat %lpFee)) (pair address nat)) (pair (pair (bool %paused) (bool %state)) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                         }; # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                       NIL operation; # list operation : list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                       SWAP;       # list operation : list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                       ITER
                         {
                           CONS;       # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                         }; # list operation : pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address)))))
                       PAIR;       # pair (list operation) (pair (pair (pair (pair address nat) (pair address nat)) (pair (pair bool bool) (pair address (pair bool nat)))) (pair (pair (pair nat nat) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check)))) (pair (pair nat nat) (pair (nat %token2Pool) (pair (nat %token2Precision) (option %voterContract address))))))
                     };
                   view
                     "getReserveBalance" unit (pair (nat %token1Pool) (nat %token2Pool))
                     {
                       CDR;        # @storage
                       # sp.result(sp.record(token1Pool = self.data.token1Pool, token2Pool = self.data.token2Pool)) # @storage
                       DUP;        # @storage : @storage
                       GET 7;      # nat : @storage
                       SWAP;       # @storage : nat
                       GET 3;      # pair (pair (nat %token1Id) (nat %token1Pool)) (pair (nat %token1Precision) (pair (address %token2Address) (bool %token2Check))) : nat
                       CAR;        # pair (nat %token1Id) (nat %token1Pool) : nat
                       CDR;        # nat : nat
                       PAIR;       # pair nat nat
                     };
                 }; # operation : address : list operation : @parameter%deployPair : @storage
                PAIR;       # pair operation address : list operation : @parameter%deployPair : @storage
                # sp.operations().push(create_contract_stableDeployer_42.value.operation) # pair operation address : list operation : @parameter%deployPair : @storage
                DUP;        # pair operation address : pair operation address : list operation : @parameter%deployPair : @storage
                DUG 2;      # pair operation address : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # operation : list operation : pair operation address : @parameter%deployPair : @storage
                CONS;       # list operation : pair operation address : @parameter%deployPair : @storage
                # sp.emit(sp.record(exchangeAddress = sp.some(create_contract_stableDeployer_42.value.address).open_some(), lpTokenAddress = params.lpTokenAddress, token1Address = params.token1Address, token1Id = params.token1Id, token1Precision = params.token1Precision, token1Type = params.token1Type, token2Address = params.token2Address, token2Id = params.token2Id, token2Precision = params.token2Precision, token2Type = params.token2Type)) # list operation : pair operation address : @parameter%deployPair : @storage
                DIG 2;      # @parameter%deployPair : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : list operation : pair operation address : @storage
                GET 7;      # bool : @parameter%deployPair : list operation : pair operation address : @storage
                SWAP;       # @parameter%deployPair : bool : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : bool : list operation : pair operation address : @storage
                DUG 4;      # @parameter%deployPair : bool : list operation : pair operation address : @parameter%deployPair : @storage
                GET 5;      # nat : bool : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                DUP 4;      # @parameter%deployPair : pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                GET 4;      # nat : pair nat bool : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair nat (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                DIG 3;      # @parameter%deployPair : pair nat (pair nat bool) : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair nat (pair nat bool) : list operation : pair operation address : @storage
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : @parameter%deployPair : pair nat (pair nat bool) : list operation : pair operation address : @storage
                CAR;        # address : @parameter%deployPair : pair nat (pair nat bool) : list operation : pair operation address : @storage
                SWAP;       # @parameter%deployPair : address : pair nat (pair nat bool) : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : address : pair nat (pair nat bool) : list operation : pair operation address : @storage
                DUG 5;      # @parameter%deployPair : address : pair nat (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : address : pair nat (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                GET 6;      # bool : address : pair nat (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair bool address : pair nat (pair nat bool) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                DIG 3;      # @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @storage
                GET 5;      # nat : @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @storage
                SWAP;       # @parameter%deployPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @storage
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @storage
                DUG 5;      # @parameter%deployPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                GET 3;      # nat : nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                DUP 5;      # @parameter%deployPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                GET 3;      # address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                DUP 5;      # @parameter%deployPair : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                CAR;        # address : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                DUP 5;      # pair operation address : address : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                CDR;        # address : address : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                SOME;       # option address : address : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                IF_NONE
                  {
                    PUSH int 69; # int : address : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair @some address : pair address (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair (pair @some address) (pair address (pair nat nat)) : pair (pair bool address) (pair nat (pair nat bool)) : list operation : pair operation address : @parameter%deployPair : @storage
                PAIR;       # pair (pair (pair @some address) (pair address (pair nat nat))) (pair (pair bool address) (pair nat (pair nat bool))) : list operation : pair operation address : @parameter%deployPair : @storage
                EMIT (pair (pair (pair (address %exchangeAddress) (address %lpTokenAddress)) (pair (address %token1Address) (pair (nat %token1Id) (nat %token1Precision)))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))); # operation : list operation : pair operation address : @parameter%deployPair : @storage
                CONS;       # list operation : pair operation address : @parameter%deployPair : @storage
                SWAP;       # pair operation address : list operation : @parameter%deployPair : @storage
                # self.data.Registry[sp.some(create_contract_stableDeployer_42.value.address).open_some()] = sp.record(lpTokenAddress = params.lpTokenAddress, token1Address = params.token1Address, token1Id = params.token1Id, token1Precision = params.token1Precision, token1Type = params.token1Type, token2Address = params.token2Address, token2Id = params.token2Id, token2Precision = params.token2Precision, token2Type = params.token2Type) # pair operation address : list operation : @parameter%deployPair : @storage
                DIG 3;      # @storage : pair operation address : list operation : @parameter%deployPair
                UNPAIR;     # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                UNPAIR;     # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DIG 5;      # @parameter%deployPair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                GET 7;      # bool : @parameter%deployPair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                SWAP;       # @parameter%deployPair : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUG 7;      # @parameter%deployPair : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                GET 5;      # nat : bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair nat bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DUP 7;      # @parameter%deployPair : pair nat bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : pair nat bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                GET 4;      # nat : pair nat bool : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DIG 6;      # @parameter%deployPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : @parameter%deployPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                CAR;        # address : @parameter%deployPair : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                SWAP;       # @parameter%deployPair : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUG 8;      # @parameter%deployPair : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                GET 6;      # bool : address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair bool address : pair nat (pair nat bool) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DIG 6;      # @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                GET 5;      # nat : @parameter%deployPair : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                SWAP;       # @parameter%deployPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUG 8;      # @parameter%deployPair : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                GET 3;      # nat : nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DIG 7;      # @parameter%deployPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : @parameter%deployPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : @parameter%deployPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                GET 3;      # address : @parameter%deployPair : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                SWAP;       # @parameter%deployPair : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUP;        # @parameter%deployPair : @parameter%deployPair : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation
                DUG 9;      # @parameter%deployPair : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CAR;        # address : address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair address address : pair nat nat : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (pair address address) (pair nat nat) : pair (pair bool address) (pair nat (pair nat bool)) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                SOME;       # option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                DUP 5;      # pair operation address : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                CDR;        # address : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                SOME;       # option address : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                IF_NONE
                  {
                    PUSH int 69; # int : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                UPDATE;     # big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : pair operation address : list operation : @parameter%deployPair
                PAIR;       # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                DUG 3;      # pair operation address : list operation : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # sp.transfer(sp.some(create_contract_stableDeployer_42.value.address).open_some(), sp.tez(0), sp.contract(sp.TAddress, params.lpTokenAddress, entry_point='updateExchangeAddress').open_some()) # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 3;      # @parameter%deployPair : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # address : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONTRACT %updateExchangeAddress address; # option (contract address) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 85; # int : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH mutez 0; # mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 4;      # pair operation address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CDR;        # address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SOME;       # option address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 69; # int : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                TRANSFER_TOKENS; # operation : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONS;       # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # sp.transfer(sp.record(exchangeAddress = sp.some(create_contract_stableDeployer_42.value.address).open_some(), stablePair = True, token1Address = params.token1Address, token1Amount = params.token1Amount, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Amount = params.token2Amount, token2Id = params.token2Id, token2Type = params.token2Type, userAddress = params.userAddress), sp.tez(0), sp.contract(sp.TRecord(exchangeAddress = sp.TAddress, stablePair = sp.TBool, token1Address = sp.TAddress, token1Amount = sp.TNat, token1Id = sp.TNat, token1Type = sp.TBool, token2Address = sp.TAddress, token2Amount = sp.TNat, token2Id = sp.TNat, token2Type = sp.TBool, userAddress = sp.TAddress).layout(((("exchangeAddress", "stablePair"), ("token1Address", ("token1Amount", "token1Id"))), (("token1Type", ("token2Address", "token2Amount")), ("token2Id", ("token2Type", "userAddress"))))), self.data.routerAddress, entry_point='AddExchange').open_some()) # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 4;      # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 6;      # address : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONTRACT %AddExchange (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress))))); # option (contract (pair (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress)))))) : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 218; # int : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH mutez 0; # mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 4;      # @parameter%deployPair : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 8;      # address : @parameter%deployPair : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # @parameter%deployPair : address : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : address : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUG 6;      # @parameter%deployPair : address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 7;      # bool : address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair bool address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 6;      # @parameter%deployPair : pair bool address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : pair bool address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 4;      # nat : pair bool address : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 5;      # @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # nat : @parameter%deployPair : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # @parameter%deployPair : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUG 7;      # @parameter%deployPair : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # pair (address %token2Address) (pair (nat %token2Amount) (nat %token2Id)) : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # address : nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 7;      # @parameter%deployPair : pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 6;      # bool : pair address nat : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair bool (pair address nat) : pair nat (pair bool address) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 5;      # @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # nat : @parameter%deployPair : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # @parameter%deployPair : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP;        # @parameter%deployPair : @parameter%deployPair : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUG 7;      # @parameter%deployPair : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 4;      # nat : nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 7;      # @parameter%deployPair : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 3;      # address : pair nat nat : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH bool True; # bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 7;      # pair operation address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CDR;        # address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SOME;       # option address : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 69; # int : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair @some bool : pair address (pair nat nat) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair (pair @some bool) (pair address (pair nat nat)) : pair (pair bool (pair address nat)) (pair nat (pair bool address)) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PAIR;       # pair (pair (pair @some bool) (pair address (pair nat nat))) (pair (pair bool (pair address nat)) (pair nat (pair bool address))) : mutez : @some : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                TRANSFER_TOKENS; # operation : list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONS;       # list operation : pair operation address : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                SWAP;       # pair operation address : list operation : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # self.data.lpMapping[params.lpTokenAddress] = sp.some(create_contract_stableDeployer_42.value.address).open_some() # pair operation address : list operation : @parameter%deployPair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 3;      # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                DUP;        # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                GET 5;      # big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : pair operation address : list operation : @parameter%deployPair
                DIG 2;      # pair operation address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                CDR;        # address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                SOME;       # option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                IF_NONE
                  {
                    PUSH int 69; # int : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                SOME;       # option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%deployPair
                DIG 4;      # @parameter%deployPair : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount))) (pair (nat %token1Id) (pair (nat %token1Precision) (bool %token1Type))) : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # pair (address %lpTokenAddress) (pair (address %token1Address) (nat %token1Amount)) : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                CAR;        # address : option address : big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE;     # big_map address address : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                UPDATE 5;   # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation
                SWAP;       # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }; # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%modifyFee
                # == modifyFee ==
                # sp.verify(sp.sender == self.data.adminAddress) # @storage : @parameter%modifyFee
                DUP;        # @storage : @storage : @parameter%modifyFee
                DUG 2;      # @storage : @parameter%modifyFee : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%modifyFee : @storage
                GET 3;      # address : @parameter%modifyFee : @storage
                SENDER;     # @sender : address : @parameter%modifyFee : @storage
                COMPARE;    # int : @parameter%modifyFee : @storage
                EQ;         # bool : @parameter%modifyFee : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.adminAddress"; # string : @parameter%modifyFee : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%modifyFee : @storage
                # self.data.lpFee = params # @parameter%modifyFee : @storage
                UPDATE 3;   # @storage
                NIL operation; # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%removeExchangePair
                # == removeExchangePair ==
                # sp.verify((sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)) # @storage : @parameter%removeExchangePair
                DUP;        # @storage : @storage : @parameter%removeExchangePair
                DUG 2;      # @storage : @parameter%removeExchangePair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%removeExchangePair : @storage
                GET 3;      # address : @parameter%removeExchangePair : @storage
                SENDER;     # @sender : address : @parameter%removeExchangePair : @storage
                COMPARE;    # int : @parameter%removeExchangePair : @storage
                EQ;         # bool : @parameter%removeExchangePair : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%removeExchangePair : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%removeExchangePair
                    DUP;        # @storage : @storage : @parameter%removeExchangePair
                    DUG 2;      # @storage : @parameter%removeExchangePair : @storage
                    CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%removeExchangePair : @storage
                    GET 4;      # address : @parameter%removeExchangePair : @storage
                    SENDER;     # @sender : address : @parameter%removeExchangePair : @storage
                    COMPARE;    # int : @parameter%removeExchangePair : @storage
                    EQ;         # bool : @parameter%removeExchangePair : @storage
                  }; # bool : @parameter%removeExchangePair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (sp.sender == self.data.adminAddress) | (sp.sender == self.data.lpDeployer)"; # string : @parameter%removeExchangePair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%removeExchangePair : @storage
                SWAP;       # @storage : @parameter%removeExchangePair
                # sp.verify(self.data.Registry.contains(params)) # @storage : @parameter%removeExchangePair
                DUP;        # @storage : @storage : @parameter%removeExchangePair
                DUG 2;      # @storage : @parameter%removeExchangePair : @storage
                CAR;        # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : @parameter%removeExchangePair : @storage
                CAR;        # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : @parameter%removeExchangePair : @storage
                SWAP;       # @parameter%removeExchangePair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : @storage
                DUP;        # @parameter%removeExchangePair : @parameter%removeExchangePair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : @storage
                DUG 2;      # @parameter%removeExchangePair : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : @parameter%removeExchangePair : @storage
                MEM;        # bool : @parameter%removeExchangePair : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.Registry.contains(params)"; # string : @parameter%removeExchangePair : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%removeExchangePair : @storage
                SWAP;       # @storage : @parameter%removeExchangePair
                # del self.data.Registry[params] # @storage : @parameter%removeExchangePair
                UNPAIR;     # pair (big_map %Registry address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type)))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                UNPAIR;     # big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                NONE (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))); # option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                DUP 5;      # @parameter%removeExchangePair : option (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : big_map address (pair (pair (pair (address %lpTokenAddress) (address %token1Address)) (pair (nat %token1Id) (nat %token1Precision))) (pair (pair (bool %token1Type) (address %token2Address)) (pair (nat %token2Id) (pair (nat %token2Precision) (bool %token2Type))))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                UPDATE;     # big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool)))) : pair (address %adminAddress) (address %lpDeployer) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                PAIR;       # pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer)) : pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)) : @parameter%removeExchangePair
                PAIR;       # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : @parameter%removeExchangePair
                SWAP;       # @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                # sp.transfer(params, sp.tez(0), sp.contract(sp.TAddress, self.data.routerAddress, entry_point='DeleteExchange').open_some()) # @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                NIL operation; # list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DUP 3;      # pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))) : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                GET 6;      # address : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONTRACT %DeleteExchange address; # option (contract address) : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                IF_NONE
                  {
                    PUSH int 163; # int : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%removeExchangePair : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                DIG 3;      # @parameter%removeExchangePair : mutez : @some : list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
                CONS;       # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
              }; # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
          }; # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair (address %adminAddress) (address %lpDeployer))) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
      }; # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    NIL operation; # list operation : list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    SWAP;       # list operation : list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    ITER
      {
        CONS;       # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
      }; # list operation : pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress)))
    PAIR;       # pair (list operation) (pair (pair (big_map address (pair (pair (pair address address) (pair nat nat)) (pair (pair bool address) (pair nat (pair nat bool))))) (pair address address)) (pair (nat %lpFee) (pair (big_map %lpMapping address address) (address %routerAddress))))
  };