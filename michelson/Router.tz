parameter (or (or (or (pair %AddExchange (pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id)))) (pair (pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount))) (pair (nat %token2Id) (pair (bool %token2Type) (address %userAddress))))) (unit %ChangeState)) (or (address %DeleteExchange) (pair %adminOperation (address %address) (bool %operation)))) (or (or (pair %approveExchangeToken (pair (nat %amount) (address %exchangeAddress)) (pair (address %tokenAddress) (nat %tokenId))) (nat %faOneCallBack)) (or (list %faTwoCallBack (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) (pair %routerSwap (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (pair (nat %SwapAmount) (address %recipient))))));
storage   (pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%AddExchange
                # == AddExchange ==
                # sp.verify(self.data.adminAddress.contains(sp.sender), 'Plenty_Network_Router_Not_Admin') # @storage : @parameter%AddExchange
                DUP;        # @storage : @storage : @parameter%AddExchange
                DUG 2;      # @storage : @parameter%AddExchange : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%AddExchange : @storage
                GET 4;      # set address : @parameter%AddExchange : @storage
                SENDER;     # @sender : set address : @parameter%AddExchange : @storage
                MEM;        # bool : @parameter%AddExchange : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Not_Admin"; # string : @parameter%AddExchange : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%AddExchange : @storage
                # sp.verify((self.data.Registry.contains(params.exchangeAddress)) == False) # @parameter%AddExchange : @storage
                PUSH bool False; # bool : @parameter%AddExchange : @storage
                DUP 3;      # @storage : bool : @parameter%AddExchange : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : bool : @parameter%AddExchange : @storage
                CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : bool : @parameter%AddExchange : @storage
                CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : @parameter%AddExchange : @storage
                DUP 3;      # @parameter%AddExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : @parameter%AddExchange : @storage
                CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : @parameter%AddExchange : @storage
                CAR;        # pair (address %exchangeAddress) (bool %stablePair) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : @parameter%AddExchange : @storage
                CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : @parameter%AddExchange : @storage
                MEM;        # bool : bool : @parameter%AddExchange : @storage
                COMPARE;    # int : @parameter%AddExchange : @storage
                EQ;         # bool : @parameter%AddExchange : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (self.data.Registry.contains(params.exchangeAddress)) == False"; # string : @parameter%AddExchange : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%AddExchange : @storage
                SWAP;       # @storage : @parameter%AddExchange
                # self.data.Registry[params.exchangeAddress] = sp.record(token1Address = params.token1Address, token1Id = params.token1Id, token1Type = params.token1Type, token2Address = params.token2Address, token2Id = params.token2Id, token2Type = params.token2Type) # @storage : @parameter%AddExchange
                UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                UNPAIR;     # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                SWAP;       # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                DIG 4;      # @parameter%AddExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                DUP;        # @parameter%AddExchange : @parameter%AddExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                GET 7;      # bool : @parameter%AddExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                SWAP;       # @parameter%AddExchange : bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                DUP;        # @parameter%AddExchange : @parameter%AddExchange : bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                DUG 6;      # @parameter%AddExchange : bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                GET 5;      # nat : bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair nat bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                DUP 6;      # @parameter%AddExchange : pair nat bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : pair nat bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                GET 3;      # address : pair nat bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                DIG 5;      # @parameter%AddExchange : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                DUP;        # @parameter%AddExchange : @parameter%AddExchange : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : @parameter%AddExchange : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                CAR;        # bool : @parameter%AddExchange : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                SWAP;       # @parameter%AddExchange : bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                DUP;        # @parameter%AddExchange : @parameter%AddExchange : bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                DUG 7;      # @parameter%AddExchange : bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                GET 6;      # nat : bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair nat bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                DUP 7;      # @parameter%AddExchange : pair nat bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : pair nat bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                GET 3;      # address : pair nat bool : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair address (pair nat bool) : pair address (pair nat bool) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair (pair address (pair nat bool)) (pair address (pair nat bool)) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                SOME;       # option (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                DUP 6;      # @parameter%AddExchange : option (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : option (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                CAR;        # pair (address %exchangeAddress) (bool %stablePair) : option (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                CAR;        # address : option (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                UPDATE;     # big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                SWAP;       # bool : big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%AddExchange
                PAIR;       # pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%AddExchange
                SWAP;       # @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                # if params.token1Type: # @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                DUP;        # @parameter%AddExchange : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # bool : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF
                  {
                    # if True:
                    # sp.transfer(sp.list([variant('add_operator', sp.record(owner = sp.self_address, operator = params.exchangeAddress, token_id = params.token1Id))]), sp.tez(0), sp.contract(sp.TList(sp.TVariant(add_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator"))), params.token1Address, entry_point='update_operators').open_some()) # @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONTRACT %update_operators (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))); # option (contract (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))) : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 120; # int : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    NIL operation; # list operation : @some : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SWAP;       # @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    NIL (or (pair address (pair address nat)) (pair address (pair address nat))); # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 4;      # @parameter%AddExchange : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : @parameter%AddExchange : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 6;      # nat : @parameter%AddExchange : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SWAP;       # @parameter%AddExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUG 6;      # @parameter%AddExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (bool %stablePair) : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SELF_ADDRESS; # @self : address : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PAIR 3;     # pair @self (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    LEFT (pair address (pair address nat)); # or (pair @self (pair address nat)) (pair address (pair address nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONS;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    TRANSFER_TOKENS; # operation : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONS;       # list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    # sp.transfer(sp.record(spender = params.exchangeAddress, value = 100000000000000000000000000000000), sp.tez(0), sp.contract(sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), params.token1Address, entry_point='approve').open_some()) # @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONTRACT %approve (pair (address %spender) (nat %value)); # option (contract (pair (address %spender) (nat %value))) : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 110; # int : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    NIL operation; # list operation : @some : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SWAP;       # @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH nat 100000000000000000000000000000000; # nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 5;      # @parameter%AddExchange : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (bool %stablePair) : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PAIR;       # pair address nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    TRANSFER_TOKENS; # operation : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONS;       # list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                SWAP;       # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                # if params.token2Type: # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                DUP;        # @parameter%AddExchange : @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                DUG 2;      # @parameter%AddExchange : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET 7;      # bool : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF
                  {
                    SWAP;       # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if True:
                    # sp.transfer(sp.list([variant('add_operator', sp.record(owner = sp.self_address, operator = params.exchangeAddress, token_id = params.token2Id))]), sp.tez(0), sp.contract(sp.TList(sp.TVariant(add_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator"))), params.token2Address, entry_point='update_operators').open_some()) # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUG 2;      # @parameter%AddExchange : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONTRACT %update_operators (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))); # option (contract (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 120; # int : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    NIL (or (pair address (pair address nat)) (pair address (pair address nat))); # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 4;      # @parameter%AddExchange : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 5;      # nat : @parameter%AddExchange : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SWAP;       # @parameter%AddExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUG 6;      # @parameter%AddExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (bool %stablePair) : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SELF_ADDRESS; # @self : address : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PAIR 3;     # pair @self (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    LEFT (pair address (pair address nat)); # or (pair @self (pair address nat)) (pair address (pair address nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONS;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    TRANSFER_TOKENS; # operation : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONS;       # list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    SWAP;       # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # sp.transfer(sp.record(spender = params.exchangeAddress, value = 100000000000000000000000000000000), sp.tez(0), sp.contract(sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), params.token2Address, entry_point='approve').open_some()) # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUG 2;      # @parameter%AddExchange : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONTRACT %approve (pair (address %spender) (nat %value)); # option (contract (pair (address %spender) (nat %value))) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 110; # int : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH nat 100000000000000000000000000000000; # nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 5;      # @parameter%AddExchange : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (bool %stablePair) : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PAIR;       # pair address nat : mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    TRANSFER_TOKENS; # operation : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CONS;       # list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                # if (params.token1Amount > 0) & (params.token2Amount > 0): # list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                PUSH nat 0; # nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                DUP 3;      # @parameter%AddExchange : nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET 5;      # nat : nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                COMPARE;    # int : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GT;         # bool : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF
                  {
                    PUSH nat 0; # nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 3;      # @parameter%AddExchange : nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 4;      # nat : nat : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GT;         # bool : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    PUSH bool False; # bool : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # bool : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF
                  {
                    SWAP;       # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if params.stablePair: # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP;        # @parameter%AddExchange : @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUG 2;      # @parameter%AddExchange : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (bool %stablePair) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CDR;        # bool : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        SWAP;       # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # sp.transfer(sp.record(recipient = params.userAddress, token1_max = params.token1Amount, token2_max = params.token2Amount), sp.tez(0), sp.contract(sp.TRecord(recipient = sp.TAddress, token1_max = sp.TNat, token2_max = sp.TNat).layout(("recipient", ("token1_max", "token2_max"))), params.exchangeAddress, entry_point='add_liquidity').open_some()) # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP;        # @parameter%AddExchange : @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUG 2;      # @parameter%AddExchange : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (bool %stablePair) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %add_liquidity (pair (address %recipient) (pair (nat %token1_max) (nat %token2_max))); # option (contract (pair (address %recipient) (pair (nat %token1_max) (nat %token2_max)))) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 527; # int : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP;        # @parameter%AddExchange : @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP;        # @parameter%AddExchange : @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 5;      # nat : @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # @parameter%AddExchange : nat : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # address : nat : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR 3;     # pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        SWAP;       # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # sp.transfer(sp.record(recipient = params.userAddress, token1_max = params.token1Amount, token2_max = params.token2Amount), sp.tez(0), sp.contract(sp.TRecord(recipient = sp.TAddress, token1_max = sp.TNat, token2_max = sp.TNat).layout(("recipient", ("token1_max", "token2_max"))), params.exchangeAddress, entry_point='AddLiquidity').open_some()) # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP;        # @parameter%AddExchange : @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUG 2;      # @parameter%AddExchange : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (bool %stablePair) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %AddLiquidity (pair (address %recipient) (pair (nat %token1_max) (nat %token2_max))); # option (contract (pair (address %recipient) (pair (nat %token1_max) (nat %token2_max)))) : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 537; # int : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%AddExchange : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP;        # @parameter%AddExchange : @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (bool %token1Type) (pair (address %token2Address) (nat %token2Amount)) : @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : @parameter%AddExchange : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP;        # @parameter%AddExchange : @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (address %exchangeAddress) (bool %stablePair)) (pair (address %token1Address) (pair (nat %token1Amount) (nat %token1Id))) : @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 5;      # nat : @parameter%AddExchange : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # @parameter%AddExchange : nat : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # address : nat : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR 3;     # pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    SWAP;       # @parameter%AddExchange : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DROP;       # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
              }
              {
                DROP;       # @storage
                # == ChangeState ==
                # sp.verify(self.data.adminAddress.contains(sp.sender), 'Plenty_Network_Router_Not_Admin') # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @storage
                GET 4;      # set address : @storage
                SENDER;     # @sender : set address : @storage
                MEM;        # bool : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Not_Admin"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.paused = ~ self.data.paused # @storage
                DUP;        # @storage : @storage
                GET 7;      # bool : @storage
                NOT;        # bool : @storage
                UPDATE 7;   # @storage
                NIL operation; # list operation : @storage
              }; # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%DeleteExchange
                # == DeleteExchange ==
                # sp.verify(self.data.adminAddress.contains(sp.sender), 'Plenty_Network_Router_Not_Admin') # @storage : @parameter%DeleteExchange
                DUP;        # @storage : @storage : @parameter%DeleteExchange
                DUG 2;      # @storage : @parameter%DeleteExchange : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%DeleteExchange : @storage
                GET 4;      # set address : @parameter%DeleteExchange : @storage
                SENDER;     # @sender : set address : @parameter%DeleteExchange : @storage
                MEM;        # bool : @parameter%DeleteExchange : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Not_Admin"; # string : @parameter%DeleteExchange : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%DeleteExchange : @storage
                SWAP;       # @storage : @parameter%DeleteExchange
                # if self.data.Registry[params].token1Type: # @storage : @parameter%DeleteExchange
                DUP;        # @storage : @storage : @parameter%DeleteExchange
                DUG 2;      # @storage : @parameter%DeleteExchange : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%DeleteExchange : @storage
                CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%DeleteExchange : @storage
                CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%DeleteExchange : @storage
                SWAP;       # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                DUP;        # @parameter%DeleteExchange : @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                DUG 2;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%DeleteExchange : @storage
                GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%DeleteExchange : @storage
                IF_NONE
                  {
                    PUSH int 562; # int : @parameter%DeleteExchange : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%DeleteExchange : @storage
                CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : @parameter%DeleteExchange : @storage
                GET 4;      # bool : @parameter%DeleteExchange : @storage
                IF
                  {
                    # if False:
                    # sp.transfer(sp.list([variant('remove_operator', sp.record(owner = sp.self_address, operator = params, token_id = self.data.Registry[params].token1Id))]), sp.tez(0), sp.contract(sp.TList(sp.TVariant(add_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator"))), self.data.Registry[params].token1Address, entry_point='update_operators').open_some()) # @parameter%DeleteExchange : @storage
                    NIL operation; # list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @storage : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : list operation : @parameter%DeleteExchange : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 564; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # address : list operation : @parameter%DeleteExchange : @storage
                    CONTRACT %update_operators (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))); # option (contract (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 120; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    NIL (or (pair address (pair address nat)) (pair address (pair address nat))); # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 6;      # @storage : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 6;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 564; # int : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    GET 3;      # nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 6;      # @parameter%DeleteExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    SELF_ADDRESS; # @self : @parameter%DeleteExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    PAIR 3;     # pair @self (pair @parameter%DeleteExchange nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    RIGHT (pair address (pair address nat)); # or (pair address (pair address nat)) (pair @self (pair @parameter%DeleteExchange nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CONS;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%DeleteExchange : @storage
                    CONS;       # list operation : @parameter%DeleteExchange : @storage
                  }
                  {
                    # sp.transfer(sp.record(spender = params, value = 0), sp.tez(0), sp.contract(sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), self.data.Registry[params].token1Address, entry_point='approve').open_some()) # @parameter%DeleteExchange : @storage
                    NIL operation; # list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @storage : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : list operation : @parameter%DeleteExchange : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 568; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # address : list operation : @parameter%DeleteExchange : @storage
                    CONTRACT %approve (pair (address %spender) (nat %value)); # option (contract (pair (address %spender) (nat %value))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 110; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    PUSH nat 0; # nat : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 5;      # @parameter%DeleteExchange : nat : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    PAIR;       # pair @parameter%DeleteExchange nat : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%DeleteExchange : @storage
                    CONS;       # list operation : @parameter%DeleteExchange : @storage
                  }; # list operation : @parameter%DeleteExchange : @storage
                # if self.data.Registry[params].token2Type: # list operation : @parameter%DeleteExchange : @storage
                DUP 3;      # @storage : list operation : @parameter%DeleteExchange : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list operation : @parameter%DeleteExchange : @storage
                CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : list operation : @parameter%DeleteExchange : @storage
                CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                DUP 3;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                IF_NONE
                  {
                    PUSH int 570; # int : list operation : @parameter%DeleteExchange : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%DeleteExchange : @storage
                GET 6;      # bool : list operation : @parameter%DeleteExchange : @storage
                IF
                  {
                    # if False:
                    # sp.transfer(sp.list([variant('remove_operator', sp.record(owner = sp.self_address, operator = params, token_id = self.data.Registry[params].token2Id))]), sp.tez(0), sp.contract(sp.TList(sp.TVariant(add_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator"))), self.data.Registry[params].token2Address, entry_point='update_operators').open_some()) # list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @storage : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : list operation : @parameter%DeleteExchange : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 572; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    GET 3;      # address : list operation : @parameter%DeleteExchange : @storage
                    CONTRACT %update_operators (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))); # option (contract (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 120; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    NIL (or (pair address (pair address nat)) (pair address (pair address nat))); # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 6;      # @storage : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 6;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 572; # int : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    GET 5;      # nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 6;      # @parameter%DeleteExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    SELF_ADDRESS; # @self : @parameter%DeleteExchange : nat : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    PAIR 3;     # pair @self (pair @parameter%DeleteExchange nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    RIGHT (pair address (pair address nat)); # or (pair address (pair address nat)) (pair @self (pair @parameter%DeleteExchange nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    CONS;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%DeleteExchange : @storage
                    CONS;       # list operation : @parameter%DeleteExchange : @storage
                  }
                  {
                    # sp.transfer(sp.record(spender = params, value = 0), sp.tez(0), sp.contract(sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), self.data.Registry[params].token2Address, entry_point='approve').open_some()) # list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @storage : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list operation : @parameter%DeleteExchange : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : list operation : @parameter%DeleteExchange : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    DUP 3;      # @parameter%DeleteExchange : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 576; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    GET 3;      # address : list operation : @parameter%DeleteExchange : @storage
                    CONTRACT %approve (pair (address %spender) (nat %value)); # option (contract (pair (address %spender) (nat %value))) : list operation : @parameter%DeleteExchange : @storage
                    IF_NONE
                      {
                        PUSH int 110; # int : list operation : @parameter%DeleteExchange : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%DeleteExchange : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    PUSH nat 0; # nat : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    DUP 5;      # @parameter%DeleteExchange : nat : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    PAIR;       # pair @parameter%DeleteExchange nat : mutez : @some : list operation : @parameter%DeleteExchange : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%DeleteExchange : @storage
                    CONS;       # list operation : @parameter%DeleteExchange : @storage
                  }; # list operation : @parameter%DeleteExchange : @storage
                # del self.data.Registry[params] # list operation : @parameter%DeleteExchange : @storage
                DIG 2;      # @storage : list operation : @parameter%DeleteExchange
                UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation : @parameter%DeleteExchange
                UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation : @parameter%DeleteExchange
                UNPAIR;     # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation : @parameter%DeleteExchange
                SWAP;       # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation : @parameter%DeleteExchange
                NONE (pair (pair address (pair nat bool)) (pair address (pair nat bool))); # option (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation : @parameter%DeleteExchange
                DIG 6;      # @parameter%DeleteExchange : option (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                UPDATE;     # big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : bool : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                SWAP;       # bool : big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                PAIR;       # pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                PAIR;       # pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                PAIR;       # pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
              }
              {
                SWAP;       # @storage : @parameter%adminOperation
                # == adminOperation ==
                # sp.verify(self.data.adminAddress.contains(sp.sender), 'Plenty_Network_Router_Not_Admin') # @storage : @parameter%adminOperation
                DUP;        # @storage : @storage : @parameter%adminOperation
                DUG 2;      # @storage : @parameter%adminOperation : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%adminOperation : @storage
                GET 4;      # set address : @parameter%adminOperation : @storage
                SENDER;     # @sender : set address : @parameter%adminOperation : @storage
                MEM;        # bool : @parameter%adminOperation : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Not_Admin"; # string : @parameter%adminOperation : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%adminOperation : @storage
                # if params.operation: # @parameter%adminOperation : @storage
                DUP;        # @parameter%adminOperation : @parameter%adminOperation : @storage
                CDR;        # bool : @parameter%adminOperation : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%adminOperation
                    # self.data.adminAddress.add(params.address) # @storage : @parameter%adminOperation
                    UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    UNPAIR;     # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : set address : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    SWAP;       # set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    PUSH bool True; # bool : set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    DIG 5;      # @parameter%adminOperation : bool : set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    CAR;        # address : bool : set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    UPDATE;     # set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    SWAP;       # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : set address : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    PAIR;       # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    SWAP;       # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    PAIR;       # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    PAIR;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    SWAP;       # @storage : @parameter%adminOperation
                    # sp.verify(self.data.adminAddress.contains(params.address)) # @storage : @parameter%adminOperation
                    DUP;        # @storage : @storage : @parameter%adminOperation
                    DUG 2;      # @storage : @parameter%adminOperation : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%adminOperation : @storage
                    GET 4;      # set address : @parameter%adminOperation : @storage
                    SWAP;       # @parameter%adminOperation : set address : @storage
                    DUP;        # @parameter%adminOperation : @parameter%adminOperation : set address : @storage
                    DUG 2;      # @parameter%adminOperation : set address : @parameter%adminOperation : @storage
                    CAR;        # address : set address : @parameter%adminOperation : @storage
                    MEM;        # bool : @parameter%adminOperation : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.adminAddress.contains(params.address)"; # string : @parameter%adminOperation : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%adminOperation : @storage
                    SWAP;       # @storage : @parameter%adminOperation
                    # self.data.adminAddress.remove(params.address) # @storage : @parameter%adminOperation
                    UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    UNPAIR;     # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : set address : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    SWAP;       # set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    PUSH bool False; # bool : set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%adminOperation
                    DIG 5;      # @parameter%adminOperation : bool : set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    CAR;        # address : bool : set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    UPDATE;     # set address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    SWAP;       # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : set address : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    PAIR;       # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    SWAP;       # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    PAIR;       # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))
                    PAIR;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                NIL operation; # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
              }; # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
          }; # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%approveExchangeToken
                # == approveExchangeToken ==
                # sp.verify(self.data.adminAddress.contains(sp.sender), 'Plenty_Network_Router_Not_Admin') # @storage : @parameter%approveExchangeToken
                DUP;        # @storage : @storage : @parameter%approveExchangeToken
                DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%approveExchangeToken : @storage
                GET 4;      # set address : @parameter%approveExchangeToken : @storage
                SENDER;     # @sender : set address : @parameter%approveExchangeToken : @storage
                MEM;        # bool : @parameter%approveExchangeToken : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Not_Admin"; # string : @parameter%approveExchangeToken : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%approveExchangeToken : @storage
                SWAP;       # @storage : @parameter%approveExchangeToken
                # sp.verify(((params.exchangeAddress == self.data.ctezFlatCurve) & (params.tokenAddress == self.data.ctezTokenAddress)) | (self.data.Registry.contains(params.exchangeAddress))) # @storage : @parameter%approveExchangeToken
                DUP;        # @storage : @storage : @parameter%approveExchangeToken
                DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : @parameter%approveExchangeToken : @storage
                CDR;        # address : @parameter%approveExchangeToken : @storage
                SWAP;       # @parameter%approveExchangeToken : address : @storage
                DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : address : @storage
                DUG 2;      # @parameter%approveExchangeToken : address : @parameter%approveExchangeToken : @storage
                CAR;        # pair (nat %amount) (address %exchangeAddress) : address : @parameter%approveExchangeToken : @storage
                CDR;        # address : address : @parameter%approveExchangeToken : @storage
                COMPARE;    # int : @parameter%approveExchangeToken : @storage
                EQ;         # bool : @parameter%approveExchangeToken : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%approveExchangeToken
                    DUP;        # @storage : @storage : @parameter%approveExchangeToken
                    DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                    GET 5;      # address : @parameter%approveExchangeToken : @storage
                    SWAP;       # @parameter%approveExchangeToken : address : @storage
                    DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : address : @storage
                    DUG 2;      # @parameter%approveExchangeToken : address : @parameter%approveExchangeToken : @storage
                    GET 3;      # address : address : @parameter%approveExchangeToken : @storage
                    COMPARE;    # int : @parameter%approveExchangeToken : @storage
                    EQ;         # bool : @parameter%approveExchangeToken : @storage
                  }
                  {
                    PUSH bool False; # bool : @parameter%approveExchangeToken : @storage
                  }; # bool : @parameter%approveExchangeToken : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%approveExchangeToken : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%approveExchangeToken
                    DUP;        # @storage : @storage : @parameter%approveExchangeToken
                    DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%approveExchangeToken : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    SWAP;       # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                    DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                    DUG 2;      # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (nat %amount) (address %exchangeAddress) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    CDR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    MEM;        # bool : @parameter%approveExchangeToken : @storage
                  }; # bool : @parameter%approveExchangeToken : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: ((params.exchangeAddress == self.data.ctezFlatCurve) & (params.tokenAddress == self.data.ctezTokenAddress)) | (self.data.Registry.contains(params.exchangeAddress))"; # string : @parameter%approveExchangeToken : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%approveExchangeToken : @storage
                SWAP;       # @storage : @parameter%approveExchangeToken
                # sp.verify((((params.exchangeAddress == self.data.ctezFlatCurve) & (params.tokenAddress == self.data.ctezTokenAddress)) | ((params.tokenAddress == self.data.Registry[params.exchangeAddress].token1Address) & (params.tokenId == self.data.Registry[params.exchangeAddress].token1Id))) | ((params.tokenAddress == self.data.Registry[params.exchangeAddress].token2Address) & (params.tokenId == self.data.Registry[params.exchangeAddress].token2Id))) # @storage : @parameter%approveExchangeToken
                DUP;        # @storage : @storage : @parameter%approveExchangeToken
                DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : @parameter%approveExchangeToken : @storage
                CDR;        # address : @parameter%approveExchangeToken : @storage
                SWAP;       # @parameter%approveExchangeToken : address : @storage
                DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : address : @storage
                DUG 2;      # @parameter%approveExchangeToken : address : @parameter%approveExchangeToken : @storage
                CAR;        # pair (nat %amount) (address %exchangeAddress) : address : @parameter%approveExchangeToken : @storage
                CDR;        # address : address : @parameter%approveExchangeToken : @storage
                COMPARE;    # int : @parameter%approveExchangeToken : @storage
                EQ;         # bool : @parameter%approveExchangeToken : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%approveExchangeToken
                    DUP;        # @storage : @storage : @parameter%approveExchangeToken
                    DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                    GET 5;      # address : @parameter%approveExchangeToken : @storage
                    SWAP;       # @parameter%approveExchangeToken : address : @storage
                    DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : address : @storage
                    DUG 2;      # @parameter%approveExchangeToken : address : @parameter%approveExchangeToken : @storage
                    GET 3;      # address : address : @parameter%approveExchangeToken : @storage
                    COMPARE;    # int : @parameter%approveExchangeToken : @storage
                    EQ;         # bool : @parameter%approveExchangeToken : @storage
                  }
                  {
                    PUSH bool False; # bool : @parameter%approveExchangeToken : @storage
                  }; # bool : @parameter%approveExchangeToken : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%approveExchangeToken : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%approveExchangeToken
                    DUP;        # @storage : @storage : @parameter%approveExchangeToken
                    DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%approveExchangeToken : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    SWAP;       # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                    DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                    DUG 2;      # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (nat %amount) (address %exchangeAddress) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    CDR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    IF_NONE
                      {
                        PUSH int 607; # int : @parameter%approveExchangeToken : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : @parameter%approveExchangeToken : @storage
                    CAR;        # address : @parameter%approveExchangeToken : @storage
                    SWAP;       # @parameter%approveExchangeToken : address : @storage
                    DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : address : @storage
                    DUG 2;      # @parameter%approveExchangeToken : address : @parameter%approveExchangeToken : @storage
                    GET 3;      # address : address : @parameter%approveExchangeToken : @storage
                    COMPARE;    # int : @parameter%approveExchangeToken : @storage
                    EQ;         # bool : @parameter%approveExchangeToken : @storage
                    IF
                      {
                        SWAP;       # @storage : @parameter%approveExchangeToken
                        DUP;        # @storage : @storage : @parameter%approveExchangeToken
                        DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%approveExchangeToken : @storage
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%approveExchangeToken : @storage
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        SWAP;       # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                        DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                        DUG 2;      # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        CAR;        # pair (nat %amount) (address %exchangeAddress) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        CDR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        IF_NONE
                          {
                            PUSH int 609; # int : @parameter%approveExchangeToken : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%approveExchangeToken : @storage
                        CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : @parameter%approveExchangeToken : @storage
                        GET 3;      # nat : @parameter%approveExchangeToken : @storage
                        SWAP;       # @parameter%approveExchangeToken : nat : @storage
                        DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : nat : @storage
                        DUG 2;      # @parameter%approveExchangeToken : nat : @parameter%approveExchangeToken : @storage
                        GET 4;      # nat : nat : @parameter%approveExchangeToken : @storage
                        COMPARE;    # int : @parameter%approveExchangeToken : @storage
                        EQ;         # bool : @parameter%approveExchangeToken : @storage
                      }
                      {
                        PUSH bool False; # bool : @parameter%approveExchangeToken : @storage
                      }; # bool : @parameter%approveExchangeToken : @storage
                  }; # bool : @parameter%approveExchangeToken : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%approveExchangeToken : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%approveExchangeToken
                    DUP;        # @storage : @storage : @parameter%approveExchangeToken
                    DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%approveExchangeToken : @storage
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    SWAP;       # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                    DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                    DUG 2;      # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    CAR;        # pair (nat %amount) (address %exchangeAddress) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    CDR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                    IF_NONE
                      {
                        PUSH int 612; # int : @parameter%approveExchangeToken : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%approveExchangeToken : @storage
                    GET 3;      # address : @parameter%approveExchangeToken : @storage
                    SWAP;       # @parameter%approveExchangeToken : address : @storage
                    DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : address : @storage
                    DUG 2;      # @parameter%approveExchangeToken : address : @parameter%approveExchangeToken : @storage
                    GET 3;      # address : address : @parameter%approveExchangeToken : @storage
                    COMPARE;    # int : @parameter%approveExchangeToken : @storage
                    EQ;         # bool : @parameter%approveExchangeToken : @storage
                    IF
                      {
                        SWAP;       # @storage : @parameter%approveExchangeToken
                        DUP;        # @storage : @storage : @parameter%approveExchangeToken
                        DUG 2;      # @storage : @parameter%approveExchangeToken : @storage
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%approveExchangeToken : @storage
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%approveExchangeToken : @storage
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        SWAP;       # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                        DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @storage
                        DUG 2;      # @parameter%approveExchangeToken : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        CAR;        # pair (nat %amount) (address %exchangeAddress) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        CDR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%approveExchangeToken : @storage
                        IF_NONE
                          {
                            PUSH int 614; # int : @parameter%approveExchangeToken : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%approveExchangeToken : @storage
                        GET 5;      # nat : @parameter%approveExchangeToken : @storage
                        SWAP;       # @parameter%approveExchangeToken : nat : @storage
                        DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : nat : @storage
                        DUG 2;      # @parameter%approveExchangeToken : nat : @parameter%approveExchangeToken : @storage
                        GET 4;      # nat : nat : @parameter%approveExchangeToken : @storage
                        COMPARE;    # int : @parameter%approveExchangeToken : @storage
                        EQ;         # bool : @parameter%approveExchangeToken : @storage
                      }
                      {
                        PUSH bool False; # bool : @parameter%approveExchangeToken : @storage
                      }; # bool : @parameter%approveExchangeToken : @storage
                  }; # bool : @parameter%approveExchangeToken : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (((params.exchangeAddress == self.data.ctezFlatCurve) & (params.tokenAddress == self.data.ctezTokenAddress)) | ((params.tokenAddress == self.data.Registry[params.exchangeAddress].token1Address) & (params.tokenId == self.data.Registry[params.exchangeAddress].token1Id))) | ((params.tokenAddress == self.data.Registry[params.exchangeAddress].token2Address) & (params.tokenId == self.data.Registry[params.exchangeAddress].token2Id))"; # string : @parameter%approveExchangeToken : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%approveExchangeToken : @storage
                # sp.transfer(sp.record(spender = params.exchangeAddress, value = params.amount), sp.tez(0), sp.contract(sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), params.tokenAddress, entry_point='approve').open_some()) # @parameter%approveExchangeToken : @storage
                DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : @storage
                GET 3;      # address : @parameter%approveExchangeToken : @storage
                CONTRACT %approve (pair (address %spender) (nat %value)); # option (contract (pair (address %spender) (nat %value))) : @parameter%approveExchangeToken : @storage
                IF_NONE
                  {
                    PUSH int 110; # int : @parameter%approveExchangeToken : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%approveExchangeToken : @storage
                NIL operation; # list operation : @some : @parameter%approveExchangeToken : @storage
                SWAP;       # @some : list operation : @parameter%approveExchangeToken : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%approveExchangeToken : @storage
                DIG 3;      # @parameter%approveExchangeToken : mutez : @some : list operation : @storage
                DUP;        # @parameter%approveExchangeToken : @parameter%approveExchangeToken : mutez : @some : list operation : @storage
                CAR;        # pair (nat %amount) (address %exchangeAddress) : @parameter%approveExchangeToken : mutez : @some : list operation : @storage
                CAR;        # nat : @parameter%approveExchangeToken : mutez : @some : list operation : @storage
                SWAP;       # @parameter%approveExchangeToken : nat : mutez : @some : list operation : @storage
                CAR;        # pair (nat %amount) (address %exchangeAddress) : nat : mutez : @some : list operation : @storage
                CDR;        # address : nat : mutez : @some : list operation : @storage
                PAIR;       # pair address nat : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%faOneCallBack
                # == faOneCallBack ==
                # sp.verify(~ self.data.paused, 'Plenty_Network_Router_Paused_State') # @storage : @parameter%faOneCallBack
                DUP;        # @storage : @storage : @parameter%faOneCallBack
                DUG 2;      # @storage : @parameter%faOneCallBack : @storage
                GET 7;      # bool : @parameter%faOneCallBack : @storage
                IF
                  {
                    PUSH string "Plenty_Network_Router_Paused_State"; # string : @parameter%faOneCallBack : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%faOneCallBack : @storage
                SWAP;       # @storage : @parameter%faOneCallBack
                # sp.verify(self.data.Lock, 'Plenty_Network_Router_Bad_State') # @storage : @parameter%faOneCallBack
                DUP;        # @storage : @storage : @parameter%faOneCallBack
                DUG 2;      # @storage : @parameter%faOneCallBack : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack : @storage
                CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%faOneCallBack : @storage
                CAR;        # bool : @parameter%faOneCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Bad_State"; # string : @parameter%faOneCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%faOneCallBack : @storage
                # sp.verify(params > 0, 'Plenty_Network_Router_Zero_Swap') # @parameter%faOneCallBack : @storage
                DUP;        # @parameter%faOneCallBack : @parameter%faOneCallBack : @storage
                PUSH nat 0; # nat : @parameter%faOneCallBack : @parameter%faOneCallBack : @storage
                COMPARE;    # int : @parameter%faOneCallBack : @storage
                LT;         # bool : @parameter%faOneCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Zero_Swap"; # string : @parameter%faOneCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%faOneCallBack : @storage
                SWAP;       # @storage : @parameter%faOneCallBack
                # sp.verify(sp.sender == self.data.Route[self.data.counter].requiredTokenAddress) # @storage : @parameter%faOneCallBack
                DUP;        # @storage : @storage : @parameter%faOneCallBack
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @storage : @parameter%faOneCallBack
                GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @storage : @parameter%faOneCallBack
                SWAP;       # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack
                DUP;        # @storage : @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack
                DUG 3;      # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                IF_NONE
                  {
                    PUSH int 390; # int : @parameter%faOneCallBack : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%faOneCallBack : @storage
                GET 3;      # address : @parameter%faOneCallBack : @storage
                SENDER;     # @sender : address : @parameter%faOneCallBack : @storage
                COMPARE;    # int : @parameter%faOneCallBack : @storage
                EQ;         # bool : @parameter%faOneCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.Route[self.data.counter].requiredTokenAddress"; # string : @parameter%faOneCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%faOneCallBack : @storage
                SWAP;       # @storage : @parameter%faOneCallBack
                # sp.verify(params >= self.data.Route[self.data.counter].minimumOutput, 'Plenty_Network_Router_Slippage') # @storage : @parameter%faOneCallBack
                DUP;        # @storage : @storage : @parameter%faOneCallBack
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @storage : @parameter%faOneCallBack
                GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @storage : @parameter%faOneCallBack
                SWAP;       # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack
                DUP;        # @storage : @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack
                DUG 3;      # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : @storage
                IF_NONE
                  {
                    PUSH int 392; # int : @parameter%faOneCallBack : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%faOneCallBack : @storage
                CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @parameter%faOneCallBack : @storage
                CDR;        # nat : @parameter%faOneCallBack : @storage
                SWAP;       # @parameter%faOneCallBack : nat : @storage
                DUP;        # @parameter%faOneCallBack : @parameter%faOneCallBack : nat : @storage
                DUG 2;      # @parameter%faOneCallBack : nat : @parameter%faOneCallBack : @storage
                COMPARE;    # int : @parameter%faOneCallBack : @storage
                GE;         # bool : @parameter%faOneCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Slippage"; # string : @parameter%faOneCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%faOneCallBack : @storage
                SWAP;       # @storage : @parameter%faOneCallBack
                # self.data.counter += 1 # @storage : @parameter%faOneCallBack
                UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%faOneCallBack
                SWAP;       # pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack
                UNPAIR;     # pair (nat %counter) (address %ctezFlatCurve) : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack
                UNPAIR;     # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack
                PUSH nat 1; # nat : nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack
                ADD;        # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack
                PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack
                PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack
                SWAP;       # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%faOneCallBack
                PAIR;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                # if self.data.Route[self.data.counter].exchangeAddress == self.data.ctezFlatCurve: # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                GET 3;      # pair nat address : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                CDR;        # address : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack
                DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack
                DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF_NONE
                  {
                    PUSH int 399; # int : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # address : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                COMPARE;    # int : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                EQ;         # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF
                  {
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    # if self.data.Route[self.data.counter].requiredTokenAddress == self.data.ctezTokenAddress: # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    GET 5;      # address : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack
                    DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 400; # int : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : address : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        # sp.verify(sp.mul(sp.set_type_expr(params, sp.TNat), sp.mutez(1)) == sp.amount) # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        AMOUNT;     # @amount : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 1; # mutez : @amount : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 3;      # @parameter%faOneCallBack : mutez : @amount : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        MUL;        # mutez : @amount : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.mul(sp.set_type_expr(params, sp.TNat), sp.mutez(1)) == sp.amount"; # string : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        # if (self.data.counter + 1) == sp.len(self.data.Route): # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        DUG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SIZE;       # nat : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH nat 1; # nat : nat : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : nat : nat : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : nat : nat : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        ADD;        # nat : nat : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {
                            # sp.transfer(sp.record(minCashBought = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some()), sp.mul(sp.set_type_expr(params, sp.TNat), sp.mutez(1)), sp.contract(sp.TRecord(minCashBought = sp.TNat, recipient = sp.TAddress).layout(("minCashBought", "recipient")), self.data.ctezFlatCurve, entry_point='tez_to_ctez').open_some()) # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL operation; # list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # address : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %tez_to_ctez (pair (nat %minCashBought) (address %recipient)); # option (contract (pair (nat %minCashBought) (address %recipient))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 257; # int : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 1; # mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 3;      # @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            MUL;        # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 8;      # option address : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 265; # int : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation
                            DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 400; # int : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # nat : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair nat @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.Lock = False # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            # self.data.Route = {} # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            UNPAIR;     # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }
                          {
                            # sp.transfer(sp.record(minCashBought = self.data.Route[self.data.counter].minimumOutput, recipient = sp.self_address), sp.mul(sp.set_type_expr(params, sp.TNat), sp.mutez(1)), sp.contract(sp.TRecord(minCashBought = sp.TNat, recipient = sp.TAddress).layout(("minCashBought", "recipient")), self.data.ctezFlatCurve, entry_point='tez_to_ctez').open_some()) # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL operation; # list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # address : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %tez_to_ctez (pair (nat %minCashBought) (address %recipient)); # option (contract (pair (nat %minCashBought) (address %recipient))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 257; # int : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 1; # mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 3;      # @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            MUL;        # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation
                            DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 400; # int : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # nat : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair nat @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # if False:
                            # sp.transfer((sp.self_address, sp.self_entry_point('faOneCallBack')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 400; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 187; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF %faOneCallBack; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        # sp.transfer(sp.record(cashSold = params, minTezBought = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some()), sp.tez(0), sp.contract(sp.TRecord(cashSold = sp.TNat, minTezBought = sp.TNat, recipient = sp.TAddress).layout(("cashSold", ("minTezBought", "recipient"))), self.data.ctezFlatCurve, entry_point='ctez_to_tez').open_some()) # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # address : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %ctez_to_tez (pair (nat %cashSold) (pair (nat %minTezBought) (address %recipient))); # option (contract (pair (nat %cashSold) (pair (nat %minTezBought) (address %recipient)))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 292; # int : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # option address : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 265; # int : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%faOneCallBack
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @some : mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # @parameter%faOneCallBack : nat : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR 3;     # pair @parameter%faOneCallBack (pair nat @some) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # sp.verify((self.data.counter + 1) == sp.len(self.data.Route)) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        DUG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SIZE;       # nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH nat 1; # nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        ADD;        # nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (self.data.counter + 1) == sp.len(self.data.Route)"; # string : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }; # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.Lock = False # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        # self.data.Route = {} # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        UNPAIR;     # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    # sp.verify(self.data.Registry.contains(self.data.Route[self.data.counter].exchangeAddress), 'Plenty_Network_Router_Invalid_Exchange') # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                    DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 399; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    MEM;        # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {}
                      {
                        PUSH string "Plenty_Network_Router_Invalid_Exchange"; # string : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }; # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # tokenType = sp.local("tokenType", False) # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH bool False; # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Address == self.data.Route[self.data.counter].requiredTokenAddress) & (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Id == self.data.Route[self.data.counter].requiredTokenId): # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                    DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 400; # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 399; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 318; # int : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                        DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 399; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 318; # int : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # nat : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        PUSH bool False; # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        # tokenType.value = self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Type # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 399; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 320; # int : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {}; # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Address == self.data.Route[self.data.counter].requiredTokenAddress) & (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Id == self.data.Route[self.data.counter].requiredTokenId): # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                    DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 400; # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack
                    DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 399; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 322; # int : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : address : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack
                        DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack
                        DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 399; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 322; # int : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 5;      # nat : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        PUSH bool False; # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        # tokenType.value = self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Type # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack
                        DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 399; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 324; # int : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 6;      # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {}; # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.counter + 1) == sp.len(self.data.Route): # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SIZE;       # nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH nat 1; # nat : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : nat : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : nat : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    ADD;        # nat : nat : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # sp.transfer(sp.record(MinimumTokenOut = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some(), requiredTokenAddress = self.data.Route[self.data.counter].requiredTokenAddress, requiredTokenId = self.data.Route[self.data.counter].requiredTokenId, tokenAmountIn = params), sp.tez(0), sp.contract(sp.TRecord(MinimumTokenOut = sp.TNat, recipient = sp.TAddress, requiredTokenAddress = sp.TAddress, requiredTokenId = sp.TNat, tokenAmountIn = sp.TNat).layout((("MinimumTokenOut", "recipient"), ("requiredTokenAddress", ("requiredTokenId", "tokenAmountIn")))), self.data.Route[self.data.counter].exchangeAddress, entry_point='Swap').open_some()) # @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%faOneCallBack
                        DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 399; # int : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %Swap (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))); # option (contract (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn))))) : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 334; # int : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation
                        DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation
                        DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # address : pair nat @parameter%faOneCallBack : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # option address : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 265; # int : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @some : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair (pair nat @some) (pair address (pair nat @parameter%faOneCallBack)) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.Lock = False # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        # self.data.Route = {} # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        UNPAIR;     # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        # sp.transfer(sp.record(MinimumTokenOut = self.data.Route[self.data.counter].minimumOutput, recipient = sp.self_address, requiredTokenAddress = self.data.Route[self.data.counter].requiredTokenAddress, requiredTokenId = self.data.Route[self.data.counter].requiredTokenId, tokenAmountIn = params), sp.tez(0), sp.contract(sp.TRecord(MinimumTokenOut = sp.TNat, recipient = sp.TAddress, requiredTokenAddress = sp.TAddress, requiredTokenId = sp.TNat, tokenAmountIn = sp.TNat).layout((("MinimumTokenOut", "recipient"), ("requiredTokenAddress", ("requiredTokenId", "tokenAmountIn")))), self.data.Route[self.data.counter].exchangeAddress, entry_point='Swap').open_some()) # bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%faOneCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%faOneCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%faOneCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%faOneCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%faOneCallBack
                        DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 399; # int : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %Swap (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))); # option (contract (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn))))) : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 334; # int : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : bool : @parameter%faOneCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation : bool
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%faOneCallBack : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : bool
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # address : pair nat @parameter%faOneCallBack : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SELF_ADDRESS; # @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool
                        DUG 8;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 400; # int : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @self : pair address (pair nat @parameter%faOneCallBack) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair (pair nat @self) (pair address (pair nat @parameter%faOneCallBack)) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # bool : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # if tokenType.value: # bool : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # sp.transfer(sp.record(requests = sp.list([sp.record(owner = sp.self_address, token_id = self.data.Route[self.data.counter].requiredTokenId)]), callback = sp.contract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance"))), sp.self_address, entry_point='faTwoCallBack').open_some()), sp.tez(0), sp.contract(sp.TRecord(callback = sp.TContract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance")))), requests = sp.TList(sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id")))).layout(("requests", "callback")), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='balance_of').open_some(message = 'InvalidTokenInterface')) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 400; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %balance_of (pair (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))); # option (contract (pair (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH string "InvalidTokenInterface"; # string : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %faTwoCallBack (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))); # option (contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 170; # int : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL (pair address nat); # list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 400; # int : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 4;      # nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair (list (pair address nat)) @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }
                          {
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # sp.transfer((sp.self_address, sp.self_entry_point('faOneCallBack')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 400; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 187; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF %faOneCallBack; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }; # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
              }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%faTwoCallBack
                # == faTwoCallBack ==
                # sp.verify(~ self.data.paused, 'Plenty_Network_Router_Paused_State') # @storage : @parameter%faTwoCallBack
                DUP;        # @storage : @storage : @parameter%faTwoCallBack
                DUG 2;      # @storage : @parameter%faTwoCallBack : @storage
                GET 7;      # bool : @parameter%faTwoCallBack : @storage
                IF
                  {
                    PUSH string "Plenty_Network_Router_Paused_State"; # string : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%faTwoCallBack : @storage
                SWAP;       # @storage : @parameter%faTwoCallBack
                # sp.verify(self.data.Lock, 'Plenty_Network_Router_Bad_State') # @storage : @parameter%faTwoCallBack
                DUP;        # @storage : @storage : @parameter%faTwoCallBack
                DUG 2;      # @storage : @parameter%faTwoCallBack : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%faTwoCallBack : @storage
                CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%faTwoCallBack : @storage
                CAR;        # bool : @parameter%faTwoCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Bad_State"; # string : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%faTwoCallBack : @storage
                SWAP;       # @storage : @parameter%faTwoCallBack
                # sp.verify(sp.sender == self.data.Route[self.data.counter].requiredTokenAddress) # @storage : @parameter%faTwoCallBack
                DUP;        # @storage : @storage : @parameter%faTwoCallBack
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @storage : @parameter%faTwoCallBack
                GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @storage : @parameter%faTwoCallBack
                SWAP;       # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faTwoCallBack
                DUP;        # @storage : @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faTwoCallBack
                DUG 3;      # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faTwoCallBack : @storage
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faTwoCallBack : @storage
                CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faTwoCallBack : @storage
                GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%faTwoCallBack : @storage
                IF_NONE
                  {
                    PUSH int 411; # int : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%faTwoCallBack : @storage
                GET 3;      # address : @parameter%faTwoCallBack : @storage
                SENDER;     # @sender : address : @parameter%faTwoCallBack : @storage
                COMPARE;    # int : @parameter%faTwoCallBack : @storage
                EQ;         # bool : @parameter%faTwoCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.Route[self.data.counter].requiredTokenAddress"; # string : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%faTwoCallBack : @storage
                # sp.verify(sp.len(params) == 1, 'Invalid Length') # @parameter%faTwoCallBack : @storage
                DUP;        # @parameter%faTwoCallBack : @parameter%faTwoCallBack : @storage
                SIZE;       # nat : @parameter%faTwoCallBack : @storage
                PUSH nat 1; # nat : nat : @parameter%faTwoCallBack : @storage
                COMPARE;    # int : @parameter%faTwoCallBack : @storage
                EQ;         # bool : @parameter%faTwoCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "Invalid Length"; # string : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%faTwoCallBack : @storage
                # balance = sp.local("balance", 0) # @parameter%faTwoCallBack : @storage
                PUSH nat 0; # nat : @parameter%faTwoCallBack : @storage
                SWAP;       # @parameter%faTwoCallBack : nat : @storage
                # for response in params: ... # @parameter%faTwoCallBack : nat : @storage
                DUP;        # @parameter%faTwoCallBack : @parameter%faTwoCallBack : nat : @storage
                DUG 2;      # @parameter%faTwoCallBack : nat : @parameter%faTwoCallBack : @storage
                ITER
                  {
                    SWAP;       # nat : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    DROP;       # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    # sp.verify(response.request.owner == sp.self_address) # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    DUP;        # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    CAR;        # pair (address %owner) (nat %token_id) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    CAR;        # address : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    SELF_ADDRESS; # @self : address : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    COMPARE;    # int : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    EQ;         # bool : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: response.request.owner == sp.self_address"; # string : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                        FAILWITH;   # FAILED
                      }; # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    # sp.verify(response.request.token_id == self.data.Route[self.data.counter].requiredTokenId) # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    DIG 2;      # @storage : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack
                    DUP;        # @storage : @storage : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @storage : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @storage : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack
                    SWAP;       # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack
                    DUP;        # @storage : @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack
                    DUG 4;      # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    IF_NONE
                      {
                        PUSH int 421; # int : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    GET 4;      # nat : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    SWAP;       # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : nat : @parameter%faTwoCallBack : @storage
                    DUP;        # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : nat : @parameter%faTwoCallBack : @storage
                    DUG 2;      # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : nat : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    CAR;        # pair (address %owner) (nat %token_id) : nat : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    CDR;        # nat : nat : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    COMPARE;    # int : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    EQ;         # bool : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: response.request.token_id == self.data.Route[self.data.counter].requiredTokenId"; # string : pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                        FAILWITH;   # FAILED
                      }; # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    # balance.value = response.balance # pair (pair %request (address %owner) (nat %token_id)) (nat %balance) : @parameter%faTwoCallBack : @storage
                    CDR;        # nat : @parameter%faTwoCallBack : @storage
                  }; # nat : @parameter%faTwoCallBack : @storage
                # sp.verify(balance.value > 0, 'Plenty_Network_Router_Zero_Swap') # nat : @parameter%faTwoCallBack : @storage
                DUP;        # nat : nat : @parameter%faTwoCallBack : @storage
                PUSH nat 0; # nat : nat : nat : @parameter%faTwoCallBack : @storage
                COMPARE;    # int : nat : @parameter%faTwoCallBack : @storage
                LT;         # bool : nat : @parameter%faTwoCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Zero_Swap"; # string : nat : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # nat : @parameter%faTwoCallBack : @storage
                # sp.verify(balance.value >= self.data.Route[self.data.counter].minimumOutput, 'Plenty_Network_Router_Slippage') # nat : @parameter%faTwoCallBack : @storage
                DIG 2;      # @storage : nat : @parameter%faTwoCallBack
                DUP;        # @storage : @storage : nat : @parameter%faTwoCallBack
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @storage : nat : @parameter%faTwoCallBack
                GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @storage : nat : @parameter%faTwoCallBack
                SWAP;       # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : @parameter%faTwoCallBack
                DUP;        # @storage : @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : @parameter%faTwoCallBack
                DUG 4;      # @storage : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : @parameter%faTwoCallBack : @storage
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : @parameter%faTwoCallBack : @storage
                CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : @parameter%faTwoCallBack : @storage
                GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : @parameter%faTwoCallBack : @storage
                IF_NONE
                  {
                    PUSH int 427; # int : nat : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%faTwoCallBack : @storage
                CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : nat : @parameter%faTwoCallBack : @storage
                CDR;        # nat : nat : @parameter%faTwoCallBack : @storage
                SWAP;       # nat : nat : @parameter%faTwoCallBack : @storage
                DUP;        # nat : nat : nat : @parameter%faTwoCallBack : @storage
                DUG 2;      # nat : nat : nat : @parameter%faTwoCallBack : @storage
                COMPARE;    # int : nat : @parameter%faTwoCallBack : @storage
                GE;         # bool : nat : @parameter%faTwoCallBack : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Slippage"; # string : nat : @parameter%faTwoCallBack : @storage
                    FAILWITH;   # FAILED
                  }; # nat : @parameter%faTwoCallBack : @storage
                # self.data.counter += 1 # nat : @parameter%faTwoCallBack : @storage
                DIG 2;      # @storage : nat : @parameter%faTwoCallBack
                UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : nat : @parameter%faTwoCallBack
                SWAP;       # pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : @parameter%faTwoCallBack
                UNPAIR;     # pair (nat %counter) (address %ctezFlatCurve) : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : @parameter%faTwoCallBack
                UNPAIR;     # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : @parameter%faTwoCallBack
                PUSH nat 1; # nat : nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : @parameter%faTwoCallBack
                ADD;        # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : @parameter%faTwoCallBack
                PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : @parameter%faTwoCallBack
                PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : @parameter%faTwoCallBack
                SWAP;       # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : nat : @parameter%faTwoCallBack
                PAIR;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                # if self.data.Route[self.data.counter].exchangeAddress == self.data.ctezFlatCurve: # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                GET 3;      # pair nat address : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                CDR;        # address : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat : @parameter%faTwoCallBack
                DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat : @parameter%faTwoCallBack
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat : @parameter%faTwoCallBack
                GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat : @parameter%faTwoCallBack
                SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : @parameter%faTwoCallBack
                DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : @parameter%faTwoCallBack
                DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF_NONE
                  {
                    PUSH int 432; # int : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # address : address : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                COMPARE;    # int : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                EQ;         # bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF
                  {
                    SWAP;       # @parameter%faTwoCallBack : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DROP;       # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat
                    # if self.data.Route[self.data.counter].requiredTokenAddress == self.data.ctezTokenAddress: # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat
                    GET 5;      # address : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : nat
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat
                    DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 433; # int : address : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : address : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        # sp.verify(sp.mul(sp.set_type_expr(balance.value, sp.TNat), sp.mutez(1)) == sp.amount) # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        AMOUNT;     # @amount : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 1; # mutez : @amount : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 3;      # nat : mutez : @amount : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        MUL;        # mutez : @amount : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.mul(sp.set_type_expr(balance.value, sp.TNat), sp.mutez(1)) == sp.amount"; # string : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }; # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat
                        # if (self.data.counter + 1) == sp.len(self.data.Route): # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat
                        DUG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SIZE;       # nat : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH nat 1; # nat : nat : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : nat : nat : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : nat : nat : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        ADD;        # nat : nat : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {
                            # sp.transfer(sp.record(minCashBought = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some()), sp.mul(sp.set_type_expr(balance.value, sp.TNat), sp.mutez(1)), sp.contract(sp.TRecord(minCashBought = sp.TNat, recipient = sp.TAddress).layout(("minCashBought", "recipient")), self.data.ctezFlatCurve, entry_point='tez_to_ctez').open_some()) # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL operation; # list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # address : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %tez_to_ctez (pair (nat %minCashBought) (address %recipient)); # option (contract (pair (nat %minCashBought) (address %recipient))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 257; # int : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 1; # mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 3;      # nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            MUL;        # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 8;      # option address : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 265; # int : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation
                            DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 433; # int : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # nat : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair nat @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.Lock = False # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            # self.data.Route = {} # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            UNPAIR;     # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }
                          {
                            # sp.transfer(sp.record(minCashBought = self.data.Route[self.data.counter].minimumOutput, recipient = sp.self_address), sp.mul(sp.set_type_expr(balance.value, sp.TNat), sp.mutez(1)), sp.contract(sp.TRecord(minCashBought = sp.TNat, recipient = sp.TAddress).layout(("minCashBought", "recipient")), self.data.ctezFlatCurve, entry_point='tez_to_ctez').open_some()) # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL operation; # list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # address : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %tez_to_ctez (pair (nat %minCashBought) (address %recipient)); # option (contract (pair (nat %minCashBought) (address %recipient))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 257; # int : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 1; # mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 3;      # nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            MUL;        # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation
                            DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 433; # int : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # nat : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair nat @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # if False:
                            # sp.transfer((sp.self_address, sp.self_entry_point('faOneCallBack')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 433; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 187; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF %faOneCallBack; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        # sp.transfer(sp.record(cashSold = balance.value, minTezBought = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some()), sp.tez(0), sp.contract(sp.TRecord(cashSold = sp.TNat, minTezBought = sp.TNat, recipient = sp.TAddress).layout(("cashSold", ("minTezBought", "recipient"))), self.data.ctezFlatCurve, entry_point='ctez_to_tez').open_some()) # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # address : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %ctez_to_tez (pair (nat %cashSold) (pair (nat %minTezBought) (address %recipient))); # option (contract (pair (nat %cashSold) (pair (nat %minTezBought) (address %recipient)))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 292; # int : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # option address : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 265; # int : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : nat
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : nat
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : nat
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : nat
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : nat
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : nat
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @some : mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # nat : nat : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR 3;     # pair nat (pair nat @some) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # sp.verify((self.data.counter + 1) == sp.len(self.data.Route)) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        DUG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SIZE;       # nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH nat 1; # nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        ADD;        # nat : nat : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (self.data.counter + 1) == sp.len(self.data.Route)"; # string : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }; # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.Lock = False # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        # self.data.Route = {} # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        UNPAIR;     # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    # sp.verify(self.data.Registry.contains(self.data.Route[self.data.counter].exchangeAddress), 'Plenty_Network_Router_Invalid_Exchange') # nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : @parameter%faTwoCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack
                    DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 432; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    MEM;        # bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {}
                      {
                        PUSH string "Plenty_Network_Router_Invalid_Exchange"; # string : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }; # nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # tokenType = sp.local("tokenType", False) # nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH bool False; # bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Address == self.data.Route[self.data.counter].requiredTokenAddress) & (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Id == self.data.Route[self.data.counter].requiredTokenId): # bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack
                    DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 433; # int : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : @parameter%faTwoCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : @parameter%faTwoCallBack
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : @parameter%faTwoCallBack
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : @parameter%faTwoCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack
                    DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 432; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 318; # int : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : address : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : @parameter%faTwoCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack
                        DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : @parameter%faTwoCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : @parameter%faTwoCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : @parameter%faTwoCallBack
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : @parameter%faTwoCallBack
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : @parameter%faTwoCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 432; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 318; # int : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # nat : nat : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        PUSH bool False; # bool : bool : nat : @parameter%faTwoCallBack : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # bool : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # tokenType.value = self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Type # nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 432; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 320; # int : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {}; # bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Address == self.data.Route[self.data.counter].requiredTokenAddress) & (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Id == self.data.Route[self.data.counter].requiredTokenId): # bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 433; # int : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                    DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 432; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 322; # int : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : address : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 432; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 322; # int : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 5;      # nat : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        PUSH bool False; # bool : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # bool : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # tokenType.value = self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Type # nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))
                        DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 432; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 324; # int : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 6;      # bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {}; # bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.counter + 1) == sp.len(self.data.Route): # bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SIZE;       # nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH nat 1; # nat : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair nat address : nat : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : nat : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    ADD;        # nat : nat : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # nat : list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DROP;       # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # sp.transfer(sp.record(MinimumTokenOut = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some(), requiredTokenAddress = self.data.Route[self.data.counter].requiredTokenAddress, requiredTokenId = self.data.Route[self.data.counter].requiredTokenId, tokenAmountIn = balance.value), sp.tez(0), sp.contract(sp.TRecord(MinimumTokenOut = sp.TNat, recipient = sp.TAddress, requiredTokenAddress = sp.TAddress, requiredTokenId = sp.TNat, tokenAmountIn = sp.TNat).layout((("MinimumTokenOut", "recipient"), ("requiredTokenAddress", ("requiredTokenId", "tokenAmountIn")))), self.data.Route[self.data.counter].exchangeAddress, entry_point='Swap').open_some()) # nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 2;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : nat
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : nat
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : nat
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : nat
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : nat
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : nat
                        DUG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 432; # int : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %Swap (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))); # option (contract (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn))))) : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 334; # int : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation
                        DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation
                        DUG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # address : pair nat nat : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # option address : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 265; # int : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair (pair nat @some) (pair address (pair nat nat)) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.Lock = False # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        # self.data.Route = {} # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        UNPAIR;     # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        DIG 2;      # list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DROP;       # bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # sp.transfer(sp.record(MinimumTokenOut = self.data.Route[self.data.counter].minimumOutput, recipient = sp.self_address, requiredTokenAddress = self.data.Route[self.data.counter].requiredTokenAddress, requiredTokenId = self.data.Route[self.data.counter].requiredTokenId, tokenAmountIn = balance.value), sp.tez(0), sp.contract(sp.TRecord(MinimumTokenOut = sp.TNat, recipient = sp.TAddress, requiredTokenAddress = sp.TAddress, requiredTokenId = sp.TNat, tokenAmountIn = sp.TNat).layout((("MinimumTokenOut", "recipient"), ("requiredTokenAddress", ("requiredTokenId", "tokenAmountIn")))), self.data.Route[self.data.counter].exchangeAddress, entry_point='Swap').open_some()) # bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : nat
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : nat
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : nat
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : nat
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : nat
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : nat
                        DUG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 432; # int : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %Swap (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))); # option (contract (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn))))) : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 334; # int : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : bool : nat : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool
                        DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # address : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SELF_ADDRESS; # @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 6;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        DUG 8;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 433; # int : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair (pair nat @self) (pair address (pair nat nat)) : mutez : @some : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : bool : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # bool : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # if tokenType.value: # bool : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # sp.transfer(sp.record(requests = sp.list([sp.record(owner = sp.self_address, token_id = self.data.Route[self.data.counter].requiredTokenId)]), callback = sp.contract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance"))), sp.self_address, entry_point='faTwoCallBack').open_some()), sp.tez(0), sp.contract(sp.TRecord(callback = sp.TContract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance")))), requests = sp.TList(sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id")))).layout(("requests", "callback")), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='balance_of').open_some(message = 'InvalidTokenInterface')) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 433; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %balance_of (pair (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))); # option (contract (pair (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH string "InvalidTokenInterface"; # string : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %faTwoCallBack (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))); # option (contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))) : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 170; # int : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL (pair address nat); # list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 5;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUG 7;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 433; # int : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 4;      # nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair (list (pair address nat)) @some : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }
                          {
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # sp.transfer((sp.self_address, sp.self_entry_point('faOneCallBack')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair nat address : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 433; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 187; # int : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF %faOneCallBack; # @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self @self : mutez : @some : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }; # list operation : pair (pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
              }
              {
                SWAP;       # @storage : @parameter%routerSwap
                # == routerSwap ==
                # sp.verify(~ self.data.paused, 'Plenty_Network_Router_Paused_State') # @storage : @parameter%routerSwap
                DUP;        # @storage : @storage : @parameter%routerSwap
                DUG 2;      # @storage : @parameter%routerSwap : @storage
                GET 7;      # bool : @parameter%routerSwap : @storage
                IF
                  {
                    PUSH string "Plenty_Network_Router_Paused_State"; # string : @parameter%routerSwap : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%routerSwap : @storage
                SWAP;       # @storage : @parameter%routerSwap
                # sp.verify(~ self.data.Lock, 'Plenty_Network_Router_Bad_State') # @storage : @parameter%routerSwap
                DUP;        # @storage : @storage : @parameter%routerSwap
                DUG 2;      # @storage : @parameter%routerSwap : @storage
                CAR;        # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : @parameter%routerSwap : @storage
                CAR;        # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : @parameter%routerSwap : @storage
                CAR;        # bool : @parameter%routerSwap : @storage
                IF
                  {
                    PUSH string "Plenty_Network_Router_Bad_State"; # string : @parameter%routerSwap : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%routerSwap : @storage
                # sp.verify(sp.len(params.Route) > 0, 'Plenty_Network_Router_Small_Route') # @parameter%routerSwap : @storage
                DUP;        # @parameter%routerSwap : @parameter%routerSwap : @storage
                CAR;        # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%routerSwap : @storage
                SIZE;       # nat : @parameter%routerSwap : @storage
                PUSH nat 0; # nat : nat : @parameter%routerSwap : @storage
                COMPARE;    # int : @parameter%routerSwap : @storage
                LT;         # bool : @parameter%routerSwap : @storage
                IF
                  {}
                  {
                    PUSH string "Plenty_Network_Router_Small_Route"; # string : @parameter%routerSwap : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%routerSwap : @storage
                SWAP;       # @storage : @parameter%routerSwap
                # self.data.Lock = True # @storage : @parameter%routerSwap
                UNPAIR;     # pair (pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                UNPAIR;     # pair (bool %Lock) (big_map %Registry address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                PUSH bool True; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                SWAP;       # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                # self.data.Route = params.Route # pair (map %Route nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set %adminAddress address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                DUP 4;      # @parameter%routerSwap : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                CAR;        # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                PAIR;       # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : @parameter%routerSwap
                PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                SWAP;       # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                # self.data.recipient = sp.some(params.recipient) # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                DUP;        # @parameter%routerSwap : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                DUG 2;      # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                GET 4;      # address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                SOME;       # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                # if self.data.Route[self.data.counter].exchangeAddress == self.data.ctezFlatCurve: # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                CDR;        # address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap
                DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap
                DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF_NONE
                  {
                    PUSH int 245; # int : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                CAR;        # address : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                COMPARE;    # int : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                EQ;         # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                IF
                  {
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    # if self.data.Route[self.data.counter].requiredTokenAddress == self.data.ctezTokenAddress: # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    GET 5;      # address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap
                    DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 246; # int : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : address : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        # sp.verify(sp.mul(sp.set_type_expr(params.SwapAmount, sp.TNat), sp.mutez(1)) == sp.amount) # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        AMOUNT;     # @amount : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 1; # mutez : @amount : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 3;      # @parameter%routerSwap : mutez : @amount : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # nat : mutez : @amount : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        MUL;        # mutez : @amount : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.mul(sp.set_type_expr(params.SwapAmount, sp.TNat), sp.mutez(1)) == sp.amount"; # string : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        # if (self.data.counter + 1) == sp.len(self.data.Route): # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        DUG 2;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SIZE;       # nat : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH nat 1; # nat : nat : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : nat : nat : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : nat : nat : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        ADD;        # nat : nat : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {
                            # sp.transfer(sp.record(minCashBought = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some()), sp.mul(sp.set_type_expr(params.SwapAmount, sp.TNat), sp.mutez(1)), sp.contract(sp.TRecord(minCashBought = sp.TNat, recipient = sp.TAddress).layout(("minCashBought", "recipient")), self.data.ctezFlatCurve, entry_point='tez_to_ctez').open_some()) # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL operation; # list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # address : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %tez_to_ctez (pair (nat %minCashBought) (address %recipient)); # option (contract (pair (nat %minCashBought) (address %recipient))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 257; # int : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 1; # mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 3;      # @parameter%routerSwap : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            MUL;        # mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 8;      # option address : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 265; # int : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation
                            DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 246; # int : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # nat : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair nat @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.Lock = False # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            UNPAIR;     # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            # self.data.Route = {} # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            SWAP;       # pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            UNPAIR;     # pair (nat %counter) (address %ctezFlatCurve) : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                            SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                            PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }
                          {
                            # sp.transfer(sp.record(minCashBought = self.data.Route[self.data.counter].minimumOutput, recipient = sp.self_address), sp.mul(sp.set_type_expr(params.SwapAmount, sp.TNat), sp.mutez(1)), sp.contract(sp.TRecord(minCashBought = sp.TNat, recipient = sp.TAddress).layout(("minCashBought", "recipient")), self.data.ctezFlatCurve, entry_point='tez_to_ctez').open_some()) # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL operation; # list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DUP 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # address : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %tez_to_ctez (pair (nat %minCashBought) (address %recipient)); # option (contract (pair (nat %minCashBought) (address %recipient))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 257; # int : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 1; # mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 3;      # @parameter%routerSwap : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            MUL;        # mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : mutez : @some : list operation
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation
                            DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 246; # int : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CDR;        # nat : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair nat @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # if False:
                            # sp.transfer((sp.self_address, sp.self_entry_point('faOneCallBack')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 246; # int : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 187; # int : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF %faOneCallBack; # @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        # sp.transfer(sp.record(cashSold = params.SwapAmount, minTezBought = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some()), sp.tez(0), sp.contract(sp.TRecord(cashSold = sp.TNat, minTezBought = sp.TNat, recipient = sp.TAddress).layout(("cashSold", ("minTezBought", "recipient"))), self.data.ctezFlatCurve, entry_point='ctez_to_tez').open_some()) # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # address : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %ctez_to_tez (pair (nat %cashSold) (pair (nat %minTezBought) (address %recipient))); # option (contract (pair (nat %cashSold) (pair (nat %minTezBought) (address %recipient)))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 292; # int : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # option address : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 265; # int : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : mutez : @some : list operation : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%routerSwap
                        DUG 7;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @some : mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # @parameter%routerSwap : nat : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # nat : nat : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR 3;     # pair nat (pair nat @some) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # sp.verify((self.data.counter + 1) == sp.len(self.data.Route)) # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        DUG 2;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SIZE;       # nat : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH nat 1; # nat : nat : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : nat : nat : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : nat : nat : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        ADD;        # nat : nat : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (self.data.counter + 1) == sp.len(self.data.Route)"; # string : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.Lock = False # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        UNPAIR;     # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        # self.data.Route = {} # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        UNPAIR;     # pair (nat %counter) (address %ctezFlatCurve) : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }
                  {
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    # sp.verify(self.data.Registry.contains(self.data.Route[self.data.counter].exchangeAddress), 'Plenty_Network_Router_Invalid_Exchange') # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    CAR;        # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                    DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 245; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    MEM;        # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {}
                      {
                        PUSH string "Plenty_Network_Router_Invalid_Exchange"; # string : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }; # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # tokenType = sp.local("tokenType", False) # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH bool False; # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Address == self.data.Route[self.data.counter].requiredTokenAddress) & (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Id == self.data.Route[self.data.counter].requiredTokenId): # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 2;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                    DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 246; # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    CAR;        # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 245; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 318; # int : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DIG 2;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                        DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        CAR;        # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 245; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 318; # int : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # nat : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        PUSH bool False; # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        # tokenType.value = self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token1Type # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        CAR;        # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 245; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 320; # int : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type)) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {}; # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Address == self.data.Route[self.data.counter].requiredTokenAddress) & (self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Id == self.data.Route[self.data.counter].requiredTokenId): # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 2;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                    DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 246; # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DIG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    CAR;        # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : address : bool : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap
                    DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 245; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF_NONE
                      {
                        PUSH int 322; # int : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # address : address : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DIG 2;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap
                        DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        CAR;        # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : bool : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap
                        DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 245; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 322; # int : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 5;      # nat : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        COMPARE;    # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        EQ;         # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        PUSH bool False; # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        # tokenType.value = self.data.Registry[self.data.Route[self.data.counter].exchangeAddress].token2Type # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        CAR;        # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap
                        DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 245; # int : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 324; # int : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 6;      # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {}; # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    # if (self.data.counter + 1) == sp.len(self.data.Route): # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    SIZE;       # nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    PUSH nat 1; # nat : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    DUP 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : nat : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    CAR;        # nat : nat : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    ADD;        # nat : nat : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    COMPARE;    # int : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    EQ;         # bool : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                    IF
                      {
                        DROP;       # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # sp.transfer(sp.record(MinimumTokenOut = self.data.Route[self.data.counter].minimumOutput, recipient = self.data.recipient.open_some(), requiredTokenAddress = self.data.Route[self.data.counter].requiredTokenAddress, requiredTokenId = self.data.Route[self.data.counter].requiredTokenId, tokenAmountIn = params.SwapAmount), sp.tez(0), sp.contract(sp.TRecord(MinimumTokenOut = sp.TNat, recipient = sp.TAddress, requiredTokenAddress = sp.TAddress, requiredTokenId = sp.TNat, tokenAmountIn = sp.TNat).layout((("MinimumTokenOut", "recipient"), ("requiredTokenAddress", ("requiredTokenId", "tokenAmountIn")))), self.data.Route[self.data.counter].exchangeAddress, entry_point='Swap').open_some()) # @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 2;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%routerSwap
                        DUG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 245; # int : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %Swap (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))); # option (contract (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn))))) : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 334; # int : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # @parameter%routerSwap : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation
                        DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation
                        DUG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # address : pair nat nat : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DUP 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 8;      # option address : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 265; # int : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation
                        DUG 7;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @some : pair address (pair nat nat) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair (pair nat @some) (pair address (pair nat nat)) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.Lock = False # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        UNPAIR;     # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PUSH bool False; # bool : big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        # self.data.Route = {} # pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        CDR;        # set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        EMPTY_MAP nat (pair (pair address nat) (pair address nat)); # map nat (pair (pair address nat) (pair address nat)) : set address : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type))))) : pair (map nat (pair (pair address nat) (pair address nat))) (set address) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.recipient = sp.none # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        NONE address; # option address : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UPDATE 8;   # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        # self.data.counter = 0 # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        UNPAIR;     # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        SWAP;       # pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        UNPAIR;     # pair (nat %counter) (address %ctezFlatCurve) : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        CDR;        # address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PUSH nat 0; # nat : address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair nat address : pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        PAIR;       # pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : list operation
                        SWAP;       # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address)) : pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))) : list operation
                        PAIR;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }
                      {
                        # sp.transfer(sp.record(MinimumTokenOut = self.data.Route[self.data.counter].minimumOutput, recipient = sp.self_address, requiredTokenAddress = self.data.Route[self.data.counter].requiredTokenAddress, requiredTokenId = self.data.Route[self.data.counter].requiredTokenId, tokenAmountIn = params.SwapAmount), sp.tez(0), sp.contract(sp.TRecord(MinimumTokenOut = sp.TNat, recipient = sp.TAddress, requiredTokenAddress = sp.TAddress, requiredTokenId = sp.TNat, tokenAmountIn = sp.TNat).layout((("MinimumTokenOut", "recipient"), ("requiredTokenAddress", ("requiredTokenId", "tokenAmountIn")))), self.data.Route[self.data.counter].exchangeAddress, entry_point='Swap').open_some()) # bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        NIL operation; # list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%routerSwap
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%routerSwap
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation : bool : @parameter%routerSwap
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%routerSwap
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%routerSwap
                        DUG 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 245; # int : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # address : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONTRACT %Swap (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn)))); # option (contract (pair (pair (nat %MinimumTokenOut) (address %recipient)) (pair (address %requiredTokenAddress) (pair (nat %requiredTokenId) (nat %tokenAmountIn))))) : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 334; # int : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PUSH mutez 0; # mutez : @some : list operation : bool : @parameter%routerSwap : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 4;      # @parameter%routerSwap : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : nat : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool
                        DUG 7;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 4;      # nat : nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair nat nat : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool
                        DUG 7;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # address : pair nat nat : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SELF_ADDRESS; # @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        DIG 6;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool
                        DUG 8;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF_NONE
                          {
                            PUSH int 246; # int : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CAR;        # pair (address %exchangeAddress) (nat %minimumOutput) : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CDR;        # nat : @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair nat @self : pair address (pair nat nat) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        PAIR;       # pair (pair nat @self) (pair address (pair nat nat)) : mutez : @some : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        TRANSFER_TOKENS; # operation : list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        CONS;       # list operation : bool : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        SWAP;       # bool : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        # if tokenType.value: # bool : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                        IF
                          {
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # sp.transfer(sp.record(requests = sp.list([sp.record(owner = sp.self_address, token_id = self.data.Route[self.data.counter].requiredTokenId)]), callback = sp.contract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance"))), sp.self_address, entry_point='faTwoCallBack').open_some()), sp.tez(0), sp.contract(sp.TRecord(callback = sp.TContract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance")))), requests = sp.TList(sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id")))).layout(("requests", "callback")), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='balance_of').open_some(message = 'InvalidTokenInterface')) # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 246; # int : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %balance_of (pair (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))); # option (contract (pair (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH string "InvalidTokenInterface"; # string : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %faTwoCallBack (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))); # option (contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))) : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 170; # int : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            NIL (pair address nat); # list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            DIG 5;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list (pair address nat) : @some : mutez : @some : list operation
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation
                            DUG 7;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 246; # int : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 4;      # nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self nat : list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list (pair address nat) : @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair (list (pair address nat)) @some : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }
                          {
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            # sp.transfer((sp.self_address, sp.self_entry_point('faOneCallBack')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.Route[self.data.counter].requiredTokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            CAR;        # pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address)) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            GET 3;      # map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : list operation
                            SWAP;       # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUP;        # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation
                            DUG 3;      # pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # pair (nat %counter) (address %ctezFlatCurve) : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CAR;        # nat : map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET;        # option (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 246; # int : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            GET 3;      # address : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            IF_NONE
                              {
                                PUSH int 187; # int : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF %faOneCallBack; # @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            SELF_ADDRESS; # @self : @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            PAIR;       # pair @self @self : mutez : @some : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                            CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                          }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair (address %exchangeAddress) (nat %minimumOutput)) (pair (address %requiredTokenAddress) (nat %requiredTokenId)))) (set address))) (pair (pair (nat %counter) (address %ctezFlatCurve)) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                      }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
                  }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
              }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
          }; # list operation : pair (pair (pair bool (big_map address (pair (pair (address %token1Address) (pair (nat %token1Id) (bool %token1Type))) (pair (address %token2Address) (pair (nat %token2Id) (bool %token2Type)))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
      }; # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
    NIL operation; # list operation : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
    SWAP;       # list operation : list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
      }; # list operation : pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address))))
    PAIR;       # pair (list operation) (pair (pair (pair bool (big_map address (pair (pair address (pair nat bool)) (pair address (pair nat bool))))) (pair (map nat (pair (pair address nat) (pair address nat))) (set address))) (pair (pair nat address) (pair (address %ctezTokenAddress) (pair (bool %paused) (option %recipient address)))))
  };